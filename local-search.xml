<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker自定义镜像</title>
    <link href="/pumpkin/2022/05/26/DevOps/Docker/Docker%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F/"/>
    <url>/pumpkin/2022/05/26/DevOps/Docker/Docker%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<p>构建Docker镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 如果你的构建文件名叫Dockerfile，那么&#x27;-f Dockerfile&#x27;可以省略</span><br>docker build -t java-demo:v1.0 -f Dockerfile .  <br></code></pre></td></tr></table></figure><p>启动Docker镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 14251:14251 --name my-java java-demo:v1.0<br></code></pre></td></tr></table></figure><p>分享镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker login<br><span class="hljs-comment"># 前面的名字需要跟你仓库名对应</span><br>docker tag java-demo:v1.0 rongkezan/java-demo:v1.0<br>docker push rongkezan/java-demo:v1.0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2022/05/25/DevOps/Docker/README/"/>
    <url>/pumpkin/2022/05/25/DevOps/Docker/README/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes</title>
    <link href="/pumpkin/2022/05/25/DevOps/Docker/Kubernetes/"/>
    <url>/pumpkin/2022/05/25/DevOps/Docker/Kubernetes/</url>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes-特性"><a href="#Kubernetes-特性" class="headerlink" title="Kubernetes 特性"></a>Kubernetes 特性</h2><ul><li><strong>服务发现和负载均衡</strong><br>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</li><li><strong>存储编排</strong><br>Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。</li><li><strong>自动部署和回滚</strong><br>你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。</li><li><strong>自动完成装箱计算</strong><br>Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）。 当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。</li><li><strong>自我修复</strong><br>Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</li><li><strong>密钥与配置管理</strong><br>Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</li></ul><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>Kubernetes Cluster &#x3D; N Master Node + N Worker Node (N &gt;&#x3D; 1)</p><h2 id="Mac安装Kubernetes"><a href="#Mac安装Kubernetes" class="headerlink" title="Mac安装Kubernetes"></a>Mac安装Kubernetes</h2><h3 id="1-启动Kubernetes"><a href="#1-启动Kubernetes" class="headerlink" title="1. 启动Kubernetes"></a>1. 启动Kubernetes</h3><p>安装好Docker For Mac之后，会携带Kubernetes</p><p>在Preferences中：</p><ol><li><p>修改Docker Engine</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;https://cr.console.aliyun.com/&quot;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></li><li><p>启动Kubernetes</p><p>Kubernetes -&gt; Enable Kubernetes -&gt; Apply &amp; Restart</p></li></ol><h3 id="2-验证是否启动成功"><a href="#2-验证是否启动成功" class="headerlink" title="2. 验证是否启动成功"></a>2. 验证是否启动成功</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl cluster-info<br>kubectl get nodes<br>kubectl describe node<br></code></pre></td></tr></table></figure><h3 id="3-部署Dashboard"><a href="#3-部署Dashboard" class="headerlink" title="3. 部署Dashboard"></a>3. 部署Dashboard</h3><p>部署Dashboard</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml<br></code></pre></td></tr></table></figure><p>启动Dashboard</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl proxy<br></code></pre></td></tr></table></figure><p>访问控制台</p><p><a href="http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</a></p><h3 id="4-登陆Dashboard"><a href="#4-登陆Dashboard" class="headerlink" title="4. 登陆Dashboard"></a>4. 登陆Dashboard</h3><ol><li>新建文件<code>dashboard-adminuser.yaml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><ol start="2"><li>应用文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f dashboard-adminuser.yaml<br></code></pre></td></tr></table></figure><ol start="3"><li>生成登陆的Token</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl -n kubernetes-dashboard create token admin-user<br></code></pre></td></tr></table></figure><ol start="4"><li>得到如下格式的Token</li></ol><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">eyJhbGciOiJSUzI<span class="hljs-number">1</span>NiIsImtpZCI<span class="hljs-number">6</span>ImVsb<span class="hljs-number">2</span>s<span class="hljs-number">5</span>NlluYWtYMDJNWmVPZFBZNmo<span class="hljs-number">5</span>MU<span class="hljs-number">11</span>el<span class="hljs-number">82</span>VGZwR<span class="hljs-number">2</span>gtVUE<span class="hljs-number">0</span>OTlhY<span class="hljs-number">1</span>UifQ.eyJhdWQiOlsiaHR<span class="hljs-number">0</span>cHM<span class="hljs-number">6</span>Ly<span class="hljs-number">9</span>rdWJlcm<span class="hljs-number">5</span>ldGVzLmRlZmF<span class="hljs-number">1</span>bHQuc<span class="hljs-number">3</span>ZjLmNsdXN<span class="hljs-number">0</span>ZXIubG<span class="hljs-number">9</span>jYWwiXSwiZXhwIjoxNjU<span class="hljs-number">0</span>Njg<span class="hljs-number">2</span>MzM<span class="hljs-number">1</span>LCJpYXQiOjE<span class="hljs-number">2</span>NTQ<span class="hljs-number">2</span>ODI<span class="hljs-number">3</span>MzUsImlzcyI<span class="hljs-number">6</span>Imh<span class="hljs-number">0</span>dHBzOi<span class="hljs-number">8</span>va<span class="hljs-number">3</span>ViZXJuZXRlcy<span class="hljs-number">5</span>kZWZhdWx<span class="hljs-number">0</span>LnN<span class="hljs-number">2</span>Yy<span class="hljs-number">5</span>jbHVzdGVyLmxvY<span class="hljs-number">2</span>FsIiwia<span class="hljs-number">3</span>ViZXJuZXRlcy<span class="hljs-number">5</span>pbyI<span class="hljs-number">6</span>eyJuYW<span class="hljs-number">1</span>lc<span class="hljs-number">3</span>BhY<span class="hljs-number">2</span>UiOiJrdWJlcm<span class="hljs-number">5</span>ldGVzLWRhc<span class="hljs-number">2</span>hib<span class="hljs-number">2</span>FyZCIsInNlcnZpY<span class="hljs-number">2</span>VhY<span class="hljs-number">2</span>NvdW<span class="hljs-number">50</span>Ijp<span class="hljs-number">7</span>Im<span class="hljs-number">5</span>hbWUiOiJhZG<span class="hljs-number">1</span>pbi<span class="hljs-number">11</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>VyIiwidWlkIjoiYWExY<span class="hljs-number">2</span>Y<span class="hljs-number">0</span>MTAtODdlNS<span class="hljs-number">00</span>MDY<span class="hljs-number">2</span>LWI<span class="hljs-number">4</span>ODgtMTg<span class="hljs-number">1</span>MmE<span class="hljs-number">4</span>NTg<span class="hljs-number">5</span>NzFjIn<span class="hljs-number">19</span>LCJuYmYiOjE<span class="hljs-number">2</span>NTQ<span class="hljs-number">2</span>ODI<span class="hljs-number">3</span>MzUsInN<span class="hljs-number">1</span>YiI<span class="hljs-number">6</span>InN<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>RlbTpzZXJ<span class="hljs-number">2</span>aWNlYWNjb<span class="hljs-number">3</span>VudDprdWJlcm<span class="hljs-number">5</span>ldGVzLWRhc<span class="hljs-number">2</span>hib<span class="hljs-number">2</span>FyZDphZG<span class="hljs-number">1</span>pbi<span class="hljs-number">11</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>VyIn<span class="hljs-number">0</span>.UCSlwuNnIVQnsopHXG<span class="hljs-number">8</span>PvLMDmcbtig<span class="hljs-number">3</span>S<span class="hljs-number">8</span>TCtN<span class="hljs-number">716</span>xD<span class="hljs-number">4</span>yITdpc<span class="hljs-number">4</span>RqwmxzKJx<span class="hljs-number">1</span>QI<span class="hljs-number">2</span>L<span class="hljs-number">2</span>bHKEnwMD<span class="hljs-number">38</span>u<span class="hljs-number">96</span>Q<span class="hljs-number">4</span>qQnGWzcJ<span class="hljs-number">1</span>R<span class="hljs-number">8</span>MDtZc<span class="hljs-number">7</span>gGtFWk<span class="hljs-number">51</span>bgoie<span class="hljs-number">6</span>lOtTyf<span class="hljs-number">4</span>n<span class="hljs-number">1</span>WSkSBzd<span class="hljs-number">2</span>UFppMfDB<span class="hljs-number">6</span>jiZ<span class="hljs-number">2</span>vDR<span class="hljs-number">02</span>crhazFgOO<span class="hljs-number">0</span>dVtRGUfclDLOm<span class="hljs-number">2</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span>pTemdZJDQcR<span class="hljs-number">9</span>TywKDXyQeLvGJXEi_N_a<span class="hljs-number">43</span>AhnZmbI_OcadiRCc-hCwlWXWLEZSf<span class="hljs-number">0405</span>t_nrXwA<span class="hljs-number">8</span>NwzWjT<span class="hljs-number">1</span>qJ<span class="hljs-number">8</span>gDsAWHDoifS_<span class="hljs-number">2</span>xoAETeP<span class="hljs-number">0</span>ubhRK<span class="hljs-number">9</span>HmrYa<span class="hljs-number">20</span>aMHRc_M<span class="hljs-number">1</span>HBiwbossNNET_iKdUqLYUNrac<span class="hljs-number">2</span>r<span class="hljs-number">5</span>SYQ<span class="hljs-number">72</span>ia_qG<span class="hljs-number">4</span>inRA<br></code></pre></td></tr></table></figure><ol start="5"><li>使用Token登陆Dashboard</li></ol><p><img src="https://img-blog.csdnimg.cn/a4010b6b0b024cf59734eaded23817b5.png" alt="在这里插入图片描述"></p><ol start="6"><li>测试完成删除用户</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl -n kubernetes-dashboard delete serviceaccount admin-user<br></code></pre></td></tr></table></figure><h2 id="Kubernetes操作"><a href="#Kubernetes操作" class="headerlink" title="Kubernetes操作"></a>Kubernetes操作</h2><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取命名空间</span><br>kubectl get ns<br><span class="hljs-comment"># 创建命名空间</span><br>kubectl create ns test-ns<br><span class="hljs-comment"># 删除命名空间</span><br>kubectl delete ns test-ns<br></code></pre></td></tr></table></figure><h4 id="使用配置文件操作"><a href="#使用配置文件操作" class="headerlink" title="使用配置文件操作"></a>使用配置文件操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi test-ns.yaml<br></code></pre></td></tr></table></figure><p><code>test-ns.yaml</code> 内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-ns</span><br></code></pre></td></tr></table></figure><p>应用配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f test-ns.yaml<br></code></pre></td></tr></table></figure><p>删除指定配置文件所创建的资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl delete -f test-ns.yaml<br></code></pre></td></tr></table></figure><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><blockquote><p>运行中的一组容器，Pod是Kubernetes中应用的最小单位</p></blockquote><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动一个nginx镜像的Pod</span><br>kubectl run mynginx --image=nginx<br><span class="hljs-comment"># 获取名为mynginx的Pod的描述</span><br>kubectl describe pod mynginx<br><span class="hljs-comment"># 删除Pod</span><br>kubectl delete pod mynginx<br><span class="hljs-comment"># 查看Pod的运行日志</span><br>kubectl logs mynginx<br><span class="hljs-comment"># 打印Pod的更完善的信息</span><br>kubectl get pod -owide<br><span class="hljs-comment"># 进入容器</span><br>kubectl <span class="hljs-built_in">exec</span> -it mynginx -- /bin/bash<br></code></pre></td></tr></table></figure><h4 id="使用配置文件操作-1"><a href="#使用配置文件操作-1" class="headerlink" title="使用配置文件操作"></a>使用配置文件操作</h4><p>创建配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi test-pod.yaml<br></code></pre></td></tr></table></figure><p><code>test-pod.yaml</code> 内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">mynginx</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mynginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">mynginx</span><br></code></pre></td></tr></table></figure><p>应用配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f test-pod.yaml<br></code></pre></td></tr></table></figure><p>删除指定配置文件所创建的资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl delete -f test-pod.yaml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装RabbitMq</title>
    <link href="/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85RabbitMq/"/>
    <url>/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85RabbitMq/</url>
    
    <content type="html"><![CDATA[<h2 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1. 拉取镜像"></a>1. 拉取镜像</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker pull rabbitmq:<span class="hljs-number">3.8</span>.<span class="hljs-number">2</span><span class="hljs-literal">-management</span><br></code></pre></td></tr></table></figure><h2 id="2-创建RabbitMq镜像实例"><a href="#2-创建RabbitMq镜像实例" class="headerlink" title="2. 创建RabbitMq镜像实例"></a>2. 创建RabbitMq镜像实例</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> rabbitmq \<br><span class="hljs-literal">--hostname</span> myRabbit \<br><span class="hljs-literal">-p</span> <span class="hljs-number">5672</span>:<span class="hljs-number">5672</span> <span class="hljs-literal">-p</span> <span class="hljs-number">15672</span>:<span class="hljs-number">15672</span> \<br><span class="hljs-literal">-v</span> /docker/rabbitmq/<span class="hljs-keyword">data</span>:/usr/local/rabbitmq<span class="hljs-literal">-docker</span> \<br><span class="hljs-literal">-e</span> RABBITMQ_DEFAULT_USER=admin \<br><span class="hljs-literal">-e</span> RABBITMQ_DEFAULT_PASS=admin \<br>rabbitmq:<span class="hljs-number">3.8</span>.<span class="hljs-number">2</span><span class="hljs-literal">-management</span><br></code></pre></td></tr></table></figure><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><p>输入 ip:15672 访问</p><p><img src="https://img-blog.csdnimg.cn/20210101223742953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Jenkins</title>
    <link href="/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85Jenkins/"/>
    <url>/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85Jenkins/</url>
    
    <content type="html"><![CDATA[<blockquote><p>服务器域名以 192.168.25.100 为例</p></blockquote><h2 id="安装-Jenkins-镜像"><a href="#安装-Jenkins-镜像" class="headerlink" title="安装 Jenkins 镜像"></a>安装 Jenkins 镜像</h2><p><strong>拉取镜像 jenkinsci&#x2F;blueocean</strong></p><p>官方推荐使用的镜像是jenkinsci&#x2F;blueocean，该镜像包含当前的长期支持 (LTS) 的 Jenkins 版本 (可以生产使用) ，并捆绑了所有 Blue Ocean 插件和功能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull jenkinsci/blueocean<br></code></pre></td></tr></table></figure><p><strong>修改目录权限</strong></p><p>因为当映射本地数据卷时，&#x2F;docker&#x2F;jenkins目录的拥有者为root用户，而容器中jenkins user的uid为1000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown -R 1000:1000 /docker/jenkins<br></code></pre></td></tr></table></figure><p><strong>运行 Jenkins 容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run \<br>  --name jenkins \<br>  -d \<br>  -p 8000:8080 \<br>  -p 50000:50000 \<br>  -v /docker/jenkins:/var/jenkins_home \<br>  -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai \<br>  jenkinsci/blueocean<br></code></pre></td></tr></table></figure><h2 id="配置-Jenkins-安装插件国内地址"><a href="#配置-Jenkins-安装插件国内地址" class="headerlink" title="配置 Jenkins 安装插件国内地址"></a>配置 Jenkins 安装插件国内地址</h2><p><strong>在 jenkins 安装目录下找 default.json</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -name default.json<br></code></pre></td></tr></table></figure><p><strong>替换 default.json 中的内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/www.google.com/www.baidu.com/g&#x27; default.json<br>sed -i &#x27;s/updates.jenkins-ci.org\/download/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json<br></code></pre></td></tr></table></figure><p><strong>重启 jenkins</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://192.168.25.100:8000/restart<br></code></pre></td></tr></table></figure><h2 id="登陆-Jenkins"><a href="#登陆-Jenkins" class="headerlink" title="登陆 Jenkins"></a>登陆 Jenkins</h2><p><strong>访问 Jenkins 页面</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://192.168.25.100:8000<br></code></pre></td></tr></table></figure><p><strong>输入管理员密码</strong></p><p>获取 Docker 映射地址的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /docker/jenkins/secrets/initialAdminPassword<br>85770376692448b7b6a8e301fb437848<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210305234455971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="配置-maven-jdk-git"><a href="#配置-maven-jdk-git" class="headerlink" title="配置 maven jdk git"></a>配置 maven jdk git</h2><p><strong>安装插件 Maven Integration，重启 Jenkins</strong></p><p>Manage Jenkins -&gt; Manage Plugins -&gt; Maven Intergration -&gt; Download now and install after restart</p><p><img src="https://img-blog.csdnimg.cn/20210307122414262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>进入容器查询 jdk 和 git 的路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器</span><br>docker exec -it jenkins bash<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取jdk的路径</span><br>echo $JAVA_HOME<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取git的路径</span><br>which git<br></code></pre></td></tr></table></figure><p><strong>配置路径</strong></p><p>Manage Jenkins -&gt; Global Tool Configuration -&gt; Update -&gt; Save</p><p><img src="https://img-blog.csdnimg.cn/20210307124810429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="JDK"></p><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>New Item -&gt; 构建一个maven项目<br><img src="https://img-blog.csdnimg.cn/20210307131950770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>配置 Git 仓库地址</p><p><img src="https://img-blog.csdnimg.cn/20210307132120544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Build Now</p><p>构建完成后，源码路径：&#x2F;docker&#x2F;jenkins&#x2F;workspace&#x2F;Test</p><h2 id="配置-Gitee"><a href="#配置-Gitee" class="headerlink" title="配置 Gitee"></a>配置 Gitee</h2><p><strong>安装 Gitee 插件</strong></p><p>Manage Jenkins -&gt; Plugin Manager -&gt; Search gitee -&gt; Download now and install after restart</p><p><strong>配置 Gitee</strong></p><p><img src="https://img-blog.csdnimg.cn/20210307155434803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>配置构建任务</strong></p><p>General -&gt; gitee链接</p><p><img src="https://img-blog.csdnimg.cn/20210307161531768.png" alt="在这里插入图片描述"></p><p>Source Code Management -&gt; 选择 Git -&gt; 配置 Repository URL 和 Credentials</p><p><img src="https://img-blog.csdnimg.cn/20210307161629421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Mysql</title>
    <link href="/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85Mysql/"/>
    <url>/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85Mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="1-创建容器"><a href="#1-创建容器" class="headerlink" title="1. 创建容器"></a>1. 创建容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=root --net=host \<br>-v /docker/mysql/data:/mysql/data \<br>-v /docker/mysql/logs/errlog:/mysql/data/discard/errlog \<br>-v /docker/mysql/logs/binlog:/mysql/data/discard/logdir/binlog \<br>-v /docker/mysql/logs/redolog:/mysql/data/discard/logdir/redolog \<br>-v /docker/mysql/tmpdir:/mysql/data/discard/tmpdir \<br>-v /docker/mysql/logs/slowlog:/mysql/data/discard/slowlog \<br>-v /docker/mysql:/mysql/data/discard/other \<br>-v /docker/mysql/conf:/etc/mysql/conf.d \<br>--privileged=<span class="hljs-literal">true</span> mysql<br></code></pre></td></tr></table></figure><h2 id="2-进入容器"><a href="#2-进入容器" class="headerlink" title="2. 进入容器"></a>2. 进入容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">docker exec -it mysql /bin/bash<br></code></pre></td></tr></table></figure><h2 id="3-找到容器内配置文件位置"><a href="#3-找到容器内配置文件位置" class="headerlink" title="3. 找到容器内配置文件位置"></a>3. 找到容器内配置文件位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">mysql --help | grep my.cnf<br><br># 按照路径优先排序，可能出现在以下路径，本人路径为 /etc/mysql/my.cnf<br>order of preference, my.cnf, $MYSQL_TCP_PORT,<br>/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf <br></code></pre></td></tr></table></figure><p>将配置文件内容复制一份到<code>/docker/mysql/conf</code>，然后就可以根据自己的需求修改配置了。</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Nginx</title>
    <link href="/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85Nginx/"/>
    <url>/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85Nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="1-复制容器内的配置文件"><a href="#1-复制容器内的配置文件" class="headerlink" title="1. 复制容器内的配置文件"></a>1. 复制容器内的配置文件</h2><p>1.创建一个nginx容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">80</span>:<span class="hljs-number">80</span> <span class="hljs-literal">--name</span> nginx nginx:<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>2.复制容器内的配置文件到当前目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker container <span class="hljs-built_in">cp</span> nginx:/etc/nginx .<br></code></pre></td></tr></table></figure><p>3.改名并移动到<code>~/docker/nginx/conf</code>目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir <span class="hljs-literal">-p</span> ~/docker/nginx<br><span class="hljs-built_in">mv</span> nginx ~/docker/nginx/conf<br></code></pre></td></tr></table></figure><p>4.删除容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker stop nginx<br>docker <span class="hljs-built_in">rm</span> nginx<br></code></pre></td></tr></table></figure><h2 id="2-创建nginx容器"><a href="#2-创建nginx容器" class="headerlink" title="2. 创建nginx容器"></a>2. 创建nginx容器</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">80</span>:<span class="hljs-number">80</span> <span class="hljs-literal">--name</span> nginx <span class="hljs-literal">--privileged</span>=true \<br><span class="hljs-literal">-v</span> ~/docker/nginx/html:/usr/share/nginx/html \<br><span class="hljs-literal">-v</span> ~/docker/nginx/logs:/var/log/nginx \<br><span class="hljs-literal">-v</span> ~/docker/nginx/conf:/etc/nginx \<br>nginx:<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装Redis</title>
    <link href="/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85Redis/"/>
    <url>/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%AE%89%E8%A3%85Redis/</url>
    
    <content type="html"><![CDATA[<h2 id="1-创建配置文件"><a href="#1-创建配置文件" class="headerlink" title="1. 创建配置文件"></a>1. 创建配置文件</h2><h4 id="1-1-创建目录"><a href="#1-1-创建目录" class="headerlink" title="1.1 创建目录"></a>1.1 创建目录</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mkdir -p /docker/redis/conf<br></code></pre></td></tr></table></figure><h4 id="1-2-将配置文件复制进去"><a href="#1-2-将配置文件复制进去" class="headerlink" title="1.2 将配置文件复制进去"></a>1.2 将配置文件复制进去</h4><p>找一份配置文件将其复制进去<br>修改以下参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将其注释</span><br><span class="hljs-comment"># bind 127.0.0.1</span><br><br><span class="hljs-comment"># 将其注释，因为与docker的-d冲突</span><br><span class="hljs-comment"># daemonize yes</span><br></code></pre></td></tr></table></figure><h2 id="2-创建容器"><a href="#2-创建容器" class="headerlink" title="2. 创建容器"></a>2. 创建容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 6379:6379 --name redis --privileged=<span class="hljs-literal">true</span> \<br>-v /docker/redis/data:/data \<br>-v /docker/redis/conf/redis.conf:/etc/redis/redis.conf \<br>redis redis-server /etc/redis/redis.conf \<br>--appendonly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h2 id="3-运行容器中的redis客户端"><a href="#3-运行容器中的redis客户端" class="headerlink" title="3. 运行容器中的redis客户端"></a>3. 运行容器中的redis客户端</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it redis redis-cli<br></code></pre></td></tr></table></figure><p>查看Redis版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it redis redis-server -v<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker基本操作</title>
    <link href="/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/pumpkin/2022/05/25/DevOps/Docker/Docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装docker</span><br>yum -y install docker <br><span class="hljs-comment"># 启动docker</span><br>systemctl start docker<br><span class="hljs-comment"># 停止docker</span><br>systemctl stop docker<br><span class="hljs-comment"># 设置开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment"># 帮助命令</span><br>docker --<span class="hljs-built_in">help</span><br><span class="hljs-comment"># 搜索镜像</span><br>docker search mysql<br><span class="hljs-comment"># 拉取镜像</span><br>docker pull mysql<br><span class="hljs-comment"># 可以拉取指定版本</span><br>docker pull mysql:5.5<br><span class="hljs-comment"># 查询本地镜像</span><br>docker images<br><span class="hljs-comment"># 删除本地镜像（根据 IMAGE_ID）</span><br>docker rmi 0f3e07c0138f<br></code></pre></td></tr></table></figure><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建并启动容器 (-d 表示后台运行)</span><br>docker run --name mytomcat -d tomcat:latest<br><span class="hljs-comment"># 查看创建了哪些容器</span><br>docker ps -a<br><span class="hljs-comment"># 查看哪些容器正在运行</span><br>docker ps<br><span class="hljs-comment"># 停止容器 （根据 容器名称 或 容器ID）</span><br>docker stop mytomcat<br><span class="hljs-comment"># 启动容器 （根据 容器名称 或 容器ID）</span><br>docker start mytomcat<br><span class="hljs-comment"># 删除容器 （根据 容器名称 或 容器ID）</span><br>docker <span class="hljs-built_in">rm</span> mytomcat<br><span class="hljs-comment"># 配置端口映射（-p）主机端口：容器端口</span><br>docker run --name mytomcat -d -p 8888:8080 tomcat:latest<br><span class="hljs-comment"># 可以使用一个镜像启动多个容器 例如：启动3个Tomcat服务器，端口为8881,8882,8883</span><br>docker run --name mytomcat1 -d -p 8881:8080 tomcat:latest<br>docker run --name mytomcat2 -d -p 8882:8080 tomcat:latest<br>docker run --name mytomcat3 -d -p 8883:8080 tomcat:latest<br><span class="hljs-comment"># 查看容器日志</span><br>docker logs mytomcat<br><span class="hljs-comment"># 进入容器（exit 命令退出）</span><br>docker <span class="hljs-built_in">exec</span> -it mytomcat bash <br><span class="hljs-comment"># 镜像提交</span><br>docker commit -m=<span class="hljs-string">&quot;提交的描述信息&quot;</span> -a=<span class="hljs-string">&quot;作者&quot;</span> [容器ID] [要创建的目标镜像名]:[标签名]<br></code></pre></td></tr></table></figure><p>更多命令：<a href="https://docs.docker.com/engine/reference/commandline/docker">https://docs.docker.com/engine/reference/commandline/docker</a></p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/pumpkin/2022/05/20/Ohters/Hexo/"/>
    <url>/pumpkin/2022/05/20/Ohters/Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="Hexo-搭建"><a href="#Hexo-搭建" class="headerlink" title="Hexo 搭建"></a>Hexo 搭建</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>Node.js</li><li>Git</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h3 id="启动本地项目"><a href="#启动本地项目" class="headerlink" title="启动本地项目"></a>启动本地项目</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 初始化Hexo项目</span><br>hexo init demo<br><span class="hljs-built_in">cd</span> demo<br>npm install<br><span class="hljs-comment"># 启动本地Hexo项目</span><br>hexo server<br></code></pre></td></tr></table></figure><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><ol><li>在Github上创建仓库 demo</li><li>安装插件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ol start="3"><li>修改配置文件<code>_config.yml</code> 配置远程部署仓库</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/rongkezan/demo.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><ol start="4"><li>修改配置文件<code>_config.yml</code> 配置根目录</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://rongkezan.github.io/demo</span><br></code></pre></td></tr></table></figure><ol start="5"><li>部署</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo deploy<br></code></pre></td></tr></table></figure><h2 id="Hexo-主题-–-Fluid"><a href="#Hexo-主题-–-Fluid" class="headerlink" title="Hexo 主题 – Fluid"></a>Hexo 主题 – Fluid</h2><ol><li><p>Fluid官方文档：<a href="https://hexo.fluid-dev.com/docs">https://hexo.fluid-dev.com/docs</a></p></li><li><p>拉取Fluid主题</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><ol start="3"><li>修改配置文件<code>_config.yml</code> 主题配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><ol start="4"><li>创建关于页</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new page about<br></code></pre></td></tr></table></figure><ol start="5"><li>覆盖配置</li></ol><p>复制官方配置文件到博客目录下： <code>_config.fluid.yml</code></p><p>官方配置文件：<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml</a></p>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kong</title>
    <link href="/pumpkin/2022/05/20/Ohters/Kong/"/>
    <url>/pumpkin/2022/05/20/Ohters/Kong/</url>
    
    <content type="html"><![CDATA[<h2 id="Kong的安装"><a href="#Kong的安装" class="headerlink" title="Kong的安装"></a>Kong的安装</h2><blockquote><p>Docker方式</p></blockquote><h3 id="1-创建网络"><a href="#1-创建网络" class="headerlink" title="1. 创建网络"></a>1. 创建网络</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker network create kong-net<br></code></pre></td></tr></table></figure><h3 id="2-新建挂载卷"><a href="#2-新建挂载卷" class="headerlink" title="2. 新建挂载卷"></a>2. 新建挂载卷</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume create kong-volume<br></code></pre></td></tr></table></figure><h3 id="3-启动Kong数据库容器"><a href="#3-启动Kong数据库容器" class="headerlink" title="3. 启动Kong数据库容器"></a>3. 启动Kong数据库容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name kong-database \<br>  --network=kong-net \<br>  -p 5432:5432 \<br>  -v kong-volume:/var/lib/postgresql/data \<br>  -e <span class="hljs-string">&quot;POSTGRES_USER=kong&quot;</span> \<br>  -e <span class="hljs-string">&quot;POSTGRES_DB=kong&quot;</span> \<br>  -e <span class="hljs-string">&quot;POSTGRES_PASSWORD=kongpass&quot;</span> \<br>  postgres:9.6<br></code></pre></td></tr></table></figure><h3 id="4-初始化Kong数据"><a href="#4-初始化Kong数据" class="headerlink" title="4. 初始化Kong数据"></a>4. 初始化Kong数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --<span class="hljs-built_in">rm</span> --network=kong-net \<br>  -e <span class="hljs-string">&quot;KONG_DATABASE=postgres&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_PG_HOST=kong-database&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_PG_PASSWORD=kongpass&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_PASSWORD=test&quot;</span> \<br> kong/kong-gateway:2.8.1.1-alpine kong migrations bootstrap<br></code></pre></td></tr></table></figure><h3 id="5-启动kong-gateway容器"><a href="#5-启动kong-gateway容器" class="headerlink" title="5. 启动kong-gateway容器"></a>5. 启动kong-gateway容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name kong-gateway \<br>  --network=kong-net \<br>  -e <span class="hljs-string">&quot;KONG_DATABASE=postgres&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_PG_HOST=kong-database&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_PG_USER=kong&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_PG_PASSWORD=kongpass&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001&quot;</span> \<br>  -e <span class="hljs-string">&quot;KONG_ADMIN_GUI_URL=http://localhost:8002&quot;</span> \<br>  -e KONG_LICENSE_DATA \<br>  -p 8000:8000 \<br>  -p 8443:8443 \<br>  -p 8001:8001 \<br>  -p 8444:8444 \<br>  -p 8002:8002 \<br>  -p 8445:8445 \<br>  -p 8003:8003 \<br>  -p 8004:8004 \<br>  kong/kong-gateway:2.8.1.1-alpine<br></code></pre></td></tr></table></figure><h3 id="6-测试是否安装成功"><a href="#6-测试是否安装成功" class="headerlink" title="6. 测试是否安装成功"></a>6. 测试是否安装成功</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">浏览器访问<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8001</span><br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8002</span><br></code></pre></td></tr></table></figure><h2 id="Kong管理后台Konga安装"><a href="#Kong管理后台Konga安装" class="headerlink" title="Kong管理后台Konga安装"></a>Kong管理后台Konga安装</h2><h3 id="1-新建挂载卷"><a href="#1-新建挂载卷" class="headerlink" title="1. 新建挂载卷"></a>1. 新建挂载卷</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume create konga-volume<br></code></pre></td></tr></table></figure><h3 id="2-启动Konga数据库容器"><a href="#2-启动Konga数据库容器" class="headerlink" title="2. 启动Konga数据库容器"></a>2. 启动Konga数据库容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name konga-database \<br>  --network=kong-net \<br>  -p 5433:5432 \<br>  -v konga-volume:/var/lib/postgresql/data \<br>  -e <span class="hljs-string">&quot;POSTGRES_USER=konga&quot;</span> \<br>  -e <span class="hljs-string">&quot;POSTGRES_DB=konga&quot;</span> \<br>  -e <span class="hljs-string">&quot;POSTGRES_PASSWORD=konga&quot;</span> \<br>  postgres:9.6<br></code></pre></td></tr></table></figure><h3 id="3-初始Konga数据"><a href="#3-初始Konga数据" class="headerlink" title="3. 初始Konga数据"></a>3. 初始Konga数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --<span class="hljs-built_in">rm</span> --network=kong-net \<br>pantsel/konga:latest -c prepare -a postgres -u postgres://konga:konga@konga-database:5432/konga<br></code></pre></td></tr></table></figure><h3 id="4-启动Konga容器"><a href="#4-启动Konga容器" class="headerlink" title="4. 启动Konga容器"></a>4. 启动Konga容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 1337:1337 \<br>--network kong-net \<br>--name konga \<br>-e <span class="hljs-string">&quot;DB_ADAPTER=postgres&quot;</span> \<br>-e <span class="hljs-string">&quot;DB_URI=postgres://konga:konga@konga-database:5432&quot;</span> \<br>-e <span class="hljs-string">&quot;NODE_ENV=production&quot;</span> \<br>-e <span class="hljs-string">&quot;DB_PASSWORD=konga&quot;</span> \<br>pantsel/konga<br></code></pre></td></tr></table></figure><h3 id="5-注册登陆后建立连接并激活"><a href="#5-注册登陆后建立连接并激活" class="headerlink" title="5. 注册登陆后建立连接并激活"></a>5. 注册登陆后建立连接并激活</h3><p><img src="https://img-blog.csdnimg.cn/3a92f6cf363d4a809c0376c98a4217bf.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/facdd2627c274f7d909135dfd6e29667.png" alt="在这里插入图片描述"></p><h2 id="动态负载均衡配置"><a href="#动态负载均衡配置" class="headerlink" title="动态负载均衡配置"></a>动态负载均衡配置</h2><h3 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h3><p>service：服务，可以直接指向一个API服务节点（host参数设置为ip+port），也可以指定一个upstream实现负载均衡。简单来说，服务用于映射被转发的后端API的节点集合。</p><p>route：路由，它负责匹配实际请求，映射到service中。</p><p>upstream：对应一组API节点，实现负载均衡。</p><p>target：对应一个API节点。</p><img src="https://img-blog.csdnimg.cn/f4c6e213e4bb4beeb1ef2e0a0ead5a62.png" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="1-配置upstreams"><a href="#1-配置upstreams" class="headerlink" title="1. 配置upstreams"></a>1. 配置upstreams</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -X POST http://127.0.0.1:8001/upstreams --data <span class="hljs-string">&quot;name=my-upstream&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-配置target"><a href="#2-配置target" class="headerlink" title="2. 配置target"></a>2. 配置target</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -X POST http://127.0.0.1:8001/upstreams/my-upstream/targets --data <span class="hljs-string">&quot;target=192.168.0.108:14251&quot;</span> --data <span class="hljs-string">&quot;weight=100&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-配置service"><a href="#3-配置service" class="headerlink" title="3. 配置service"></a>3. 配置service</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># name: service的名称</span><br><span class="hljs-comment"># host: upstream的名称</span><br>curl -X POST http://127.0.0.1:8001/services --data <span class="hljs-string">&quot;name=my-service&quot;</span> --data <span class="hljs-string">&quot;host=my-upstream&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-配置route"><a href="#4-配置route" class="headerlink" title="4. 配置route"></a>4. 配置route</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -X POST http://127.0.0.1:8001/services/my-service/routes --data <span class="hljs-string">&quot;name=my-route&quot;</span> --data <span class="hljs-string">&quot;paths[]=/pms&quot;</span><br></code></pre></td></tr></table></figure><h2 id="鉴权配置"><a href="#鉴权配置" class="headerlink" title="鉴权配置"></a>鉴权配置</h2><h3 id="Basic-Auth"><a href="#Basic-Auth" class="headerlink" title="Basic Auth"></a>Basic Auth</h3><h4 id="1-在service中增加一个插件basic-auth"><a href="#1-在service中增加一个插件basic-auth" class="headerlink" title="1. 在service中增加一个插件basic-auth"></a>1. 在service中增加一个插件basic-auth</h4><blockquote><p>service维度的鉴权</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f40ace592054492faa81bc9b22a7d4c7.png" alt="在这里插入图片描述"></p><h4 id="2-增加一个consumer"><a href="#2-增加一个consumer" class="headerlink" title="2. 增加一个consumer"></a>2. 增加一个consumer</h4><p><img src="https://img-blog.csdnimg.cn/4e8be530d4b240968d8984fa17576705.png" alt="在这里插入图片描述"></p><h4 id="3-在登陆时增加basic-auth"><a href="#3-在登陆时增加basic-auth" class="headerlink" title="3. 在登陆时增加basic-auth"></a>3. 在登陆时增加basic-auth</h4><p><img src="https://img-blog.csdnimg.cn/0afdec090b744d008b55799ac5cf27f6.png" alt="在这里插入图片描述"></p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><h4 id="1-添加JWT插件"><a href="#1-添加JWT插件" class="headerlink" title="1. 添加JWT插件"></a>1. 添加JWT插件</h4><p><img src="https://img-blog.csdnimg.cn/49542558f67c4ec38ac991bc5b6fd7bb.png" alt="在这里插入图片描述"></p><h4 id="2-消费者配置JWT"><a href="#2-消费者配置JWT" class="headerlink" title="2. 消费者配置JWT"></a>2. 消费者配置JWT</h4><p><img src="https://img-blog.csdnimg.cn/437efb2e227a43cd947521e55d7ea7bb.png" alt="在这里插入图片描述"></p><h4 id="3-生成JWT密文"><a href="#3-生成JWT密文" class="headerlink" title="3. 生成JWT密文"></a>3. 生成JWT密文</h4><p><a href="https://jwt.io/">https://jwt.io/</a></p><p>key作为iss，secret作为盐</p><p><img src="https://img-blog.csdnimg.cn/fe688259069f4a95adc9532b7dafbaa3.png" alt="在这里插入图片描述"></p><h4 id="4-构造请求头"><a href="#4-构造请求头" class="headerlink" title="4. 构造请求头"></a>4. 构造请求头</h4><p>请求时加上请求头Authorization，内容为 <code>Bearer 密文</code></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJjb3JTUTRteGM3QWlIUUVGaERPOEtzb043NXlXZnA3NSJ9._p2YA2v1oieEGWWcfHHJSqBhl5nAppfZHkBAGNDFZQA<br></code></pre></td></tr></table></figure><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><h3 id="添加插件Rate-limiting"><a href="#添加插件Rate-limiting" class="headerlink" title="添加插件Rate-limiting"></a>添加插件Rate-limiting</h3><p>可以配置秒、分钟、小时、天等多个维度，可以接受多少请求</p><p><img src="https://img-blog.csdnimg.cn/be52d6b72f1d496baf03b143393a2776.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2022/02/21/DevOps/Linux/Linux%20%E6%9D%83%E9%99%90/"/>
    <url>/pumpkin/2022/02/21/DevOps/Linux/Linux%20%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-权限"><a href="#Linux-权限" class="headerlink" title="Linux 权限"></a>Linux 权限</h1><h2 id="权限概述"><a href="#权限概述" class="headerlink" title="权限概述"></a>权限概述</h2><p>在 Linux 系统中，我们所有的操作实质都是在进行进程访问文件的操作。</p><p>我们访问文件需要先取得相应的访问权限，而访问权限是通过 Linux 系统中的安全模型获得的。</p><p>对于 Linux 系统中的安全模型，我们需要知道下面两点：</p><ol><li>Linux 系统上最初的安全模型叫 DAC, 全称是 Discretionary Access Control ，翻译为自主访问控制。</li><li>后来又增加设计了一个新的安全模型叫 MAC, 全称是 Mandatory Access Control, 翻译为强制访问控制。</li></ol><p>MAC 和 DAC 不互斥，DAC 是最基本的安全模型，也是通常我们最常用到的访问控制机制是 Linux 必须具有的功能， 而 MAC 是构建在 DAC 之上的加强安全机制，属于可选模块。访问前， Linux 系统通常都是先做 DAC 检查， 如果没有通过则操作直接失败 ; 如果通过 DAC 检查并且系统支持 MAC 模块，再做 MAC 权限检查。</p><h2 id="权限分类"><a href="#权限分类" class="headerlink" title="权限分类"></a>权限分类</h2><table><thead><tr><th>权限</th><th>缩写</th><th>数字代号</th></tr></thead><tbody><tr><td>Read</td><td>r</td><td>4</td></tr><tr><td>Write</td><td>w</td><td>2</td></tr><tr><td>Execute</td><td>x</td><td>1</td></tr></tbody></table><h2 id="权限说明"><a href="#权限说明" class="headerlink" title="权限说明"></a>权限说明</h2><p>通过 ll 查看文件列表，以某一个文件举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-rw-r--r--  1 keith  staff   9.4K Feb 15 15:54 loss.py<br></code></pre></td></tr></table></figure><p>第 1 个字符表示文件类型，普通文件 (-)、目录文件 (d)、套接字文件 (s)，管道文件 (p)，字符文件 (c)，块文件 (b)，链接文件 (l)</p><p>第 2 个字符开始的 rw-r–r– 部分表示文件的权限位，共有 9 位。</p><p>含义是：</p><ol><li>第 2~4 位的 rw- 表示该文件可被它的 owner （属主）以 r 或 w 或 x 的权限访问。</li><li>第 5~7 位的 r– 表示该文件可被与该文件同一属组的用户以 r 或 x 的权限访问</li><li>第 8~10 位的 r– 表示该文件可被其它未知用户以 r 或 x 的权限访问。</li></ol><h2 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">减少权限</span><br>chmod -rwx [文件名|目录名]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">增加权限</span><br>chmod +rwx [文件名|目录名]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改文件|目录的拥有者</span><br>chown [用户名] [文件名|目录名]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">递归修改文件|目录的组</span><br>chgrp -R [组名] [文件名|目录名]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">递归修改文件权限</span><br>chmod -R 755 [文件名|目录名]<br></code></pre></td></tr></table></figure><h2 id="获得权限"><a href="#获得权限" class="headerlink" title="获得权限"></a>获得权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到指定用户</span><br>su [user]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">暂时切换为管理员权限</span><br>sudo [command]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">为了频繁的执行某些只有超级用户才能执行的权限，可以使用下面命令</span><br>sudo -i<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2022/01/13/Python/Selenium/"/>
    <url>/pumpkin/2022/01/13/Python/Selenium/</url>
    
    <content type="html"><![CDATA[<h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><h3 id="Selenium控制已打开的Chrome-mac"><a href="#Selenium控制已打开的Chrome-mac" class="headerlink" title="Selenium控制已打开的Chrome (mac)"></a>Selenium控制已打开的Chrome (mac)</h3><ol><li><p>下载Webdriver放到<code>/user/local/bin</code>目录下</p></li><li><p>添加环境变量</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=&quot;/Applications/Google Chrome.app/Contents/MacOS:$PATH&quot;<br></code></pre></td></tr></table></figure><ol start="3"><li>命令打开Chrome</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Google\ Chrome --remote-debugging-port=9222 --user-data-dir=<span class="hljs-string">&quot;ChromeProfile&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>执行代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>options = webdriver.ChromeOptions()<br>options.add_experimental_option(<span class="hljs-string">&quot;debuggerAddress&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:9222&quot;</span>)<br>driver = webdriver.Chrome(options=options)<br>driver.get(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/12/02/Ohters/Mac/"/>
    <url>/pumpkin/2021/12/02/Ohters/Mac/</url>
    
    <content type="html"><![CDATA[<h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ol><li><p>profile</p><p>系统环境变量，对所有用户都生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">/etc/profile<br></code></pre></td></tr></table></figure></li><li><p>.bash_profile</p><p>用户级别环境变量，对单一用户生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">~/.bash_profile<br></code></pre></td></tr></table></figure></li><li><p>.zshrc</p><p>用户级别环境变量，针对 zsh shell</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">~/.zshrc<br></code></pre></td></tr></table></figure></li></ol><h2 id="光标快捷键"><a href="#光标快捷键" class="headerlink" title="光标快捷键"></a>光标快捷键</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust">Ctrl + h 退格删除一个字符，相当于通常的Backspace键<br>Ctrl + u 删除光标之前到行首的字符<br>Ctrl + k 删除光标到行尾的字符<br>Ctrl + a 光标移动到行首（Ahead of line），相当于通常的Home键<br>Ctrl + e 光标移动到行尾（End of line）<br>Ctrl + c 取消(cancel)当前行输入的命令，相当于Ctrl + Break<br><br>Ctrl + l 清屏，相当于执行clear命令<br>Ctrl + p 调出命令历史中的前一条（Previous）命令，相当于通常的上箭头<br>Ctrl + n 调出命令历史中的下一条（Next）命令，相当于通常的上箭头<br><br>Ctrl + w 删除从光标位置前到当前所处单词（Word）的开头<br>Ctrl + y 粘贴最后一次被删除的单词<br>Ctrl + r 显示：号提示，根据用户输入查找相关历史命令（reverse-i-search）<br><span class="hljs-type">Option</span>+←          光标单词间移动（向左）<br><span class="hljs-type">Option</span>+→          光标单词向右移动<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/pumpkin/2021/11/30/Ohters/Git/"/>
    <url>/pumpkin/2021/11/30/Ohters/Git/</url>
    
    <content type="html"><![CDATA[<h2 id="Git-仓库操作"><a href="#Git-仓库操作" class="headerlink" title="Git 仓库操作"></a>Git 仓库操作</h2><p>命令帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote --help<br></code></pre></td></tr></table></figure><p>查看远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote -v<br></code></pre></td></tr></table></figure><p>添加远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin https://gitee.com/KeithRong/demo.git<br></code></pre></td></tr></table></figure><p>删除远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote remove origin<br></code></pre></td></tr></table></figure><h2 id="Git-推送操作"><a href="#Git-推送操作" class="headerlink" title="Git 推送操作"></a>Git 推送操作</h2><p>命令帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git fetch --help<br>git add --help<br>git commit --help<br>git push --help<br></code></pre></td></tr></table></figure><p>将本地分支推送关联远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u origin master<br></code></pre></td></tr></table></figure><h2 id="Git-分支操作"><a href="#Git-分支操作" class="headerlink" title="Git 分支操作"></a>Git 分支操作</h2><p>命令帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout --help<br>git merge --help<br>git rebase --help<br></code></pre></td></tr></table></figure><p>创建新分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b [branch_name]<br></code></pre></td></tr></table></figure><p>删除远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin --delete [branch_name]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringWebFlux</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringWebFlux/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringWebFlux/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-WebFlux"><a href="#Spring-WebFlux" class="headerlink" title="Spring WebFlux"></a>Spring WebFlux</h1><p>开启线程会有1M栈内存的开销，栈内存使用超过1M会导致栈溢出</p><p>Tomcat有两个线程池：连接线程池、业务线程池 </p><p>长轮询：客户端和服务器建立连接后不断开，等待服务端数据返回，默认90s，超出则续租。</p><p>响应式编程 (Reactor实现)</p><ol><li>响应式编程操作中，Reactor是满足Reactive规范框架</li><li>Reactor有两个核心类，Mono和Flux，这两个类实现接口Publisher，提供丰富操作符<ol><li>Flux返回N个元素</li><li>Mono返回0或1个元素</li></ol></li><li>Flux和Mono都是数据流的发布者，使用Flux和Mono都可以发出3种数据信号：元素值，错误信号，完成信号。错误信号和完成信号都代表终止信号，终止信号用于告诉订阅者数据流结束了，错误信号终止数据流同时把错误信息传递给订阅者。</li></ol><p><strong>具体实现</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.projectreactor<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>reactor-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;User&gt; <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.selectOne(id);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;list&quot;)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.selectAll();<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;save&quot;)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">saveUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        Mono&lt;User&gt; userMono = Mono.just(user);<br>        <span class="hljs-keyword">return</span> userService.save(userMono);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Integer, User&gt; userMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.userMap.put(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Tom&quot;</span>));<br>        <span class="hljs-built_in">this</span>.userMap.put(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Jerry&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;User&gt; <span class="hljs-title function_">selectOne</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> Mono.justOrEmpty(<span class="hljs-built_in">this</span>.userMap.get(id));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Flux&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Flux.fromIterable(<span class="hljs-built_in">this</span>.userMap.values());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">save</span><span class="hljs-params">(Mono&lt;User&gt; user)</span> &#123;<br>        <span class="hljs-keyword">return</span> user.doOnNext(person -&gt; &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> userMap.size() + <span class="hljs-number">1</span>;<br>           userMap.put(id, person);<br>        &#125;).thenEmpty(Mono.empty());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringMvc/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringMvc/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="Spring-MVC-基本配置"><a href="#Spring-MVC-基本配置" class="headerlink" title="Spring MVC 基本配置"></a>Spring MVC 基本配置</h2><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WebApp_ID&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--名称 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Servlet类 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--SpringMVC配置参数文件的位置 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--默认名称为ServletName-servlet.xml --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath*:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpringMvc配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">         http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动扫描包，实现支持注解的IOC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhangguo.springmvc01&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring MVC不处理静态资源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 支持mvc注解驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/sayhi&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">SayHi</span><span class="hljs-params">(Model model)</span> &#123;<br>        model.addAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;Hello Spring MVC!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;sayhi&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;<br>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello Spring MVC!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Spring-MVC-支持参数"><a href="#Spring-MVC-支持参数" class="headerlink" title="Spring MVC 支持参数"></a>Spring MVC 支持参数</h2><ol><li>注解</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@PathVariable</span>路径变量<br><span class="hljs-variable">@RequestHeader</span>获取请求头<br><span class="hljs-variable">@RequestParam</span>获取请求参数<br><span class="hljs-variable">@CookieValue</span>获取Cookie值<br><span class="hljs-variable">@RequestAttribute</span>获取request域属性<br><span class="hljs-variable">@RequestBody</span>获取请求体<br><span class="hljs-variable">@MatrixVariable</span>矩阵变量<br></code></pre></td></tr></table></figure><h2 id="Spring-MVC-九大组件"><a href="#Spring-MVC-九大组件" class="headerlink" title="Spring MVC 九大组件"></a>Spring MVC 九大组件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 文件上传解析器 */</span><br>MultipartResolver multipartResolver;<br><span class="hljs-comment">/* 区域信息解析器 */</span><br>LocaleResolver localeResolver;<br><span class="hljs-comment">/* 主题解析器 */</span><br>ThemeResolver themeResolver;<br><span class="hljs-comment">/* Handler映射信息 */</span><br>List&lt;HandlerMapping&gt; handlerMappings;<br><span class="hljs-comment">/* Handler适配器 */</span><br>List&lt;HandlerAdapter&gt; handlerAdapters;<br><span class="hljs-comment">/* 异常解析器 */</span><br>List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;<br><span class="hljs-comment">/* 请求到视图转换器 */</span><br>RequestToViewNameTranslator viewNameTranslator;<br><span class="hljs-comment">/* SpringMVC中运行重定向携带数据的功能 */</span><br>FlashMapManager flashMapManager;<br><span class="hljs-comment">/* 视图解析器 */</span><br>List&lt;ViewResolver&gt; viewResolvers;<br></code></pre></td></tr></table></figure><h2 id="Spring-MVC-流程"><a href="#Spring-MVC-流程" class="headerlink" title="Spring MVC 流程"></a>Spring MVC 流程</h2><h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><ol><li>客户端请求提交到 DispatcherServlet</li><li>DispatcherServlet 收到请求后，遍历 HandlerMapping 集合得到 HandlerExecutionChain ，HandlerExecutionChain 中包含Handler 和 Intercepetor (处理器和拦截器)</li><li>HandlerMapping 根据 Url 找到 HandlerAdapter，由 HandlerAdapter 调用具体的Handler<ol><li>先执行前置拦截器applyPreHandle</li><li>再执行处理器中目标方法，返回ModelAndView</li><li>最后执行后置拦截器 applyPostHandle</li><li>执行完成后返回ModelAndView给DispatcherServlet</li></ol></li><li>DispatcherServlet 将ModelAndView传给ViewResolver解析后返回View</li><li>将Model中的数据填充至View中，渲染视图返回给客户端</li></ol><h3 id="各个组件作用"><a href="#各个组件作用" class="headerlink" title="各个组件作用"></a>各个组件作用</h3><p>DispatcherServlet：接收请求，请求转发，处理响应</p><p>HandlerMapping：根据URL找到对应的HandlerAdapter</p><p>HandlerAdapter：调用Handler</p><p>Handler：又名Controller，处理业务请求</p><p>ViewResolver：把逻辑视图解析成物理视图</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://img-blog.csdnimg.cn/20201227173331827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h3><p>入口方法 <code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code></p><ol><li>获取处理器执行链 HandlerExecutionChain</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">mappedHandler = getHandler(processedRequest);<br><span class="hljs-comment">// 遍历HandlerMapping获取handler</span><br><span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mapping.getHandler(request);<br>    <span class="hljs-keyword">if</span> (handler != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> handler;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>根据handler来获取合适的适配器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br></code></pre></td></tr></table></figure><ol start="3"><li>执行Handler的业务逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 执行前置拦截器</span><br><span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response))<br>   <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">// 执行业务逻辑返回 ModelAndView</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><span class="hljs-comment">// 执行后置拦截器</span><br>mappedHandler.applyPostHandle(processedRequest, response, mv);<br></code></pre></td></tr></table></figure><ol start="4"><li>处理转发的信息渲染为视图</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br><span class="hljs-comment">// 渲染视图</span><br>render(mv, request, response);<br>view = mv.getView();<br>view.render(mv.getModelInternal(), request, response);<br></code></pre></td></tr></table></figure><h2 id="Spring-MVC-定时器"><a href="#Spring-MVC-定时器" class="headerlink" title="Spring MVC 定时器"></a>Spring MVC 定时器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置任务扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">task:annotation-driven</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 扫描任务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.demo.springTask&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span>&#123;<br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * ? &quot;)</span> <span class="hljs-comment">// 间隔5秒执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">taskCycle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dateStr</span> <span class="hljs-operator">=</span> date.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;定时任务 : &quot;</span> + dateStr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringIOC</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringIoc/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringIoc/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h1><h2 id="Spring-容器"><a href="#Spring-容器" class="headerlink" title="Spring 容器"></a>Spring 容器</h2><h3 id="Spring-容器-概述"><a href="#Spring-容器-概述" class="headerlink" title="Spring 容器 概述"></a>Spring 容器 概述</h3><p>IoC也称为依赖注入（DI）。 在此过程中，对象仅通过构造函数参数，工厂方法的参数或在构造或从工厂方法返回后在对象实例上设置的属性来定义其依赖项 。 然后，容器在创建bean时注入那些依赖项。 此过程从根本上讲是通过使用类的直接构造或诸如服务定位器模式之类的控件来控制其依赖项的实例化或位置的bean本身的逆过程（因此称为Control的倒置）。</p><p>核心依赖包：<code>org.springframework.beans</code> <code>org.springframework.context</code></p><p>BeanFacotory接口提供了能管理任何类型对象的配置机制，ApplicationContext是它的一个子接口，增加了如下机制：</p><ul><li>Spring AOP 特性的简单集成</li><li>消息资源处理</li><li>事件发布</li><li>应用层面类似 <code>WebApplicationContext</code> 的上下文用于Web应用</li></ul><p>ApplicationContext接口代表Spring IoC容器，并负责实例化，配置和组装Bean</p><p>容器通过读取配置元数据获取有关要实例化，配置和组装哪些对象的指令。</p><p>配置元数据：XML，Java注解，Java代码</p><p>ApplicationContext 常用的两种实现：ClassPathXmlApplicationContext, FileSystemXmlApplicationContext</p><h3 id="Spring-容器整体视图"><a href="#Spring-容器整体视图" class="headerlink" title="Spring 容器整体视图"></a>Spring 容器整体视图</h3><p><img src="https://img-blog.csdnimg.cn/20210116230540355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Spring-接口"><a href="#Spring-接口" class="headerlink" title="Spring 接口"></a>Spring 接口</h3><p><img src="https://img-blog.csdnimg.cn/20210116235007738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Spring-容器-实例化"><a href="#Spring-容器-实例化" class="headerlink" title="Spring 容器 实例化"></a>Spring 容器 实例化</h3><p>下面代码可以实例化一个Spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// create and configure beans</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br><span class="hljs-comment">// retrieve configured instance</span><br><span class="hljs-type">PetStoreService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;petStore&quot;</span>, PetStoreService.class);<br><br><span class="hljs-comment">// use configured instance</span><br>List&lt;String&gt; userList = service.getUsernameList();<br></code></pre></td></tr></table></figure><p>更灵活的变体是使用 GenericApplicationContext 结合读取委托器使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">GenericApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericApplicationContext</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanDefinitionReader</span>(context).loadBeanDefinitions(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>context.refresh();<br></code></pre></td></tr></table></figure><p>实现ApplicationContextAware接口得到ApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.applicationContext = applicationContext;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- services --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;petStore&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.samples.jpetstore.services.PetStoreServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accountDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;accountDao&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;itemDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;itemDao&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- more bean definitions for services go here --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Spring-容器-核心流程"><a href="#Spring-容器-核心流程" class="headerlink" title="Spring 容器 核心流程"></a>Spring 容器 核心流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// There has a method named &quot;loadBeanDefinitions&quot; attampt to resolve resources like xml, annotation, groovy.</span><br><span class="hljs-comment">// These sources will be resolved to &quot;BeanDefinition&quot; through &quot;BeanDefinitionReader&quot;. </span><br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> obtainFreshBeanFactory();<br><br><span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span><br><span class="hljs-comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span><br><span class="hljs-comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span><br><span class="hljs-comment">// Finally, invoke all other BeanFactoryPostProcessors.</span><br>invokeBeanFactoryPostProcessors(beanFactory);<br><br><span class="hljs-comment">// Register bean processors that intercept bean creation.</span><br><span class="hljs-comment">// add &quot;BeanPostProcessor&quot; to a CopyOnWriteArrayList named &quot;beanPostProcessors&quot;</span><br>registerBeanPostProcessors(beanFactory);<br><br><span class="hljs-comment">// Add beans that implement ApplicationListener as listeners.</span><br>registerListeners();<br><br><span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="hljs-comment">// First, it will merge beans with same beanName, there has a &quot;applyMergedBeanDefinitionPostProcessors&quot; to handle these merged beans.</span><br><span class="hljs-comment">// Next, it will find from cache whether bean exists, if the bean is not exists, it will create by &quot;ObjectFactory&quot;.</span><br><span class="hljs-comment">// Finally, put this bean into cache and return this bean.</span><br>finishBeanFactoryInitialization(beanFactory);<br><br><span class="hljs-comment">// Last step: publish corresponding event, Observer pattern.</span><br>finishRefresh();<br></code></pre></td></tr></table></figure><h3 id="Spring-父子容器"><a href="#Spring-父子容器" class="headerlink" title="Spring 父子容器"></a>Spring 父子容器</h3><p>寻找Bean的时候，先从子容器里拿，拿不到再从父容器中拿</p><p>父容器不能访问子容器，子容器可以访问父容器，原因是父容器没有子容器的引用。</p><p>HierarchicalBeanFactory 中只有得到父容器的方法 getParentBeanFactory</p><p>如果在父容器中对Bean进行了增强，而这个Bean定义在了子容器中，那就不会把子容器中的Bean进行增强</p><h2 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h2><p>Spring IoC容器管理一个或多个Bean。这些Bean是使用您提供给容器的配置元数据创建的（例如，以XML<code>&lt;bean/&gt;</code>定义的形式 ）。</p><p>在容器本身内，这些bean定义表示为<code>BeanDefinition</code> 对象，其中包含以下元数据：</p><ul><li>包限定的类名：通常，定义了Bean的实际实现类。</li><li>Bean行为配置元素，用于声明Bean在容器中的行为（作用域，生命周期回调等）。</li><li>引用该bean完成其工作所需的其他bean。这些引用也称为协作者或依赖项。</li><li>要在新创建的对象中设置的其他配置设置。例如，池的大小限制。</li></ul><p>依赖注入的三种方式：构造函数注入、setter注入、接口注入</p><h3 id="Spring-Bean-创建"><a href="#Spring-Bean-创建" class="headerlink" title="Spring Bean 创建"></a>Spring Bean 创建</h3><p><strong>Bean创建流程</strong></p><p>BeanDefinitionReader 通过 xml&#x2F;annotation 获得 Bean 的源信息，Bean 被实例化之后通过一系列的 Processor 最终完成Bean的创建</p><h4 id="1-包扫描注解-组件注解"><a href="#1-包扫描注解-组件注解" class="headerlink" title="1. 包扫描注解  +  组件注解"></a>1. 包扫描注解  +  组件注解</h4><p>@ComponentScan + @Controller @Service @Component …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.controller;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(value = &quot;com.demo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ComponentScan 使用 Filter 排除某一种类型的 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 例: 排除了Contrller注解的Bean</span><br><span class="hljs-meta">@ComponentScan(value = &quot;com.demo&quot;,</span><br><span class="hljs-meta">        excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class)&#125;)</span><br></code></pre></td></tr></table></figure><p>FilterType种类</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">ANNOTATION:</span> 注解<br><span class="hljs-symbol">ASSIGNABLE_TYPE:</span> 类型<br><span class="hljs-symbol">ASPECTJ:</span> 使用ASPECTJ表达式<br><span class="hljs-symbol">REGEX:</span> 使用正则表达式<br><span class="hljs-symbol">CUSTOM:</span> 自定义规则(TypeFilter的实现类)<br></code></pre></td></tr></table></figure><h4 id="2-Bean"><a href="#2-Bean" class="headerlink" title="2. @Bean"></a>2. @Bean</h4><p>通常用于导入第三方包里面的组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Import"><a href="#3-Import" class="headerlink" title="3. @Import"></a>3. @Import</h4><p>​@Import直接注入</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@Import</span>(User.class)<br>public class SpringConfig &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​ImportSelector：使用Import给容器中导入多个组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(MyImportSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;User.class.getName()&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​ImportBeanDefinitionRegistrar：手动注册Bean到容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(MyImportBeanDefinitionRegistrar.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyImportBeanDefinitionRegistrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;<br>        <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(User.class);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;user&quot;</span>, beanDefinition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-FactoryBean"><a href="#4-FactoryBean" class="headerlink" title="4. FactoryBean"></a>4. FactoryBean</h4><p>可用于自定义实例化逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;User&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> User.class;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserFactoryBean <span class="hljs-title function_">userFactoryBean</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserFactoryBean</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回的是User对象</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) applicationContext.getBean(<span class="hljs-string">&quot;userFactoryBean&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="Spring-Bean-Scope"><a href="#Spring-Bean-Scope" class="headerlink" title="Spring Bean Scope"></a>Spring Bean Scope</h3><ol><li><p>singleton：每个IOC容器仅有一个单实例，容器创建时创建Bean</p><p>使用 <code>@Lazy</code> 注解懒加载Bean，即获取时加载</p></li><li><p>prototype：每次请求产生一个新实例，请求时创建Bean</p></li><li><p>request：每次Http请求产生一个新实例</p></li><li><p>session：每次Http请求产生一个新的Bean，仅在当前Http Session内有效</p></li><li><p>application：类似标准HttpSession作用域</p></li></ol><h3 id="Spring-Bean-生命周期"><a href="#Spring-Bean-生命周期" class="headerlink" title="Spring Bean 生命周期"></a>Spring Bean 生命周期</h3><h4 id="Spring-Bean-生命周期流程"><a href="#Spring-Bean-生命周期流程" class="headerlink" title="Spring Bean 生命周期流程"></a>Spring Bean 生命周期流程</h4><ol><li>BeanPostProcessor Before Initialization</li><li>InitializingBean</li><li>init-method</li><li>BeanPostProcessor After Initialization</li><li>Disposable Bean</li><li>destory-method</li></ol><h4 id="Spring-Bean-创建流程"><a href="#Spring-Bean-创建流程" class="headerlink" title="Spring Bean 创建流程"></a>Spring Bean 创建流程</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">refresh<span class="hljs-literal">()</span>;<br>finish<span class="hljs-constructor">BeanFactoryInitialization(<span class="hljs-params">beanFactory</span>)</span>;<br>beanFactory.pre<span class="hljs-constructor">InstantiateSingletons()</span>;<br>get<span class="hljs-constructor">Bean(<span class="hljs-params">beanName</span>)</span>;<br><span class="hljs-keyword">do</span><span class="hljs-constructor">GetBean(<span class="hljs-params">name</span>, <span class="hljs-params">null</span>, <span class="hljs-params">null</span>, <span class="hljs-params">false</span>)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从缓存中检查是否有这个Bean</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">sharedInstance</span> <span class="hljs-operator">=</span> getSingleton(beanName);<br><span class="hljs-comment">// 如果没有，就实例化一个Bean</span><br><span class="hljs-keyword">if</span> (sharedInstance != <span class="hljs-literal">null</span> &amp;&amp; args == <span class="hljs-literal">null</span>) &#123;<br>    bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">mbd</span> <span class="hljs-operator">=</span> getMergedLocalBeanDefinition(beanName);<br>    <span class="hljs-comment">// 取得依赖的Bean，即创建当前Bean之前需要提前创建的Bean</span><br>    String[] dependsOn = mbd.getDependsOn();<br>    <span class="hljs-keyword">if</span> (dependsOn != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (String dep : dependsOn) &#123;<br>            registerDependentBean(dep, beanName);<br>            getBean(dep);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 创建Bean实例</span><br>    <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>        sharedInstance = getSingleton(beanName, () -&gt; createBean(beanName, mbd, args));<br>        bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> (T) bean;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">getSingleton(beanName, () -&gt; createBean(beanName, mbd, args));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 先从Map中拿</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">singletonObject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br><span class="hljs-comment">// 没有的话再创建</span><br>singletonObject = singletonFactory.getObject();<br><span class="hljs-comment">// 加到Map中</span><br>addSingleton(beanName, singletonObject);<br></code></pre></td></tr></table></figure><p> IOC容器之一：保存单实例Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">256</span>);<br></code></pre></td></tr></table></figure><p>BeanFactory：负责创建bean实例，容器里保存的所有单例Bean其实是一个map</p><p>ApplicationContext：BeanFactory的子接口，基于BeanFactory创建的对象之上完成容器的功能实现</p><p><img src="https://img-blog.csdnimg.cn/2020121916571615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Spring-Bean-生命周期回调"><a href="#Spring-Bean-生命周期回调" class="headerlink" title="Spring Bean 生命周期回调"></a>Spring Bean 生命周期回调</h4><blockquote><p>只有单实例Bean才会被容器管理，多实例Bean不会被容器管理</p></blockquote><p>调用顺序</p><ul><li>初始化：对象创建完成，并赋值好，调用初始化方法</li><li>销毁：容器关闭时</li></ul><p>控制 Bean 生命周期行为的三个选项：</p><ul><li>@PostConstruct 和@PreDestroy 注解（推荐）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoBean</span> &#123;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// init method</span><br>    &#125;<br><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// destory method</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>自定义 init() 和 destroy() 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实现InitializingBean和DisposableBean接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span>, DisposableBean &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// init method</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// destroy method</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>BeanPostProcessor：Bean的后置处理器</strong></p><p>Spring底层对BeanPostProcessor的使用：Bean赋值，组件的注入，生命周期注解</p><ul><li>postProcessBeforeInitialization：在初始化（例如 @PostConstruct）之前工作</li><li>postProcessAfterInitialization：在初始化之后工作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;postProcessBeforeInitialization&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;postProcessAfterInitialization&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Spring-Bean-属性赋值"><a href="#Spring-Bean-属性赋值" class="headerlink" title="Spring Bean 属性赋值"></a>Spring Bean 属性赋值</h3><p>@Value</p><ol><li>基本数值</li><li>SPEL表达式：#{}</li><li>取出配置文件的值：${}</li></ol><p>配合 <code>@PropertySource</code> 使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;user.nick.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String nickname;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>user.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user.nick.name</span>=<span class="hljs-string">keith</span><br></code></pre></td></tr></table></figure><h3 id="Spring-Bean-自动装配"><a href="#Spring-Bean-自动装配" class="headerlink" title="Spring Bean 自动装配"></a>Spring Bean 自动装配</h3><ol><li><p>@Autowired 根据类型注入，找不到再根据名称注入</p></li><li><p>@Qualifier 根据名称注入，@Primary 根据类型优先注入当前Bean</p></li><li><p>@Resource 根据名称注入，找不到再根据类型注入</p></li><li><p>构造方法注入：默认加载IOC容器中的组件，容器启动会调用无参构造器创建对象，再进行初始化赋值等操作</p></li></ol><p>后置处理器 <code>AutowiredAnnotationBeanPostProcessor</code> 用于解析自动装配</p><h3 id="Spring-Bean-Post-Processor"><a href="#Spring-Bean-Post-Processor" class="headerlink" title="Spring Bean Post Processor"></a>Spring Bean Post Processor</h3><ol><li><p>BeanPostPorcessor：Bean后置处理器，Bean创建对象初始化前后进行拦截工作</p></li><li><p>BeanFactoryPostProcessor：BeanFactory后置处理器，</p><p>BeanFactory标准初始化所有Bean定义已经保存到加载到BeanFactory，但是Bean实例还未创建</p><p>原理：IOC容器加载时调用 refresh() -&gt; invokeBeanFactoryPostProcessors()调用所有的Processor</p><p>实现 <code>BeanFactoryPostProcessor</code> 接口即可拿到容器的BeanFactory</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanFactoryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryPostProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;My Bean Factory&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>BeanDefinitionRegistry：在所有Bean将要被加载，而Bean实例还未创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanDefinitionRegistryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanDefinitionRegistryPostProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">// 该方法后执行</span><br>        System.out.println(<span class="hljs-string">&quot;My Registry&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">// 该方法先执行</span><br>        System.out.println(<span class="hljs-string">&quot;My Factory&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-Profile"><a href="#Spring-Profile" class="headerlink" title="Spring Profile"></a>Spring Profile</h2><p>指定组件在哪个环境的情况下才能注册到容器中，不指定任何环境都能注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Profile(&quot;test&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">userTest</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;This is test environment&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Profile(&quot;prod&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">userProd</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;This is prod environment&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 properties 配置文件中可以根据文件名配置不同的环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">application</span>.properties<br><span class="hljs-built_in">application</span>-dev.properties<br><span class="hljs-built_in">application</span>-test.properties<br></code></pre></td></tr></table></figure><p>在 yml 配置文件中可以使用 <code>---</code> 分隔配置不同的环境</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8002</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><p>在 VM options 中加入以下参数表示目前的环境为 test</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">-Dspring.profiles.active</span>=<span class="hljs-string">test</span><br><span class="hljs-comment">## 使用java -jar启动</span><br><span class="hljs-attr">java</span> <span class="hljs-string">-jar -Dspring.profiles.active=test app.jar </span><br></code></pre></td></tr></table></figure><p>在 Environment variables 中加入以下参数表示目前环境为 test</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">--spring.profiles.active</span>=<span class="hljs-string">test</span><br><span class="hljs-comment">## 使用java -jar启动</span><br><span class="hljs-attr">java</span> <span class="hljs-string">-jar app.jar --spring.profiles.active=test</span><br></code></pre></td></tr></table></figure><p>加载配置文件关键源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Spring 启动时 run 方法中准备环境</span><br><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, applicationArguments);<br><span class="hljs-comment">// 进入之后调用了ConfigFileApplicationListener.Loader#load</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPropertySources</span><span class="hljs-params">(ConfigurableEnvironment environment, ResourceLoader resourceLoader)</span> &#123;<br>    RandomValuePropertySource.addToEnvironment(environment);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Loader</span>(environment, resourceLoader).load();<br>&#125;<br><span class="hljs-comment">// 追溯到 ConfigFileApplicationListener#loadForFileExtension 根据文件后缀遍历加载</span><br><span class="hljs-keyword">for</span> (PropertySourceLoader loader : <span class="hljs-built_in">this</span>.propertySourceLoaders) &#123;<br>    <span class="hljs-keyword">for</span> (String fileExtension : loader.getFileExtensions()) &#123;<br>        <span class="hljs-keyword">if</span> (processed.add(fileExtension)) &#123;<br>            loadForFileExtension(loader, location + name, <span class="hljs-string">&quot;.&quot;</span> + fileExtension, profile, filterFactory,<br>                                 consumer);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于 yml 和 properties 文件的解释</p><p><a href="https://blog.csdn.net/weixin_42103026/article/details/112846171">https://blog.csdn.net/weixin_42103026/article/details/112846171</a></p><h2 id="Spring-事件监听器"><a href="#Spring-事件监听器" class="headerlink" title="Spring 事件监听器"></a>Spring 事件监听器</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>ApplicationListener：监听容器中的事件，事件驱动模型开发。</p><ol><li><p>写一个监听器（实现 <code>ApplicationListener</code>）来监听某个事件（ <code>ApplicationEvent</code> 及其子类）</p></li><li><p>将监听器加入容器中</p></li><li><p>只要容器中有相关事件发布，我们就能监听到这个事件</p><p>例：ContextRefreshedEvent：容器刷新完成（所有Bean都完全创建）会发布这个事件</p></li><li><p>发布一个事件 applicationContext.publishEvent()</p></li></ol><p><strong>实现 <code>ApplicationListener</code> 接口实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 事件对象 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ApplicationEvent</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyApplicationEvent</span><span class="hljs-params">(Object source)</span> &#123;<br>        <span class="hljs-built_in">super</span>(source);<br>        System.out.println(<span class="hljs-string">&quot;发送事件:&quot;</span> + <span class="hljs-built_in">super</span>.getTimestamp());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 事件监听器 */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;MyApplicationEvent&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当容器中发布事件 MyApplicationEvent 以后，方法触发</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(MyApplicationEvent event)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;接收事件:&quot;</span> + event.getTimestamp());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 发布事件 */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringDemoApplicationTests</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        applicationContext.publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyApplicationEvent</span>(<span class="hljs-built_in">this</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用注解 <code>@EventListener</code> 实现</strong></p><p>可以使用该注解实现与上面 <code>MyApplicationListener</code> 一样的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br><br>    <span class="hljs-meta">@EventListener</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(MyApplicationEvent event)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收事件:&quot;</span> + event.getTimestamp());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><blockquote><p>Observer模式，优势在于发布一个事件后可以有多个监听器对其作出反应，对其进行处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.发布事件</span><br>applicationContext.publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyApplicationEvent</span>(<span class="hljs-built_in">this</span>));<br><span class="hljs-comment">// 2.广播这个事件</span><br>getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);<br><span class="hljs-comment">// 3.获取线程池，后续如果有线程池则异步执行，如果没有则同步执行</span><br><span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> getTaskExecutor();<br><span class="hljs-comment">// 4.根据事件和事件类型获取Listeners</span><br>getApplicationListeners(event, type);<br><span class="hljs-comment">// 4.1.cacheKey = 事件类型+事件源类型</span><br><span class="hljs-type">ListenerCacheKey</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListenerCacheKey</span>(eventType, sourceType);<br><span class="hljs-comment">// 4.2.通过cacheKey查retrieverCache</span><br><span class="hljs-type">CachedListenerRetriever</span> <span class="hljs-variable">existingRetriever</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.retrieverCache.get(cacheKey);<br><span class="hljs-comment">// 4.2.1.如果查不到CachedListenerRetriever则就新建并填充，然后put到retrieverCache</span><br><span class="hljs-type">CachedListenerRetriever</span> <span class="hljs-variable">newRetriever</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CachedListenerRetriever</span>();<br>retriever.applicationListeners = filteredListeners;<br>retriever.applicationListenerBeans = filteredListenerBeans;<br><span class="hljs-comment">// 4.3.最终返回符合条件的Listeners</span><br><span class="hljs-keyword">return</span> retrieveApplicationListeners(eventType, sourceType, newRetriever);<br><span class="hljs-comment">// 5.遍历这些Listeners，调用每个Listener</span><br><span class="hljs-keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type))<br></code></pre></td></tr></table></figure><h2 id="Spring-循环依赖"><a href="#Spring-循环依赖" class="headerlink" title="Spring 循环依赖"></a>Spring 循环依赖</h2><p>循环依赖异常：BeanCurrentlyInCreationException</p><p>循环依赖指的是 默认的单例Bean中，属性互相引用的场景。在Spring中如果使用构造方法注入，或是实例化Bean的时候指定Scope为prototype等情况，就会可能出现循环依赖的问题。</p><p>Spring容器内部是通过3级缓存来解决循环依赖 – <code>DefaultSingletonBeanRegistry</code></p><p>一级缓存（singletonObjects）：存放已经经历了完整生命周期的Bean对象</p><p>二级缓存（earlySingtonObjects）：存放早期暴露出来的Bean对象（Bean的属性还未赋值）</p><p>三级缓存（singletonFacoties）：存放可以生成Bean的工厂</p><p>只有单例的Bean会通过三级缓存提前暴露来解决循环依赖的问题，而非单例的Bean，每次从容器中获取的都是一个新的对象，都会重新创建，所有非单例的Bean是没有缓存的，不会将其放到三级缓存中。</p><p>过程：</p><ol><li>A创建的过程中需要B，于是A将自己放到三级缓存里面，去实例化B</li><li>B实例化的时候发现需要A，于是B先查一级缓存，没有再查二级缓存，还是没有再查三级缓存，找到A然后把三级缓存里面的A放到二级缓存里面，并删除三级缓存里的A</li><li>B顺利初始化完毕，将自己放到一级缓存里面（此时B里面的A依然是创建中状态），然后回来接着创建A，此时B已经创建结束，直接从一级缓存里面拿到B，然后完成创建，并将A自己放到一级缓存里面。</li></ol><p>总结：Spring解决循环依赖依靠的是Bean的”中间态”的概念，”中间态”指的是已经实例化但还没初始化的状态。</p><p><strong>源码说明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSingleton</span><span class="hljs-params">(String beanName, Object singletonObject)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.singletonObjects) &#123;<br>        <span class="hljs-comment">// 加入到单例缓存池中</span><br>        <span class="hljs-built_in">this</span>.singletonObjects.put(beanName, singletonObject);<br>        <span class="hljs-comment">// 从三级缓存中移除（针对不处理循环依赖的Bean）</span><br>        <span class="hljs-built_in">this</span>.singletonFactories.remove(beanName);<br>        <span class="hljs-comment">// 从二级缓存中移除（针对循环依赖的Bean）</span><br>        <span class="hljs-built_in">this</span>.earlySingletonObjects.remove(beanName);<br>        <span class="hljs-comment">// 用来记录已经处理的Bean</span><br>        <span class="hljs-built_in">this</span>.registeredSingletons.add(beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-IOC-附录"><a href="#Spring-IOC-附录" class="headerlink" title="Spring IOC 附录"></a>Spring IOC 附录</h2><p><strong>@Conditional：根据条件加载Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Conditional(MyCondition.class)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;<br>        <span class="hljs-comment">// 做一些判断逻辑，true表示加载bean，false表示不加载bean</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@DependsOn</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建B时会先去创建A</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@DependsOn(&quot;a&quot;)</span><br><span class="hljs-keyword">public</span> B <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Filter和Interceptor的区别</strong></p><ul><li>Filter是基于函数回调的，而Interceptor则是基于Java反射的。</li><li>Filter依赖于Servlet容器，而Interceptor不依赖于Servlet容器。</li><li>Filter对几乎所有的请求起作用，而Interceptor只能对action请求起作用。</li><li>Interceptor可以访问Action的上下文，值栈里的对象，而Filter不能。</li><li>在action的生命周期里，Interceptor可以被多次调用，而Filter只能在容器初始化时调用一次，</li></ul><p><strong>Filter生命周期方法</strong></p><ol><li>init : 服务器启动后创建Filter对象，然后调用init方法，只执行一次</li><li>doFilter : 每一次请求被拦截资源时，会执行，执行多次</li><li>destroy : 在服务器关闭后，Filter对象被销毁，若服务器正常关闭会执行destroy方法用于释放资源</li></ol><p>配置拦截路径 <code>@WebFilter(&quot;/*&quot;)</code></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud 配置中心</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringCloud%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringCloud%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-配置中心"><a href="#Spring-Cloud-配置中心" class="headerlink" title="Spring Cloud 配置中心"></a>Spring Cloud 配置中心</h1><h2 id="Spring-Cloud-Config-Center"><a href="#Spring-Cloud-Config-Center" class="headerlink" title="Spring Cloud Config Center"></a>Spring Cloud Config Center</h2><ol><li>新建一个Git配置仓库，配置文件命名规则如下</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-title class_">/</span><span class="hljs-punctuation">&#123;</span>application<span class="hljs-punctuation">&#125;</span>/<span class="hljs-punctuation">&#123;</span>profile<span class="hljs-punctuation">&#125;</span>[/<span class="hljs-punctuation">&#123;</span>label<span class="hljs-punctuation">&#125;</span>]<br><span class="hljs-title class_">/</span><span class="hljs-punctuation">&#123;</span>application<span class="hljs-punctuation">&#125;</span>-<span class="hljs-punctuation">&#123;</span>profile<span class="hljs-punctuation">&#125;</span>.yml<br><span class="hljs-title class_">/</span><span class="hljs-punctuation">&#123;</span>label<span class="hljs-punctuation">&#125;</span>/<span class="hljs-punctuation">&#123;</span>application<span class="hljs-punctuation">&#125;</span>-<span class="hljs-punctuation">&#123;</span>profile<span class="hljs-punctuation">&#125;</span>.yml<br><span class="hljs-title class_">/</span><span class="hljs-punctuation">&#123;</span>application<span class="hljs-punctuation">&#125;</span>-<span class="hljs-punctuation">&#123;</span>profile<span class="hljs-punctuation">&#125;</span>.properties<br><span class="hljs-title class_">/</span><span class="hljs-punctuation">&#123;</span>label<span class="hljs-punctuation">&#125;</span>/<span class="hljs-punctuation">&#123;</span>application<span class="hljs-punctuation">&#125;</span>-<span class="hljs-punctuation">&#123;</span>profile<span class="hljs-punctuation">&#125;</span>.properties<br></code></pre></td></tr></table></figure><ol start="2"><li>基本依赖和配置 pom</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Cloud Eureka --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring Cloud Config Server --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring Boot Actuator --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">5100</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">config-center</span><br><span class="hljs-attr">spring.cloud.config.server.git.uri</span>=<span class="hljs-string">https://&lt;your-repository&gt;.git</span><br><span class="hljs-attr">spring.cloud.config.label</span>=<span class="hljs-string">master</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://eureka1.com:5000/eureka</span><br></code></pre></td></tr></table></figure><ol start="3"><li>启动类增加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigServer</span><br></code></pre></td></tr></table></figure><ol start="4"><li>访问以下地址可以得到具体配置</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&#123; 配置中心服务地址 &#125;<span class="hljs-regexp">/master/</span><span class="hljs-keyword">file</span>-dev.yml <br></code></pre></td></tr></table></figure><ol start="5"><li>客户端配置 pom</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Cloud Config Client --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件 <code>bootstrap.properties</code></p><p>读取配置中心的master分支的配置文件 <code>sardine-file-dev.yml</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">sardine-file</span><br><span class="hljs-attr">spring.cloud.config.uri</span>=<span class="hljs-string">http://127.0.0.1:5100/</span><br><span class="hljs-attr">spring.cloud.config.profile</span>=<span class="hljs-string">dev</span><br><span class="hljs-attr">spring.cloud.config.label</span>=<span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><ol start="6"><li><p>热更新</p><p>6.1 手动配置热更新</p><ol><li>开启 actuator 中的 refresh 端点</li><li>Controller 中添加 @RefreshScope 注解</li><li>向客户端 <code>http://localhost:5005/actuator/refresh</code> 发送 Post 请求</li></ol><p>6.2 自动热更新</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Cloud Bus Amqp --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.rabbitmq.host</span>=<span class="hljs-string">localhost</span><br><span class="hljs-attr">spring.rabbitmq.port</span>=<span class="hljs-string">5672</span><br><span class="hljs-attr">spring.rabbitmq.username</span>=<span class="hljs-string">admin</span><br><span class="hljs-attr">spring.rabbitmq.password</span>=<span class="hljs-string">admin</span><br></code></pre></td></tr></table></figure><p>向配置中心发送 Post 请求</p><p><code>http://localhost:5100/actuator/bus-refresh</code> </p><h2 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h2><h2 id="Apollo"><a href="#Apollo" class="headerlink" title="Apollo"></a>Apollo</h2><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud 链路追踪</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringCloud%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringCloud%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-链路追踪"><a href="#Spring-Cloud-链路追踪" class="headerlink" title="Spring Cloud 链路追踪"></a>Spring Cloud 链路追踪</h1><p>如果能跟踪每个请求，中间请求经过哪些微服务，请求耗时，网络延迟，业务逻辑耗时等。我们就能更好地分析系统瓶颈、解决系统问题。</p><p>链路追踪目的：解决错综复杂的服务调用中链路的查看。排查慢服务。</p><p>市面上链路追踪产品大部分都是基于google的Dapper论文</p><p>zipkin,twitter：开源的，是严格按照谷歌的Dapper论文来的</p><p>pinpoint：韩国的 Naver 公司的</p><p>Cat：美团点评</p><p>EagleEye：淘宝</p><h2 id="链路追踪要考虑的几个问题"><a href="#链路追踪要考虑的几个问题" class="headerlink" title="链路追踪要考虑的几个问题"></a>链路追踪要考虑的几个问题</h2><ol><li>探针的性能消耗，尽量不影响服务本身。</li><li>易用，开发可以很快接入，别浪费太多精力。</li><li>数据分析，要实时分析，维度足够。</li></ol><h2 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h2><blockquote><p>Sleuth 是 Spring Cloud 的分布式跟踪解决方案</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p>span：基本工作单元，一次链路调用，创建一个span</p><p>span 用一个64位 ID 唯一标识。包括：ID，描述，时间戳事件，spanId，span父id</p><p>span 被启动和停止时，记录了时间信息，初始化span叫：root span，它的 span id 和 trace id 相等</p></li><li><p>trace：一组共享 <code>root span</code> 的 span 组成的树状结构称为 trace</p><p>trace 也有一个64位 ID，trace 中所有 span 共享一个 trace id，类似于一颗 span 树。</p></li><li><p>annotation：用来记录事件的存在，核心annotation用来定义请求的开始和结束。</p><ol><li><p>CS：Client Send，客户端发起请求，客户端发起请求描述了span开始。</p></li><li><p>SR：Server Received，服务端接到请求，服务端获得请求并准备处理它，SR-CS&#x3D;网络延迟。</p></li><li><p>SS：Server Send，服务器端处理完成，并将结果发送给客户端，表示服务器完成请求处理，响应客户端时，SS-SR&#x3D;服务器处理请求的时间。</p></li><li><p>CR：Client Received，客户端接受服务端信息，span结束的标识，客户端接收到服务器的响应，CR-CS&#x3D;客户端发出请求到服务器响应的总时间。</p></li></ol></li></ol><p>其实数据结构是一颗树，从root span 开始。</p><h3 id="Sleuth-使用"><a href="#Sleuth-使用" class="headerlink" title="Sleuth 使用"></a>Sleuth 使用</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入sleuth依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请求日志</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-params">---</span> 发起调用方 <span class="hljs-params">---</span><br>[api-driver,1a409c98e7a3cdbf,1a409c98e7a3cdbf,<span class="hljs-literal">true</span>] <br><br><span class="hljs-params">---</span> 接收调用方 <span class="hljs-params">---</span><br>[service-sms,1a409c98e7a3cdbf,b3d93470b5cf8434,<span class="hljs-literal">true</span>]<br><br><span class="hljs-params">---</span> 参数解释 <span class="hljs-params">---</span><br>[服务名称，traceId（一条请求调用链中 唯一ID），spanID（基本的工作单元，获取数据等），是否让zipkin收集和展示此信息]<br></code></pre></td></tr></table></figure><h2 id="Spring-Cloud-Zipkin"><a href="#Spring-Cloud-Zipkin" class="headerlink" title="Spring Cloud Zipkin"></a>Spring Cloud Zipkin</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>zipkin是twitter开源的分布式跟踪系统。</p><p>原理收集系统的时序数据，从而追踪微服务架构中系统延时等问题，还有一个友好的界面。</p><p>ZipKin的组成：Collector、Storage、Restful Api、Web UI</p><p>Sleuth 收集跟踪信息通过 http 请求发送给 Zipkin Server，Zipkin 将跟踪信息存储，以及提供RESTful API接口，Zipkin UI 通过调用 Api进行数据展示。默认内存存储，可以用mysql，ES等存储。</p><h3 id="ZipKin-使用"><a href="#ZipKin-使用" class="headerlink" title="ZipKin 使用"></a>ZipKin 使用</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- zipkin --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">zipkin:</span><br>    <span class="hljs-attr">base-url:</span> <span class="hljs-string">http://localhost:9411/</span><br>  <span class="hljs-attr">sleuth:</span><br>    <span class="hljs-attr">sampler:</span><br>      <span class="hljs-attr">rate:</span> <span class="hljs-number">1</span>  <span class="hljs-comment">#采样比例1</span><br></code></pre></td></tr></table></figure><p>下载启动 ZipKin</p><p><a href="https://zipkin.io/pages/quickstart.html">https://zipkin.io/pages/quickstart.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -sSL https://zipkin.io/quickstart.sh | bash -s<br>java -jar zipkin.jar<br></code></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:9411/">http://localhost:9411/</a></p><p><img src="https://img-blog.csdnimg.cn/20210208165821768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud 服务调用</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringCloud%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringCloud%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-服务调用"><a href="#Spring-Cloud-服务调用" class="headerlink" title="Spring Cloud 服务调用"></a>Spring Cloud 服务调用</h1><h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><blockquote><p>springframework:spring-web 包下</p></blockquote><p>使用 RestTemplate 需要将其加入到容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestTemplateConfigurer</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">restTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-直接调用"><a href="#1-直接调用" class="headerlink" title="1. 直接调用"></a>1. 直接调用</h3><p>实体类</p><p>服务端和客户端的实体类可以不是同一个，如果客户端实体类使用@Builder接收会失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cookbook</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> String bookName;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;consumer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;get&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8001/provider/hello?name=&#123;1&#125;&quot;</span>;<br>        ResponseEntity&lt;String&gt; helloResponse = restTemplate.getForEntity(url, String.class, name);<br>        System.out.println(<span class="hljs-string">&quot;Hello: &quot;</span> + helloResponse.getBody());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8001/provider/cookbook?name=&#123;1&#125;&quot;</span>;<br>        ResponseEntity&lt;Cookbook&gt; cookBookResponse = restTemplate.getForEntity(url2, Cookbook.class, name);<br>        System.out.println(<span class="hljs-string">&quot;CookBook: &quot;</span> + cookBookResponse.getBody());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8001/provider/list/cookbook&quot;</span>;<br>        List&lt;Cookbook&gt; list = restTemplate.getForObject(url3, List.class);<br>        System.out.println(<span class="hljs-string">&quot;CookBook List: &quot;</span> + list);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8001/provider/cookbook&quot;</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        ResponseEntity&lt;Cookbook&gt; postCookbook = restTemplate.postForEntity(url4, student, Cookbook.class);<br>        System.out.println(<span class="hljs-string">&quot;Post CookBook: &quot;</span> + postCookbook.getBody());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProviderController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;cookbook&quot;)</span><br>    <span class="hljs-keyword">public</span> Cookbook <span class="hljs-title function_">cookbook</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> Cookbook.builder().id(<span class="hljs-number">1L</span>).bookName(name).build();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;list/cookbook&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Cookbook&gt; <span class="hljs-title function_">listCookbook</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Cookbook&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(Cookbook.builder().id(<span class="hljs-number">1L</span>).bookName(<span class="hljs-string">&quot;盐酥鸡&quot;</span>).build());<br>        list.add(Cookbook.builder().id(<span class="hljs-number">2L</span>).bookName(<span class="hljs-string">&quot;酱鸭&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;cookbook&quot;)</span><br>    <span class="hljs-keyword">public</span> Cookbook <span class="hljs-title function_">postCookbook</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Student student)</span>&#123;<br>        <span class="hljs-keyword">return</span> Cookbook.builder().bookName(student.getName()).build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-注册到同一个-eureka"><a href="#2-注册到同一个-eureka" class="headerlink" title="2. 注册到同一个 eureka"></a>2. 注册到同一个 eureka</h3><p>消费端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;consumer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br>    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">//拿到服务提供商</span><br>        List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="hljs-string">&quot;sardine-cookbook&quot;</span>);<br>        <span class="hljs-comment">//拿到第一个实例</span><br>        <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//得到主机号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> instance.getHost();<br>        <span class="hljs-comment">//得到端口号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> instance.getPort();<br>        <span class="hljs-comment">//拼接完整的请求url</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://&quot;</span> + host + <span class="hljs-string">&quot;:&quot;</span> + port + <span class="hljs-string">&quot;/test/hello?name=&#123;1&#125;&quot;</span>;<br>        <span class="hljs-comment">//restTemple 实际返回的是一个ResponseEntity 的实例</span><br>        ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(url, String.class, name);<br>        System.out.println(responseEntity.getBody());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProviderController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-客户端拦截器"><a href="#3-客户端拦截器" class="headerlink" title="3. 客户端拦截器"></a>3. 客户端拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingClientHttpRequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClientHttpRequestInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title function_">intercept</span><span class="hljs-params">(HttpRequest request, <span class="hljs-type">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了拦截器&quot;</span>);<br>        System.out.println(request.getURI());<br>        <span class="hljs-type">ClientHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> execution.execute(request, body);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 restTemplate 配置中增加拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestTemplateConfigurer</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>        restTemplate.getInterceptors().add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingClientHttpRequestInterceptor</span>());<br>        <span class="hljs-keyword">return</span> restTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><blockquote><p>客户端的负载均衡</p></blockquote><p>Ribbon是Netflix开发的客户端负载均衡器，为Ribbon配置<strong>服务提供者地址列表</strong>后，Ribbon就可以基于某种<strong>负载均衡策略算法</strong>，自动地帮助服务消费者去请求提供者。Ribbon默认为我们提供了很多负载均衡算法，例如轮询、随机等。我们也可以实现自定义负载均衡算法。</p><h3 id="1-负载均衡算法"><a href="#1-负载均衡算法" class="headerlink" title="1. 负载均衡算法"></a>1. 负载均衡算法</h3><ul><li><p><strong>ZoneAvoidanceRule（默认）：区域权衡策略</strong></p><p>复合判断Server所在区域的性能和Server的可用性，轮询选择服务器。</p></li><li><p><strong>BestAvailableRule：最低并发策略</strong></p><p>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。逐个找服务，如果断路器打开，则忽略。</p></li><li><p><strong>RoundRobinRule：轮询策略</strong></p><p>以简单轮询选择一个服务器，按顺序循环选择一个server。</p></li><li><p><strong>RandomRule：随机策略</strong></p><p>随机选择一个服务器。</p></li><li><p><strong>AvailabilityFilteringRule：可用过滤策略</strong></p><p>会先过滤掉多次访问故障而处于断路器跳闸状态的服务和过滤并发的连接数量超过阀值得服务，然后对剩余的服务列表安装轮询策略进行访问</p></li><li><p><strong>WeightedResponseTimeRule：响应时间加权策略</strong></p><p>据平均响应时间计算所有的服务的权重，响应时间越快服务权重越大，容易被选中的概率就越高。刚启动时，如果统计信息不中，则使用RoundRobinRule(轮询)策略，等统计的信息足够了会自动的切换到WeightedResponseTimeRule。响应时间长，权重低，被选择的概率低。反之，同样道理。此策略综合了各种因素（网络，磁盘，IO等），这些因素直接影响响应时间。</p></li><li><p><strong>RetryRule：重试策略</strong></p><p>先按照RoundRobinRule(轮询)的策略获取服务，如果获取的服务失败则在指定的时间会进行重试，进行获取可用的服务。如多次获取某个服务失败，就不会再次获取该服务。主要是在一个时间段内，如果选择一个服务不成功，就继续找可用的服务，直到超时。</p></li></ul><p>开启负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br>RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>切换策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">myRule</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//return new RoundRobinRule();</span><br>    <span class="hljs-comment">//return new RandomRule();</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RetryRule</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>消费端：注意要使用应用名替代域名，且要在同一个注册中心，否则会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;balance&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">balance</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://sardine-cookbook/provider/balance&quot;</span>;<br>    ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(url, String.class);<br>    System.out.println(response.getBody());<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;balance&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">balance</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 请求连接的超时时间</span><br><span class="hljs-attr">ribbon.ConnectTimeout</span>=<span class="hljs-string">2000</span><br><span class="hljs-comment"># 请求处理的超时时间</span><br><span class="hljs-attr">ribbon.ReadTimeout</span>=<span class="hljs-string">5000</span><br><span class="hljs-comment"># 也可以为每个Ribbon客户端设置不同的超时时间, 通过服务名称进行指定：</span><br><span class="hljs-attr">ribbon-config-demo.ribbon.ConnectTimeout</span>=<span class="hljs-string">2000</span><br><span class="hljs-attr">ribbon-config-demo.ribbon.ReadTimeout</span>=<span class="hljs-string">5000</span><br><span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">ribbon.MaxTotalConnections</span>=<span class="hljs-string">500</span><br><span class="hljs-comment"># 每个host最大连接数</span><br><span class="hljs-attr">ribbon.MaxConnectionsPerHost</span>=<span class="hljs-string">500</span><br></code></pre></td></tr></table></figure><p><strong>ribbon脱离eureka配置</strong></p><p>可以在配置文件中使用listOfServers字段来设置服务端地址，只要客户端拥有服务器列表，就可以使用ribbon做负载均衡。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">ribbon.eureka.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">ribbon.listOfServers</span>=<span class="hljs-string">localhost:8001,localhost:8002</span><br></code></pre></td></tr></table></figure><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><blockquote><p>声明式、模板化的HTTP请求客户端</p></blockquote><p>主要构建微服务消费端。只要使用OpenFeign提供的注解修饰定义网络请求的接口类，就可以使用该接口的实例发送 Restful 的网络请求。还可以集成Ribbon和Hystrix，提供负载均衡和断路器。</p><p><strong>实现</strong></p><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>服务端暴露接口到 <code>sardine-user-api</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;sardine-user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;identify&quot;)</span><br>    CommonResult&lt;UserDto&gt; <span class="hljs-title function_">identify</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String token)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;identify&quot;)</span><br><span class="hljs-keyword">public</span> CommonResult&lt;UserDto&gt; <span class="hljs-title function_">identify</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;token&quot;, required = false)</span> String token)</span> &#123;<br>    <span class="hljs-type">UserDto</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-keyword">return</span> CommonResult.success(userInfo);<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端引入 api 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- user api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sardine<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sardine-user-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动类加上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span><br></code></pre></td></tr></table></figure><p>客户端使用 UserClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserClient userClient;<br><br><span class="hljs-meta">@GetMapping(&quot;call&quot;)</span><br><span class="hljs-keyword">public</span> CommonResult&lt;UserDto&gt; <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> userClient.identify(token).getData();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><blockquote><p>容错组件 实现了超时机制和断路器模式</p></blockquote><h3 id="1-主要功能"><a href="#1-主要功能" class="headerlink" title="1. 主要功能"></a>1. 主要功能</h3><ol><li>为系统提供保护机制。在依赖的服务出现高延迟或失败时，为系统提供保护和控制。</li><li>防止雪崩。</li><li>包裹请求：使用HystrixCommand（或HystrixObservableCommand）包裹对依赖的调用逻辑，每个命令在独立线程中运行。</li><li>跳闸机制：当某服务失败率达到一定的阈值时，Hystrix可以自动跳闸，停止请求该服务一段时间。</li><li>资源隔离：Hystrix为每个请求都的依赖都维护了一个小型线程池，如果该线程池已满，发往该依赖的请求就被立即拒绝，而不是排队等候，从而加速失败判定。防止级联失败。</li><li>快速失败：Fail Fast。同时能快速恢复。侧重点是：（不去真正的请求服务，发生异常再返回），而是直接失败。</li><li>监控：Hystrix可以实时监控运行指标和配置的变化，提供近实时的监控、报警、运维控制。</li><li>回退机制：fallback，当请求失败、超时、被拒绝，或当断路器被打开时，执行回退逻辑。回退逻辑我们自定义，提供优雅的服务降级。</li><li>自我修复：断路器打开一段时间后，会自动进入“半开”状态，可以进行打开，关闭，半开状态的转换。前面有介绍。</li></ol><h3 id="2-独立使用"><a href="#2-独立使用" class="headerlink" title="2. 独立使用"></a>2. 独立使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HystrixTestService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HystrixCommand</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">HystrixTestService</span><span class="hljs-params">(HystrixCommandGroupKey group)</span> &#123;<br>        <span class="hljs-built_in">super</span>(group);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行逻辑&quot;</span>);<br>        <span class="hljs-comment">// 当执行 1/0 后抛出异常会执行 Fallback 逻辑，否则执行正常逻辑</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getFallback</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Fallback Function&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Future&lt;String&gt; futureResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HystrixTestService</span>(HystrixCommandGroupKey.Factory.asKey(<span class="hljs-string">&quot;ext&quot;</span>)).queue();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> futureResult.get();<br>            System.out.println(<span class="hljs-string">&quot;程序结果：&quot;</span>+result);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-整合-RestTemplate"><a href="#3-整合-RestTemplate" class="headerlink" title="3. 整合 RestTemplate"></a>3. 整合 RestTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启动类增加注解 @EnableCircuitBreaker</span><br><span class="hljs-meta">@EnableCircuitBreaker</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(UserApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">alive</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 自动处理URL</span><br><span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;http://user-provider/User/alive&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url, String.class);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">fallback</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Fallback Function&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-整合-Fegin"><a href="#4-整合-Fegin" class="headerlink" title="4. 整合 Fegin"></a>4. 整合 Fegin</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置开启 Hystrix</span><br><span class="hljs-attr">feign.hystrix.enabled</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;user-provider&quot;,fallback = AliveBack.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsumerApi</span> &#123;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/user/alive&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">alive</span><span class="hljs-params">()</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/user/getById&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliveBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConsumerApi</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">alive</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;call exception&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-Hystrix-Dashboard"><a href="#5-Hystrix-Dashboard" class="headerlink" title="5. Hystrix Dashboard"></a>5. Hystrix Dashboard</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Boot Actuator --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <br><span class="hljs-comment">&lt;!-- Spring Cloud Hystrix Dashboard --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 启动类增加注解</span><br><span class="hljs-meta">@EnableHystrixDashboard</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 增加配置</span><br><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-attr">hystrix.dashboard.proxy-stream-allow-list</span>=<span class="hljs-string">*</span><br></code></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8001/actuator/hystrix.stream">http://localhost:8001/actuator/hystrix.stream</a> 查看请求信息</p><p>访问 <a href="http://localhost:8001/hystrix">http://localhost:8001/hystrix</a> 输入上面的url可以可视化地观察请求信息</p><h3 id="6-隔离策略"><a href="#6-隔离策略" class="headerlink" title="6. 隔离策略"></a>6. 隔离策略</h3><p>隔离策略：信号量、线程池，默认使用线程池</p><p><strong>线程池隔离</strong></p><p>概念：有1000个商品服务信息的并发请求，但是商品服务线程池中只有10个线程，那么最多只会用这10个线程去处理，不会将Tomcat中的所有线程都耗尽。</p><p>适用场景：耗时长的请求</p><p><strong>信号量隔离</strong></p><p>概念：每次请求通过计数信号进行限制，当信号大于请求数时，调用Fallback接口快速返回。获取到信号的线程继续访问，访问完成后归还信号，信号获取失败直接Fallback。</p><p>适用场景：耗时短的请求</p><table><thead><tr><th align="left">隔离方式</th><th align="left">是否支持超时</th><th align="left">是否支持熔断</th><th align="left">隔离原理</th><th align="left">是否是异步调用</th><th align="left">资源消耗</th></tr></thead><tbody><tr><td align="left">线程池隔离</td><td align="left">支持,可直接返回</td><td align="left">支持,当线程池到达maxSize后,再请求会触发fallback接口进行熔断</td><td align="left">每个服务单独用线程池</td><td align="left">可以是异步,也可以是同步。看调用的方法</td><td align="left">大,大量线程的上下文切换，容易造成机器负载高</td></tr><tr><td align="left">信号量隔离</td><td align="left">不支持,如果阻塞，只能通过调用协议（如:socket超时才能返回）</td><td align="left">支持，当信号量达到maxConcurrentRequests后。再请求会触发fallback</td><td align="left">通过信号量的计数器</td><td align="left">同步调用,不支持异步</td><td align="left">小,只是个计数器</td></tr></tbody></table><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 修改隔离策略为信号量</span><br><span class="hljs-attr">hystrix.command.default.execution.isolation.strategy</span>=<span class="hljs-string">SEMAPHORE</span><br></code></pre></td></tr></table></figure><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RC2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SardineAlibabaSamplesApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        initSentinelRules();<br>        SpringApplication.run(SardineAlibabaSamplesApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initSentinelRules</span><span class="hljs-params">()</span>&#123;<br>        List&lt;FlowRule&gt; rules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">FlowRule</span> <span class="hljs-variable">rule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowRule</span>();<br>        rule.setResource(<span class="hljs-string">&quot;resource&quot;</span>);<br>        <span class="hljs-comment">// set limit qps to 2</span><br>        rule.setCount(<span class="hljs-number">2</span>);<br>        rule.setGrade(RuleConstant.FLOW_GRADE_QPS);<br>        rule.setLimitApp(<span class="hljs-string">&quot;default&quot;</span>);<br>        rules.add(rule);<br>        FlowRuleManager.loadRules(rules);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>   <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span><br>   <span class="hljs-meta">@SentinelResource(value = &quot;resource&quot;, blockHandler = &quot;fallback&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fallback</span><span class="hljs-params">(BlockException e)</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;降级了&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用 hello 接口，若qps大于2的时候会执行降级方法。</p><h3 id="整合-Sentinel-Dashboard"><a href="#整合-Sentinel-Dashboard" class="headerlink" title="整合 Sentinel Dashboard"></a>整合 Sentinel Dashboard</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/Dashboard">https://github.com/alibaba/Sentinel/wiki/Dashboard</a></p><p>启动 Sentinel Dashboard，登录控制台，默认账号密码都是 sentinel</p><p><strong>在服务中增加以下配置以注册到Dashboard</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8000</span><br><span class="hljs-attr">spring.cloud.sentinel.transport.dashboard</span>=<span class="hljs-string">localhost:8080</span><br><span class="hljs-comment"># 服务启动后就注册到 Dashboard</span><br><span class="hljs-attr">spring.cloud.sentinel.eager</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">stn</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210211094241995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>新增一条流控规则</p><p><img src="https://img-blog.csdnimg.cn/20210211095141129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud 注册中心</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringCloud%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringCloud%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-注册中心"><a href="#Spring-Cloud-注册中心" class="headerlink" title="Spring Cloud 注册中心"></a>Spring Cloud 注册中心</h1><h2 id="注册中心和微服务的关系"><a href="#注册中心和微服务的关系" class="headerlink" title="注册中心和微服务的关系"></a>注册中心和微服务的关系</h2><ol><li>注册：每个微服务启动时，将自己的网络地址等信息注册到注册中心，注册中心会存储（内存中）这些信息。</li><li>获取服务注册表：服务消费者从注册中心，查询服务提供者的网络地址，并使用该地址调用服务提供者，为了避免每次都查注册表信息，所以client会定时去server拉取注册表信息到缓存到client本地。</li><li>心跳：各个微服务与注册中心通过某种机制（心跳）通信，若注册中心长时间和服务间没有通信，就会注销该实例。</li><li>调用：实际的服务调用，通过注册表，解析服务名和具体地址的对应关系，找到具体服务的地址，进行实际调用。</li></ol><p><img src="https://img-blog.csdnimg.cn/2021020610401060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h2><h3 id="Eureka-概念"><a href="#Eureka-概念" class="headerlink" title="Eureka 概念"></a>Eureka 概念</h3><p>Eureka注册中心各个节点是平等的，节点挂掉不会影响剩余节点的正常工作，只要有一台Eureka还在，就能保证注册服务可用，只不过查询到的数据可能不会最新的。Eureka还有自我保护机制，如果在15分钟内超过85%的节点都没有正常心跳，那么Eureka就认为客户端与注册中心出现了故障，此时会出现以下几种情况：</p><ol><li>Eureka不再从注册列表移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上（保证当前节点依然可用）</li><li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中</li></ol><p><strong>Eureka自我保护机制</strong></p><p>某时刻某一个微服务不可用了，eureka不会立即清理，依旧会对该微服务的信息进行保存</p><p>默认EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）</p><p>当网络分区故障发生时，微服务与EurekaServer之间无法正常通信，但微服务本身其实是健康的。当EurekaServer节点在短时间内丢失过多客户端时，那么这个节点就会进入自我保护模式，EurekaServer会保护服务注册表中的信息，不再注销任何微服务。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。</p><p>在Spring Cloud中，可以使用eureka.server.enable-self-preservation &#x3D; false 禁用自我保护模式。</p><p>服务少的话要关闭自我保护，服务多的话要开启自我保护，原因是服务多的话如果发现服务挂了其实是不一定真的挂了，可以是由于网络波动等因素没调到服务，所以需要触发自我保护机制。</p><p><strong>Eureka 三级缓存</strong></p><table><thead><tr><th>缓存</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>registry</strong></td><td>ConcurrentHashMap</td><td><strong>实时更新</strong>，类AbstractInstanceRegistry成员变量，UI端请求的是这里的服务注册信息</td></tr><tr><td><strong>readWriteCacheMap</strong></td><td>Guava Cache&#x2F;LoadingCache</td><td><strong>实时更新</strong>，类ResponseCacheImpl成员变量，缓存时间180秒</td></tr><tr><td><strong>readOnlyCacheMap</strong></td><td>ConcurrentHashMap</td><td><strong>周期更新</strong>，类ResponseCacheImpl成员变量，默认每<strong>30s</strong>从readWriteCacheMap更新，Eureka client默认从这里更新服务注册信息，可配置直接从readWriteCacheMap更新</td></tr></tbody></table><p>开启 readOnlyCacheMap 是为了保证高可用，如果有大量请求进来会先往 readWriteCacheMap 里加，而不会影响 readOnlyCacheMap 的读</p><h3 id="Eureka-Restful-服务调用"><a href="#Eureka-Restful-服务调用" class="headerlink" title="Eureka Restful 服务调用"></a>Eureka Restful 服务调用</h3><p>官方文档</p><p><a href="https://github.com/Netflix/eureka/wiki/Eureka-REST-operations">https://github.com/Netflix/eureka/wiki/Eureka-REST-operations</a></p><table><thead><tr><th><strong>Operation</strong></th><th><strong>HTTP action</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>Register new application instance</td><td>POST &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong></td><td>Input: JSON&#x2F;XMLpayload HTTPCode: 204 on success</td></tr><tr><td>De-register application instance</td><td>DELETE &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td>HTTP Code: 200 on success</td></tr><tr><td>Send application instance heartbeat</td><td>PUT &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td>HTTP Code: * 200 on success * 404 if <strong>instanceID</strong>doesn’t exist</td></tr><tr><td>Query for all instances</td><td>GET &#x2F;eureka&#x2F;v2&#x2F;apps</td><td>HTTP Code: 200 on success Output: JSON&#x2F;XML</td></tr><tr><td>Query for all <strong>appID</strong> instances</td><td>GET &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong></td><td>HTTP Code: 200 on success Output: JSON&#x2F;XML</td></tr><tr><td>Query for a specific <strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td>GET &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td>HTTP Code: 200 on success Output: JSON&#x2F;XML</td></tr><tr><td>Query for a specific <strong>instanceID</strong></td><td>GET &#x2F;eureka&#x2F;v2&#x2F;instances&#x2F;<strong>instanceID</strong></td><td>HTTP Code: 200 on success Output: JSON&#x2F;XML</td></tr><tr><td>Take instance out of service</td><td>PUT &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong>&#x2F;status?value&#x3D;OUT_OF_SERVICE</td><td>HTTP Code: * 200 on success * 500 on failure</td></tr><tr><td>Move instance back into service (remove override)</td><td>DELETE &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong>&#x2F;status?value&#x3D;UP (The value&#x3D;UP is optional, it is used as a suggestion for the fallback status due to removal of the override)</td><td>HTTP Code: * 200 on success * 500 on failure</td></tr><tr><td>Update metadata</td><td>PUT &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong>&#x2F;metadata?key&#x3D;value</td><td>HTTP Code: * 200 on success * 500 on failure</td></tr><tr><td>Query for all instances under a particular <strong>vip address</strong></td><td>GET &#x2F;eureka&#x2F;v2&#x2F;vips&#x2F;<strong>vipAddress</strong></td><td>* HTTP Code: 200 on success Output: JSON&#x2F;XML  * 404 if the <strong>vipAddress</strong>does not exist.</td></tr><tr><td>Query for all instances under a particular <strong>secure vip address</strong></td><td>GET &#x2F;eureka&#x2F;v2&#x2F;svips&#x2F;<strong>svipAddress</strong></td><td>* HTTP Code: 200 on success Output: JSON&#x2F;XML  * 404 if the <strong>svipAddress</strong>does not exist.</td></tr></tbody></table><h3 id="Eureka-单节点服务端配置说明"><a href="#Eureka-单节点服务端配置说明" class="headerlink" title="Eureka 单节点服务端配置说明"></a>Eureka 单节点服务端配置说明</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span> <br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-comment"># 表示将自己的ip注册到EurekaServer上。不配置或false，表示将操作系统的hostname注册到server</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment"># 是否将自己注册到Eureka Server,默认为true，由于当前就是server，故而设置成false，表明该服务不会向eureka注册自己的信息</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 是否从eureka server获取注册信息，由于单节点，不需要同步其他节点数据，用false</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 设置服务注册中心的URL，用于client和server端交流</span><br>    <span class="hljs-attr">service-url:</span>                      <br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://root:root@eureka-7901:7901/eureka/</span><br>  <span class="hljs-attr">server:</span><br>  <span class="hljs-comment"># 关闭自我保护</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 自我保护阈值</span><br>    <span class="hljs-attr">renewal-percent-threshold:</span> <span class="hljs-number">0.8</span><br>    <span class="hljs-comment"># 剔除服务的时间间隔</span><br>    <span class="hljs-attr">viction-interval-timer-in-ms:</span> <span class="hljs-number">1000</span><br>    <span class="hljs-comment"># 关闭缓存</span><br>    <span class="hljs-attr">use-read-only-response-cache:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="Eureka-Client-注册"><a href="#Eureka-Client-注册" class="headerlink" title="Eureka Client 注册"></a>Eureka Client 注册</h3><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#注册中心</span><br><span class="hljs-attr">eureka:</span> <br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#设置服务注册中心的URL</span><br>    <span class="hljs-attr">service-url:</span>                      <br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://root:root@localhost:7900/eureka/</span><br></code></pre></td></tr></table></figure><p>不想注册，设置成false即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">service-registry:</span><br>      <span class="hljs-attr">auto-registration:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>注册成功：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">DiscoveryClient_API-<span class="hljs-keyword">LISTEN</span>-<span class="hljs-keyword">ORDER</span>/api-<span class="hljs-keyword">listen</span>-<span class="hljs-keyword">order</span>:<span class="hljs-number">30.136</span><span class="hljs-number">.133</span><span class="hljs-number">.9</span>:port - registration status: <span class="hljs-number">204</span><br></code></pre></td></tr></table></figure><h3 id="Eureka-集群的本地搭建"><a href="#Eureka-集群的本地搭建" class="headerlink" title="Eureka 集群的本地搭建"></a>Eureka 集群的本地搭建</h3><p>引入依赖 eureka server</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改本地hosts文件</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> eureka1.com<br><span class="hljs-number">127.0.0.1</span> eureka2.com<br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-number">01</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-demo</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-number">01</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka1.com</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka2.com:5002/eureka</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5002</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-demo</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-number">02</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka2.com</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka1.com:5001/eureka</span><br></code></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegistryApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RegistryApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>多节点 Eureka 注意事项</strong></p><blockquote><p>peer：A 同步信息给 B，A 是 B 的peer</p></blockquote><p>举例说明：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka2.com</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka1.com:5001/eureka</span> <span class="hljs-comment"># 这个地址就是该服务的 peer</span><br></code></pre></td></tr></table></figure><p>有3个服务 A B C，注册方式 A -&gt; B，B-&gt;C，C-&gt;A，结果注册信息并不同步</p><p>启动流程：</p><ol><li>拉取 peer 的注册表，A 启动会拉取 B 的注册表</li><li>把自己注册到 peer 上，A 会把自己注册到 B 的注册表上</li><li>peer 会把自己的注册表同步给 peer 的 peer，B 会把 A 同步给 C</li></ol><h3 id="Eureka-架构图"><a href="#Eureka-架构图" class="headerlink" title="Eureka 架构图"></a>Eureka 架构图</h3><p><img src="https://img-blog.csdnimg.cn/20210206111125938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Eureka-客户端工作流程"><a href="#Eureka-客户端工作流程" class="headerlink" title="Eureka 客户端工作流程"></a>Eureka 客户端工作流程</h3><p><img src="https://img-blog.csdnimg.cn/20210206141833488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Eureka-原理"><a href="#Eureka-原理" class="headerlink" title="Eureka 原理"></a>Eureka 原理</h3><blockquote><p>Eureka 存储了每个客户端的注册信息</p><p>EurekaClient 从 EurekaServer 同步获取服务注册列表，通过一定的规则选择一个服务进行调用</p></blockquote><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p><strong>服务提供者</strong>：是一个eureka client，向Eureka Server注册和更新自己的信息，同时能从Eureka Server注册表中获取到其他服务的信息。</p><p><strong>服务注册中心</strong>：提供服务注册和发现的功能。每个 Eureka Client 向 Eureka Server 注册自己的信息，也可以通过Eureka Server获取到其他服务的信息达到发现和调用其他服务的目的。</p><p><strong>服务消费者</strong>：是一个 Eureka Client，通过 Eureka Server 获取注册到其上其他服务的信息，从而根据信息找到所需的服务发起远程调用。</p><p><strong>同步复制</strong>：Eureka Server 之间注册表信息的同步复制，使 Eureka Server 集群中不同注册表中服务实例信息保持一致。</p><p><strong>远程调用</strong>：服务客户端之间的远程调用。</p><p><strong>注册</strong>：Client 向 Server 注册自身的元数据以供服务发现。</p><p><strong>续约</strong>：Eureka客户端需要每30秒发送一次心跳来续租，通过发送心跳到 Server 以维持和更新注册表中服务实例元数据的有效性。当在一定时长内，Server 没有收到 Client 的心跳信息，将默认服务下线，会把服务实例的信息从注册表中删除。</p><p><strong>下线</strong>：Client 在关闭时主动向 Server 注销服务实例元数据，这时 Client 的服务实例数据将从 Server 的注册表中删除。</p><p><strong>获取注册表</strong>：Client 向 Server 请求注册表信息，用于服务发现，从而发起服务间远程调用。</p><p><strong>元数据</strong>：Eureka的元数据有两种：标准元数据和自定义元数据。</p><p>标准元数据：主机名、IP地址、端口号、状态页和健康检查等信息，这些信息都会被发布在服务注册表中，用于服务之间的调用。</p><p>自定义元数据：可以使用eureka.instance.metadata-map配置，这些元数据可以在远程客户端中访问，但是一般不改变客户端行为，除非客户端知道该元数据的含义。</p><p>可以在配置文件中对当前服务设置自定义元数据，可后期用户个性化使用</p><p>元数据可以配置在 eureka 服务器和 eureka 客户端上</p><h4 id="如何自己实现一个注册中心"><a href="#如何自己实现一个注册中心" class="headerlink" title="如何自己实现一个注册中心"></a>如何自己实现一个注册中心</h4><ul><li><p>客户端：拉取注册表，从注册表里选一个调用</p></li><li><p>服务端：</p><ul><li>定义注册表：<code>Map&lt;name, Map&lt;id, InstanceInfo&gt;&gt;</code></li><li>别人可以向我注册自己的信息</li><li>别人可以从我这里拉取他人的信息</li><li>我和我的同类可以共享注册表</li></ul><p>eureka是用：jersey实现，也是个mvc框架。我们可以自己写个spring boot web实现。</p></li></ul><h3 id="Eureka-源码"><a href="#Eureka-源码" class="headerlink" title="Eureka 源码"></a>Eureka 源码</h3><h4 id="Eureka-Server-启动"><a href="#Eureka-Server-启动" class="headerlink" title="Eureka Server 启动"></a>Eureka Server 启动</h4><p>通过注解 @EnableEurekaServer 导入了 EurekaServerMarkerConfiguration 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaServer</span> -&gt; <span class="hljs-meta">@Import(EurekaServerMarkerConfiguration.class)</span><br></code></pre></td></tr></table></figure><p>在 EurekaServerMarkerConfiguration 类中只是新建了一个 Marker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Marker <span class="hljs-title function_">eurekaServerMarkerBean</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Marker</span>();<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Marker</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在 Erueka Server 的 jar 包下的 spring.facoties 中发现导入了 EurekaServerAutoConfiguration 配置类，而该配置类生效的条件是 Marker 类的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConditionalOnBean(EurekaServerMarkerConfiguration.Marker.class)</span><br></code></pre></td></tr></table></figure><p>同时在 EurekaServerAutoConfiguration 中还导入了 EurekaServerInitializerConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(EurekaServerInitializerConfiguration.class)</span><br></code></pre></td></tr></table></figure><p>而导入这个类后会直接执行其 start 方法，原因是它实现了 SmartLifecycle 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaServerInitializerConfiguration</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextAware</span>, SmartLifecycle, Ordered &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Eureka-Server-注册实例"><a href="#Eureka-Server-注册实例" class="headerlink" title="Eureka Server 注册实例"></a>Eureka Server 注册实例</h4><p>ApplicationResource#addInstance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">registry.register -&gt; PeerAwareInstanceRegistryImpl#register -&gt;<br>AbstractInstanceRegistry#register<br></code></pre></td></tr></table></figure><p>在 AbstractInstanceRegistry 这个类中可以找到存放实例信息的map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// map&lt;服务名, map&lt;实例ID，实例信息&gt;&gt;</span><br>ConcurrentHashMap&lt;String, Map&lt;String, Lease&lt;InstanceInfo&gt;&gt;&gt; register<br></code></pre></td></tr></table></figure><h4 id="Eureka-Server-拉取实例"><a href="#Eureka-Server-拉取实例" class="headerlink" title="Eureka Server 拉取实例"></a>Eureka Server 拉取实例</h4><p>ApplicationResource#getApplication</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">responseCache.get<span class="hljs-function"><span class="hljs-params">(cacheKey)</span> -&gt;</span> getValue<span class="hljs-function"><span class="hljs-params">(key, useReadOnlyCache)</span> -&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果开启了readOnly缓存</span><br><span class="hljs-keyword">if</span> (useReadOnlyCache) &#123;<br>    <span class="hljs-comment">// 先从readOnly缓存里取</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Value</span> <span class="hljs-variable">currentPayload</span> <span class="hljs-operator">=</span> readOnlyCacheMap.get(key);<br>    <span class="hljs-keyword">if</span> (currentPayload != <span class="hljs-literal">null</span>) &#123;<br>        payload = currentPayload;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 取不到再从readWrite缓存里取</span><br>        payload = readWriteCacheMap.get(key);<br>        readOnlyCacheMap.put(key, payload);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果没开启，则直接从readWrite缓存里取</span><br>    payload = readWriteCacheMap.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h3 id="Nacos-配置中心概念"><a href="#Nacos-配置中心概念" class="headerlink" title="Nacos 配置中心概念"></a>Nacos 配置中心概念</h3><p>命名空间（Namespace）：代表不同环境，如开发、测试、生产环境</p><p>配置分组（Group）：代表某项目</p><p>配置集（Data ID）：每个项目下有若干个工程，每个配置集就是一个工程的主配置文件</p><h3 id="Nacos-服务启动"><a href="#Nacos-服务启动" class="headerlink" title="Nacos 服务启动"></a>Nacos 服务启动</h3><p>从官网下载 Last Release 版本</p><p><a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>在bin文件夹下以standalone模式启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># windows</span><br>startup.cmd -m standalone<br><span class="hljs-comment"># linux</span><br>./startup.sh -m standalone<br></code></pre></td></tr></table></figure><p>进入控制台，账密：nacos</p><p><a href="http://localhost:8848/nacos/index.html">http://localhost:8848/nacos/index.html</a></p><h3 id="Nacos-整合-Spring-Cloud"><a href="#Nacos-整合-Spring-Cloud" class="headerlink" title="Nacos 整合 Spring Cloud"></a>Nacos 整合 Spring Cloud</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置 bootstrap.yml</p><ol><li>仅有一个主配置文件，在Nacos服务端配置文件名为 {spring.application.name}.{file-extension}</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-demo</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">2cd03b3d-4c75-4ceb-ac89-2673fc2032d9</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEV_GROUP</span><br></code></pre></td></tr></table></figure><ol start="2"><li>有多个配置文件，除了上述的主配置文件外还可以指定额外配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-demo</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">2cd03b3d-4c75-4ceb-ac89-2673fc2032d9</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEV_GROUP</span><br>        <span class="hljs-attr">extension-configs:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">data-id:</span> <span class="hljs-string">nacos-example1.yml</span><br>            <span class="hljs-attr">group:</span> <span class="hljs-string">DEV_GROUP</span><br>            <span class="hljs-attr">refresh:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">data-id:</span> <span class="hljs-string">nacos-example2.yml</span><br>            <span class="hljs-attr">group:</span> <span class="hljs-string">DEV_GROUP</span><br>            <span class="hljs-attr">refresh:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>Nacos 服务端配置</p><p><img src="https://img-blog.csdnimg.cn/20210404190900874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>nacos-demo.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br></code></pre></td></tr></table></figure><ol start="2"><li>nacos-example1.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">common:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">zhangsan</span><br></code></pre></td></tr></table></figure><ol start="3"><li>nacos-example1.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">common:</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;config&quot;)</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;common.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;common.age&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@GetMapping(&quot;get&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;,&quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Nacos 集群配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置 nacos 的集群主节点</span><br><span class="hljs-attr">nacos.inetutils.ip-address</span>=<span class="hljs-string">127.0.0.1</span><br></code></pre></td></tr></table></figure><h3 id="Nacos-整合-Dubbo"><a href="#Nacos-整合-Dubbo" class="headerlink" title="Nacos 整合 Dubbo"></a>Nacos 整合 Dubbo</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-registry-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>生产者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sardine-nacos-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">protocol:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">20881</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">nacos://127.0.0.1:8848</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br></code></pre></td></tr></table></figure><p>消费者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8002</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sardine-nacos-consumer</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">protocol:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">20882</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">nacos://127.0.0.1:8848</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br></code></pre></td></tr></table></figure><p>生产者启动类上加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDubbo</span><br></code></pre></td></tr></table></figure><p>消费者加入生产者依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.demo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>消费者调用生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DubboReference</span><br><span class="hljs-keyword">private</span> ProviderService providerService;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud 健康检查</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringCloud%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringCloud%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Admin-健康检查"><a href="#Spring-Cloud-Admin-健康检查" class="headerlink" title="Spring Cloud Admin 健康检查"></a>Spring Cloud Admin 健康检查</h1><h3 id="Admin服务器端"><a href="#Admin服务器端" class="headerlink" title="Admin服务器端"></a>Admin服务器端</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Admin 服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Admin 界面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableAdminServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(AdminApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Admin客户端"><a href="#Admin客户端" class="headerlink" title="Admin客户端"></a>Admin客户端</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-attr">management.endpoint.health.show-details</span>=<span class="hljs-string">always</span><br><span class="hljs-attr">spring.boot.admin.client.url</span>=<span class="hljs-string">http://localhost:8080</span><br></code></pre></td></tr></table></figure><h3 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">application:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-admin</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">user:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>  <span class="hljs-comment"># 邮件设置</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.qq.com</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">单纯QQ号</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">xxxxxxx授权码</span><br>    <span class="hljs-attr">properties:</span><br>      <span class="hljs-attr">mail:</span> <br>        <span class="hljs-attr">smpt:</span> <br>          <span class="hljs-attr">auth:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">starttls:</span> <br>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 收件邮箱</span><br><span class="hljs-attr">spring.boot.admin.notify.mail.to:</span> <span class="hljs-string">xxxxxxxxx@qq.com</span>   <br><span class="hljs-comment"># 发件邮箱</span><br><span class="hljs-attr">spring.boot.admin.notify.mail.from:</span> <span class="hljs-string">xxxxxxx@qq.com</span>   <br></code></pre></td></tr></table></figure><h3 id="钉钉群通知"><a href="#钉钉群通知" class="headerlink" title="钉钉群通知"></a>钉钉群通知</h3><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableAdminServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(AdminApplication.class, args);<br>&#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DingDingNotifier <span class="hljs-title function_">dingDingNotifier</span><span class="hljs-params">(InstanceRepository repository)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DingDingNotifier</span>(repository);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通知类"><a href="#通知类" class="headerlink" title="通知类"></a>通知类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DingDingNotifier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractStatusChangeNotifier</span>  &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DingDingNotifier</span><span class="hljs-params">(InstanceRepository repository)</span> &#123;<br>        <span class="hljs-built_in">super</span>(repository);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Mono&lt;Void&gt; <span class="hljs-title function_">doNotify</span><span class="hljs-params">(InstanceEvent event, Instance instance)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">serviceName</span> <span class="hljs-operator">=</span> instance.getRegistration().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">serviceUrl</span> <span class="hljs-operator">=</span> instance.getRegistration().getServiceUrl();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> instance.getStatusInfo().getStatus();<br>        Map&lt;String, Object&gt; details = instance.getStatusInfo().getDetails();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        str.append(<span class="hljs-string">&quot;服务预警 : 【&quot;</span> + serviceName + <span class="hljs-string">&quot;】&quot;</span>);<br>        str.append(<span class="hljs-string">&quot;【服务地址】&quot;</span> + serviceUrl);<br>        str.append(<span class="hljs-string">&quot;【状态】&quot;</span> + status);<br>        str.append(<span class="hljs-string">&quot;【详情】&quot;</span> + JSONObject.toJSONString(details));<br>        <span class="hljs-keyword">return</span> Mono.fromRunnable(() -&gt; &#123;<br>            DingDingMessageUtil.sendTextMessage(str.toString());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="发送工具类"><a href="#发送工具类" class="headerlink" title="发送工具类"></a>发送工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DingDingMessageUtil</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">access_token</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Token&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendTextMessage</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>            message.setMsgtype(<span class="hljs-string">&quot;text&quot;</span>);<br>            message.setText(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageInfo</span>(msg));<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;https://oapi.dingtalk.com/robot/send?access_token=&quot;</span> + access_token);<br>            <span class="hljs-comment">// 建立 http 连接</span><br>            <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>            conn.setDoOutput(<span class="hljs-literal">true</span>);<br>            conn.setDoInput(<span class="hljs-literal">true</span>);<br>            conn.setUseCaches(<span class="hljs-literal">false</span>);<br>            conn.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>            conn.setRequestProperty(<span class="hljs-string">&quot;Charset&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            conn.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/Json; charset=UTF-8&quot;</span>);<br>            conn.connect();<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> conn.getOutputStream();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">textMessage</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(message);<br>            <span class="hljs-type">byte</span>[] data = textMessage.getBytes();<br>            out.write(data);<br>            out.flush();<br>            out.close();<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> conn.getInputStream();<br>            <span class="hljs-type">byte</span>[] data1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[in.available()];<br>            in.read(data1);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data1));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="消息类"><a href="#消息类" class="headerlink" title="消息类"></a>消息类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br><span class="hljs-keyword">private</span> String msgtype;<br>    <span class="hljs-keyword">private</span> MessageInfo text;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsgtype</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msgtype;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsgtype</span><span class="hljs-params">(String msgtype)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msgtype = msgtype;<br>    &#125;<br>    <span class="hljs-keyword">public</span> MessageInfo <span class="hljs-title function_">getText</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> text;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setText</span><span class="hljs-params">(MessageInfo text)</span> &#123;<br>        <span class="hljs-built_in">this</span>.text = text;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageInfo</span> &#123;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MessageInfo</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud 服务网关</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringCloud%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringCloud%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-服务网关"><a href="#Spring-Cloud-服务网关" class="headerlink" title="Spring Cloud 服务网关"></a>Spring Cloud 服务网关</h1><h2 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h2><p>基于 Servlet</p><h3 id="Zuul-概述"><a href="#Zuul-概述" class="headerlink" title="Zuul 概述"></a>Zuul 概述</h3><p>Zuul是Netflix开源的微服务网关，核心是一系列过滤器。这些过滤器可以完成以下功能。</p><ol><li>是所有微服务入口，进行分发。</li><li>身份认证与安全：识别合法的请求，拦截不合法的请求。</li><li>监控：在入口处监控，更全面。</li><li>动态路由：动态将请求分发到不同的后端集群。</li><li>压力测试：可以逐渐增加对后端服务的流量，进行测试。</li><li>负载均衡</li><li>限流：比如我每秒只要1000次，1001次就不让访问了。 </li><li>服务熔断</li></ol><p>zuul是跑在Tomcat上的，性能较低，可以使用读写分离，写请求通过zuul来实现</p><h3 id="Zuul-配置"><a href="#Zuul-配置" class="headerlink" title="Zuul 配置"></a>Zuul 配置</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment"># 需要和其他服务注册到同一个注册中心</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:5000/eureka</span><br><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">routes:</span><br>    <span class="hljs-attr">sardine-user:</span> <span class="hljs-string">/user/**</span><br>    <span class="hljs-attr">sardine-cookbook:</span> <span class="hljs-string">/cookbook/**</span><br>    <span class="hljs-attr">sardine-file:</span> <span class="hljs-string">/file/**</span><br>  <span class="hljs-attr">prefix:</span> <span class="hljs-string">/api</span><br>  <span class="hljs-attr">add-host-header:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 携带域名信息</span><br>  <span class="hljs-attr">sensitive-headers:</span>    <span class="hljs-comment"># 忽略头信息</span><br></code></pre></td></tr></table></figure><p>启动类增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableZuulProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZuulApplication</span> &#123;<br></code></pre></td></tr></table></figure><h3 id="Zuul-过滤器"><a href="#Zuul-过滤器" class="headerlink" title="Zuul 过滤器"></a>Zuul 过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ZuulFilter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserClient userClient;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过滤器的类型: pre route post error</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">filterType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> FilterConstants.PRE_TYPE;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过滤器的执行顺序: 返回值越小，优先级越高</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">filterOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否执行run方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">RequestContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> RequestContext.getCurrentContext();<br>        <span class="hljs-comment">// 如果执行了context.setSendZuulResponse(false)方法，就不执行过滤器</span><br>        <span class="hljs-comment">// 相当于不执行后面的过滤器了</span><br>        <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span> &amp;&amp; !context.sendZuulResponse())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过滤器的业务逻辑</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">RequestContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> RequestContext.getCurrentContext();<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> context.getRequest();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(authProperties.getTokenName());<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(token))<br>            <span class="hljs-keyword">return</span> noAuthorization(context);<br>        <span class="hljs-type">UserDto</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userClient.identify(token).getRecord();<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> noAuthorization(context);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 拦截此次请求</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">noAuthorization</span><span class="hljs-params">(RequestContext context)</span>&#123;<br>        context.setSendZuulResponse(<span class="hljs-literal">false</span>);<br>        context.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);<br>        context.setResponseBody(<span class="hljs-string">&quot;No Authorization&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p>基于 Netty，Spring WebFlux 响应式编程，在请求的时候就封装好了Response</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>Predicates 断言</p><blockquote><p>多个断言可以配合使用</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">predicates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/img/**</span><span class="hljs-comment"># 匹配路径</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Query=foo,ba</span><span class="hljs-comment"># 匹配参数，可使用正则</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Method=get</span><span class="hljs-comment"># 匹配请求方式</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Host=demo.com</span><span class="hljs-comment"># 匹配Host</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Cookie=aaa</span><span class="hljs-comment"># 匹配Cookie</span><br></code></pre></td></tr></table></figure><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Cloud Gateway --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sardine-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">my-route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:7012</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/gateway/**</span>      <span class="hljs-comment"># 将后缀是此路径的转发到uri</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span>         <span class="hljs-comment"># 去掉1个前缀</span><br></code></pre></td></tr></table></figure><h3 id="整合-Eureka"><a href="#整合-Eureka" class="headerlink" title="整合 Eureka"></a>整合 Eureka</h3><p><strong>使用默认路由</strong></p><p>pom</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sardine-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:7000/eureka</span><br></code></pre></td></tr></table></figure><p>默认是根据 Eureka 的服务名进行转发（注意要大写0）：<a href="http://localhost:5001/SARDINE-USER/hello">http://localhost:5001/SARDINE-USER/hello</a></p><p><strong>使用自定义路由</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sardine-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">sardine-user</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://SARDINE-USER</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:7000/eureka</span><br></code></pre></td></tr></table></figure><p>访问该地址可以得到同样的效果： <a href="http://localhost:5001/user/hello">http://localhost:5001/user/hello</a></p><h3 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h3><p>定义自定义负载均衡策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractLoadBalancerRule</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initWithNiwsConfig</span><span class="hljs-params">(IClientConfig iClientConfig)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Server <span class="hljs-title function_">choose</span><span class="hljs-params">(Object o)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyRule&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 gateway 服务中增加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">SARDINE-USER:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.sardine.gateway.config.MyRule</span><br></code></pre></td></tr></table></figure><h3 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title function_">routeLocator</span><span class="hljs-params">(RouteLocatorBuilder locatorBuilder)</span>&#123;<br>    <span class="hljs-keyword">return</span> locatorBuilder.routes()<br>        .route(p -&gt; p.path(<span class="hljs-string">&quot;/u/**&quot;</span>).filters(f -&gt; f.stripPrefix(<span class="hljs-number">1</span>)).uri(<span class="hljs-string">&quot;lb://SARDINE-USER&quot;</span>)).build();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ordered</span>, GlobalFilter &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行过滤器&quot;</span>);<br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        MultiValueMap&lt;String, String&gt; queryParams = request.getQueryParams();<br>        List&lt;String&gt; list = queryParams.get(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.size() == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;非法请求&quot;</span>);<br><span class="hljs-comment">//            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="hljs-comment">//            return exchange.getResponse().setComplete();</span><br>            <span class="hljs-type">DataBuffer</span> <span class="hljs-variable">dataBuffer</span> <span class="hljs-operator">=</span> exchange.getResponse().bufferFactory().wrap(<span class="hljs-string">&quot;Illegal Request&quot;</span>.getBytes());<br>            <span class="hljs-keyword">return</span> exchange.getResponse().writeWith(Mono.just(dataBuffer));<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><h4 id="整合Guava"><a href="#整合Guava" class="headerlink" title="整合Guava"></a>整合Guava</h4><p>限流实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Primary</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultRateLimiter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRateLimiter</span>&lt;DefaultRateLimiter.Config&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">RateLimiter</span> <span class="hljs-variable">limiter</span> <span class="hljs-operator">=</span> RateLimiter.create(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultRateLimiter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(Config.class, <span class="hljs-string">&quot;default-rate-limiter&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationService</span>());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Response&gt; <span class="hljs-title function_">isAllowed</span><span class="hljs-params">(String routeId, String id)</span> &#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> getConfig().get(routeId);<br>        limiter.setRate(Objects.isNull(config.getPermitsPerSecond()) ? <span class="hljs-number">1</span> : config.getPermitsPerSecond());<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isAllow</span> <span class="hljs-operator">=</span> limiter.tryAcquire();<br>        <span class="hljs-keyword">return</span> Mono.just(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(isAllow, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;()));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;<br><br>        <span class="hljs-meta">@DecimalMin(&quot;0.1&quot;)</span><br>        <span class="hljs-keyword">private</span> Double permitsPerSecond;<br><br>        <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getPermitsPerSecond</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> permitsPerSecond;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Config <span class="hljs-title function_">setPermitsPerSecond</span><span class="hljs-params">(Double permitsPerSecond)</span> &#123;<br>            <span class="hljs-built_in">this</span>.permitsPerSecond = permitsPerSecond;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置需要根据什么维度进行限流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RateLimitConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyResolver <span class="hljs-title function_">userKeyResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 获取请求用户IP作为限流key</span><br>        <span class="hljs-keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sardine-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">sardine-user</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://SARDINE-USER</span><br>        <span class="hljs-attr">filters:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">RequestRateLimiter</span><br>          <span class="hljs-attr">args:</span><br>          <span class="hljs-comment"># 限流的实现类，Spring的EL表达式，拿到这个Bean</span><br>            <span class="hljs-attr">rate-limiter:</span> <span class="hljs-string">&#x27;#&#123;@defaultRateLimiter&#125;&#x27;</span><br>            <span class="hljs-comment"># 需要限流的规则</span><br>            <span class="hljs-attr">key-resolver:</span> <span class="hljs-string">&#x27;#&#123;@userKeyResolver&#125;&#x27;</span><br>            <span class="hljs-comment"># 每秒发放令牌个数</span><br>            <span class="hljs-attr">default-rate-limiter.premitPerSecond:</span> <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><h4 id="使用Filter-实现令牌桶算法"><a href="#使用Filter-实现令牌桶算法" class="headerlink" title="使用Filter 实现令牌桶算法"></a>使用Filter 实现令牌桶算法</h4><ol><li>修改pom 添加redis依赖</li><li>添加reids key 的解析器即key-resolver 解析类</li><li>调整配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyResolverConfiguration</span> &#123;<br> <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyResolver <span class="hljs-title function_">pathKeyResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyResolver</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Mono&lt;String&gt; <span class="hljs-title function_">resolve</span><span class="hljs-params">(ServerWebExchange exchange)</span> &#123;<br>                <span class="hljs-keyword">return</span> Mono.just(exchange.getRequest().getPath().toString());<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">application</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">api-gateway-server #服务名称</span><br>  <span class="hljs-attr">redis</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">host</span>: <span class="hljs-string">127.0.0.1</span><br>    <span class="hljs-attr">pool</span>: <span class="hljs-string">6379</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">0</span><br>  <span class="hljs-attr">cloud</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">gateway</span>:<span class="hljs-string"></span><br>      <span class="hljs-attr">routes</span>:<span class="hljs-string"></span><br><span class="hljs-comment">      #配置路由： 路由id,路由到微服务的uri,断言（判断条件）</span><br>        <span class="hljs-attr">-</span> <span class="hljs-string">id: product-service #保持唯一</span><br><span class="hljs-comment">          #uri: http://127.0.0.1:8001 #目标为服务地址</span><br>          <span class="hljs-attr">uri</span>: <span class="hljs-string">lb://cloud-payment-service # lb:// 根据服务名称从注册中心获取请求地址路径</span><br>          <span class="hljs-attr">predicates</span>:<span class="hljs-string"></span><br><span class="hljs-comment">            #- Path=/payment/** #路由条件 path 路由匹配条件</span><br>            <span class="hljs-attr">-</span> <span class="hljs-string">Path=/product-service/** #给服务名称前加上一个固定的应用分类路径 将该路径转发到 http://127.0.0.1:8001/payment/get/1</span><br>          <span class="hljs-attr">filters</span>: <span class="hljs-string">#配置路由过滤器  http://127.0.0.1:8080/product-service/payment/get/1 -&gt; http://127.0.0.1:8001/payment/get/1</span><br>          <span class="hljs-attr">-</span> <span class="hljs-string">name: RequestRateLimiter</span><br>            <span class="hljs-attr">args</span>:<span class="hljs-string"></span><br><span class="hljs-comment">              #使用SpEL从容器中获取对象</span><br>              <span class="hljs-attr">key-resolver</span>: <span class="hljs-string">&#x27;#&#123;@pathKeyResolver&#125;&#x27;</span><br><span class="hljs-comment">              #桶令牌每秒产生平均速率</span><br>              <span class="hljs-attr">redis-rate-limiter.replenishRate</span>: <span class="hljs-string">1</span><br><span class="hljs-comment">              #令牌桶的上限</span><br>              <span class="hljs-attr">redis-rate-limiter.burstCapacity</span>: <span class="hljs-string">2</span><br>          <span class="hljs-attr">-</span> <span class="hljs-string">RewritePath=/product-service/(?&lt;segment&gt;.*),/$\&#123;segment&#125; #路径重写的过滤器，在yml中$写为 $\</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring AOP</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringAop/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringAop/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><p>开启Aop 使用 <code>@Aspect</code> 标注其为切面类，并把该类加入容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAspect</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>在配置类中开启Aop模式 <code>@EnableAspectJAutoProxy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-AOP常用注解"><a href="#Spring-AOP常用注解" class="headerlink" title="Spring AOP常用注解"></a>Spring AOP常用注解</h2><p>@Before：前置通知，目标方法之前执行</p><p>@After：后置通知，目标方法之后执行（必然执行）</p><p>@AfterReturning：返回后通知，执行方法结束前执行（异常不执行）</p><p>@AfterThrowing：异常通知，出现异常时执行</p><p>@Around：环绕通知，环绕目标方法执行</p><h2 id="Spring-Aop执行顺序"><a href="#Spring-Aop执行顺序" class="headerlink" title="Spring Aop执行顺序"></a>Spring Aop执行顺序</h2><p><strong>Spring4</strong></p><p>正常：@Around @Before @Around @After @AfterReturning</p><p>异常：@Around @Before @After @AfterThrowing</p><p><strong>Spring5</strong></p><p>正常：@Around @Before @AfterReturning @After @Around</p><p>异常：@Around @Before @AfterThrowing @After</p><h2 id="Spring-Aop-原理"><a href="#Spring-Aop-原理" class="headerlink" title="Spring Aop 原理"></a>Spring Aop 原理</h2><blockquote><p>使用动态代理执行目标方法</p></blockquote><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. @EnableAspectJAutoProxy 为容器中增加一个 AspectJAutoProxyRegistrar 类<br><span class="hljs-attribute">2</span>. 容器创建<br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span> registerBeanPostProcessors() 注册后置处理器<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span> finishBeanFactoryInitialization() 初始化剩下的单实例Bean<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> 创建业务逻辑和切面组件<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span> AnnotationAwareAspectJAutoProxyCreator拦截组件创建过程<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span> 组件创建完之后，判断组件若需要增强，切面通知方法包装成Advisor，给目标对象创建一个代理对象（默认使用cglib创建）<br><span class="hljs-attribute">3</span>. 代理对象执行目标方法 CglibAopProxy.intercept()<br><span class="hljs-attribute">3</span>.<span class="hljs-number">1</span> 得到目标方法的拦截器链，包装成拦截器MethodInterceptor<br><span class="hljs-attribute">3</span>.<span class="hljs-number">2</span> 利用拦截器的链式机制依次进入每一个拦截器进行执行<br></code></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>Spring 提供了两种方式来生成代理对象: JDKProxy 和 Cglib，具体使用哪种方式生成由AopProxyFactory 根据 AdvisedSupport 对象的配置来决定。默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 Cglib 来生成代理。</p><p><strong>JDK动态接口代理</strong></p><blockquote><p>需要有接口</p></blockquote><p>JDK 动态代理主要涉及到 java.lang.reflect 包中的两个类：Proxy 和 InvocationHandler。InvocationHandler是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编制在一起。Proxy 利用 InvocationHandler 动态创建一个符合某一接口的实例，生成目标类的代理对象。</p><p><strong>CGLib 动态代理</strong></p><blockquote><p>不需要有接口</p></blockquote><p>CGLib 全称为 Code Generation Library，是一个强大的高性能，高质量的代码生成类库，可以在运行期扩展 Java 类与实现 Java 接口，CGLib 封装了 asm，可以再运行期动态生成新的 class。和 JDK 动态代理相比较：JDK 创建代理有一个限制，就是只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则可以通过 CGLib 创建动态代理。</p><h3 id="Spring-创建代理对象"><a href="#Spring-创建代理对象" class="headerlink" title="Spring 创建代理对象"></a>Spring 创建代理对象</h3><p>如果该Bean有Advice则返回代理对象，否则返回普通对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">wrapIfNecessary</span><span class="hljs-params">(Object bean, String beanName, Object cacheKey)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="hljs-built_in">this</span>.targetSourcedBeans.contains(beanName)) &#123;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (Boolean.FALSE.equals(<span class="hljs-built_in">this</span>.advisedBeans.get(cacheKey))) &#123;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;<br>        <span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">// Create proxy if we have advice.</span><br>    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;<br>        <span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> createProxy(<br>            bean.getClass(), beanName, specificInterceptors, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonTargetSource</span>(bean));<br>        <span class="hljs-built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);<br>    <span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是接口，创建JDK代理对象，否则创建Cglib代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> AopProxy <span class="hljs-title function_">createAopProxy</span><span class="hljs-params">(AdvisedSupport config)</span> <span class="hljs-keyword">throws</span> AopConfigException &#123;<br>        <span class="hljs-keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;<br>            Class&lt;?&gt; targetClass = config.getTargetClass();<br>            <span class="hljs-keyword">if</span> (targetClass == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AopConfigException</span>(<span class="hljs-string">&quot;TargetSource cannot determine target class: &quot;</span> +<br>                        <span class="hljs-string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdkDynamicAopProxy</span>(config);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjenesisCglibAopProxy</span>(config);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdkDynamicAopProxy</span>(config);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-事务"><a href="#Spring-事务" class="headerlink" title="Spring 事务"></a>Spring 事务</h2><h3 id="配置事务步骤"><a href="#配置事务步骤" class="headerlink" title="配置事务步骤"></a>配置事务步骤</h3><ol><li><p>配置数据源</p></li><li><p>配置事务管理器 <code>PlatformTransactionManager</code></p></li><li><p>开启事务 <code>@EnableTransactionManagement</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">HikariDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql//localhost:3306/test&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置事务管理器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PlatformTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(dataSource());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h3><p>Spring只是个容器，因此它并不做任何事务的具体实现。他只是提供了事务管理的接口PlatformTransactionManager，具体内容由就由各个事务管理器来实现。</p><p>原理：通过 <code>TransactionAwareDataSourceProxy</code> 包装 <code>DataSource</code> </p><p>而在 <code>PlatformTransactionManager</code> 的实现类中可以操作 <code>DataSource</code> ，在 Spring 中实现 <code>commit</code> 和 <code>rollback</code></p><h3 id="Transactional-注解参数"><a href="#Transactional-注解参数" class="headerlink" title="Transactional 注解参数"></a>Transactional 注解参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 事务管理器</span><br><span class="hljs-comment"> */</span><br>String <span class="hljs-title function_">transactionManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 事务传播行为</span><br><span class="hljs-comment"> */</span><br>Propagation <span class="hljs-title function_">propagation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Propagation.REQUIRED;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 事务隔离级别</span><br><span class="hljs-comment"> */</span><br>Isolation <span class="hljs-title function_">isolation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Isolation.DEFAULT;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 事务的超时时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">timeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> TransactionDefinition.TIMEOUT_DEFAULT;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 该事务是否为只读</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">readOnly</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 哪种异常需要回滚</span><br><span class="hljs-comment"> */</span><br>Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt;[] rollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 哪种异常不需要回滚</span><br><span class="hljs-comment"> */</span><br>Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt;[] noRollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br></code></pre></td></tr></table></figure><h3 id="Spring-事务传播行为"><a href="#Spring-事务传播行为" class="headerlink" title="Spring 事务传播行为"></a>Spring 事务传播行为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 若当前事务存在，则在当前事务中运行，否则开启一个新事务</span><br><span class="hljs-comment"> * Support a current transaction, create a new one if none exists.</span><br><span class="hljs-comment"> */</span><br>REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 若当前事务存在，则在当前事务中运行，否则不开启事务</span><br><span class="hljs-comment"> * Support a current transaction, execute non-transactionally if none exists.</span><br><span class="hljs-comment"> */</span><br>SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 若当前事务不存在则抛异常</span><br><span class="hljs-comment"> * Support a current transaction, throw an exception if none exists.</span><br><span class="hljs-comment"> */</span><br>MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开启一个事务并挂起当前事务</span><br><span class="hljs-comment"> * Create a new transaction, and suspend the current transaction if one exists.</span><br><span class="hljs-comment"> */</span><br>REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 运行在事务中被挂起</span><br><span class="hljs-comment"> * Execute non-transactionally, suspend the current transaction if one exists.</span><br><span class="hljs-comment"> */</span><br>NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在事务中运行将会抛异常</span><br><span class="hljs-comment"> * Execute non-transactionally, throw an exception if a transaction exists.</span><br><span class="hljs-comment"> */</span><br>NEVER(TransactionDefinition.PROPAGATION_NEVER),<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 嵌套在当前事务中运行</span><br><span class="hljs-comment"> * Execute within a nested transaction if a current transaction exists,</span><br><span class="hljs-comment"> * behave like PROPAGATION_REQUIRED else. There is no analogous feature in EJB.</span><br><span class="hljs-comment"> */</span><br>NESTED(TransactionDefinition.PROPAGATION_NESTED);<br></code></pre></td></tr></table></figure><h3 id="Spring-事务失效场景"><a href="#Spring-事务失效场景" class="headerlink" title="Spring 事务失效场景"></a>Spring 事务失效场景</h3><ol><li>数据库引擎不支持事务：InnoDB支持事务，MyISAM不支持事务</li><li>数据源没配置事务管理器</li><li>没有抛出异常，或异常类型错误</li><li>方法没有被切面管理，即不是代理对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Order order)</span> &#123;<br>        updateOrder(order);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 新开的事务不管用，因为没有被切面管理</span><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateOrder</span><span class="hljs-params">(Order order)</span> &#123;<br>        <span class="hljs-comment">// update order</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解决上述问题可以将新开的事务写在不同类中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceA</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ServiceB serviceB;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span>&#123;<br>        serviceB.insert();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceB</span> &#123;<br><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 向数据库中添加数据</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解决方案2: 配置文件中加 &lt;aop:config expose-proxy=&quot;true&quot;&gt;</span><br><span class="hljs-comment"> * 并且使用如下方式调用:</span><br><span class="hljs-comment"> * ((ServiceA) AopContext.currentProxy()).insert();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><strong>声明式事务和编程式事务</strong></p><p>编程式事务：通过硬编码的形式手动控制事务的提交和回滚。</p><p>声明式事务：只需告诉Spring哪个方法是事务方法即可。</p><p><strong>Spring事务异常</strong></p><p>运行时异常：可以不用处理，默认都回滚。</p><p>编译时异常：要么try-catch，要么thows，默认不回滚。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/SpringBoot/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/SpringBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="Spring-Boot-使用"><a href="#Spring-Boot-使用" class="headerlink" title="Spring Boot 使用"></a>Spring Boot 使用</h2><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><h4 id="1-静态资源目录"><a href="#1-静态资源目录" class="headerlink" title="1. 静态资源目录"></a>1. 静态资源目录</h4><p>只要项目的静态资源放在类路径下以下目录，就可以正常访问</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">/static</span> <span class="hljs-string"></span><br><span class="hljs-attr">/public</span> <span class="hljs-string"></span><br><span class="hljs-attr">/resources</span> <span class="hljs-string"></span><br><span class="hljs-attr">/META-INF/resources</span><br></code></pre></td></tr></table></figure><h4 id="2-静态资源访问"><a href="#2-静态资源访问" class="headerlink" title="2. 静态资源访问"></a>2. 静态资源访问</h4><p>默认是当前项目的根路径 + 静态资源名</p><p>收到请求时，SpringBoot会先找Controller是否能处理，不能处理的所有请求再交给静态资源处理器</p><h4 id="3-静态资源配置"><a href="#3-静态资源配置" class="headerlink" title="3. 静态资源配置"></a>3. 静态资源配置</h4><p>配置访问前缀</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/static</span><br></code></pre></td></tr></table></figure><p>配置访问路径：配置完访问路径后默认访问路径失效</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/my</span><br></code></pre></td></tr></table></figure><h2 id="Spring-Boot-热更新"><a href="#Spring-Boot-热更新" class="headerlink" title="Spring Boot 热更新"></a>Spring Boot 热更新</h2><ol><li>引入依赖 <code>spring-boot-devtools</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>修改完之后按 <code>Ctrl + F9</code> 更新项目</li></ol><h2 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h2><blockquote><p>只有在容器中的组件，才能使用 @ConfigurationProperties</p></blockquote><p>使用配置绑定读取配置文件 <code>application.properties</code> 中的属性有以下2种方式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user.nickname</span>=<span class="hljs-string">张三</span><br><span class="hljs-attr">user.age</span>=<span class="hljs-string">18</span><br></code></pre></td></tr></table></figure><p><strong>@ConfigurationProperties + @Component</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String nickname;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@ConfigurationProperties + @EnableConfigurationProperties(User.class)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String nickname;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(User.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自动配置提示</strong></p><p>引入 <code>spring-boot-configuration-processor</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在SpringBoot打包时排除该依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>重启项目 在配置文件中键入自定义配置类的配置 产生提示</p><p><img src="https://img-blog.csdnimg.cn/20201228222953379.png" alt="在这里插入图片描述"></p><h2 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h2><blockquote><p>Spring Boot Ac0tuator</p></blockquote><h3 id="监控规则"><a href="#监控规则" class="headerlink" title="监控规则"></a>监控规则</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问 <code>域名/actuator/health</code> 可以查看服务的健康信息</p><p>访问规则： <code>域名/actuator/*</code></p><table><thead><tr><th><code>auditevents</code></th><th>Exposes audit events information for the current application. Requires an <code>AuditEventRepository</code> bean.</th></tr></thead><tbody><tr><td><code>beans</code></td><td>Displays a complete list of all the Spring beans in your application.</td></tr><tr><td><code>caches</code></td><td>Exposes available caches.</td></tr><tr><td><code>conditions</code></td><td>Shows the conditions that were evaluated on configuration and auto-configuration classes and the reasons why they did or did not match.</td></tr><tr><td><code>configprops</code></td><td>Displays a collated list of all <code>@ConfigurationProperties</code>.</td></tr><tr><td><code>env</code></td><td>Exposes properties from Spring’s <code>ConfigurableEnvironment</code>.</td></tr><tr><td><code>flyway</code></td><td>Shows any Flyway database migrations that have been applied. Requires one or more <code>Flyway</code> beans.</td></tr><tr><td><code>health</code></td><td>Shows application health information.</td></tr><tr><td><code>httptrace</code></td><td>Displays HTTP trace information (by default, the last 100 HTTP request-response exchanges). Requires an <code>HttpTraceRepository</code> bean.</td></tr><tr><td><code>info</code></td><td>Displays arbitrary application info.</td></tr><tr><td><code>integrationgraph</code></td><td>Shows the Spring Integration graph. Requires a dependency on <code>spring-integration-core</code>.</td></tr><tr><td><code>loggers</code></td><td>Shows and modifies the configuration of loggers in the application.</td></tr><tr><td><code>liquibase</code></td><td>Shows any Liquibase database migrations that have been applied. Requires one or more <code>Liquibase</code> beans.</td></tr><tr><td><code>metrics</code></td><td>Shows ‘metrics’ information for the current application.</td></tr><tr><td><code>mappings</code></td><td>Displays a collated list of all <code>@RequestMapping</code> paths.</td></tr><tr><td><code>scheduledtasks</code></td><td>Displays the scheduled tasks in your application.</td></tr><tr><td><code>sessions</code></td><td>Allows retrieval and deletion of user sessions from a Spring Session-backed session store. Requires a Servlet-based web application using Spring Session.</td></tr><tr><td><code>shutdown</code></td><td>Lets the application be gracefully shutdown. Disabled by default.</td></tr><tr><td><code>startup</code></td><td>Shows the startup steps data collected by the <code>ApplicationStartup</code>. Requires the <code>SpringApplication</code> to be configured with a <code>BufferingApplicationStartup</code>.</td></tr><tr><td><code>threaddump</code></td><td>Performs a thread dump.</td></tr></tbody></table><h3 id="开启Web端配置"><a href="#开启Web端配置" class="headerlink" title="开启Web端配置"></a>开启Web端配置</h3><p>SpringBoot默认不开启Web端的所有Endpoint，配置开启</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br></code></pre></td></tr></table></figure><p>配置health端点展示详细数据</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">management.endpoint.health.show-details</span>=<span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><p>配置info的信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">info.appName</span>=<span class="hljs-string">my-project</span><br><span class="hljs-attr">info.version</span>=<span class="hljs-string">1.0.0</span><br><span class="hljs-attr">info.mavenProjectName</span>=<span class="hljs-string">@project.artifactId@</span><br></code></pre></td></tr></table></figure><h3 id="定制Endpoint"><a href="#定制Endpoint" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHealthIndicator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHealthIndicator</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHealthCheck</span><span class="hljs-params">(Health.Builder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;count&quot;</span>, <span class="hljs-number">1</span>);<br>        map.put(<span class="hljs-string">&quot;ms&quot;</span>, <span class="hljs-number">30</span>);<br>        builder.status(Status.DOWN)<br>                .withDetail(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">100</span>)<br>                .withDetails(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问health后就有定制</p><p><img src="https://img-blog.csdnimg.cn/20201231201651587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Spring-Boot-Admin"><a href="#Spring-Boot-Admin" class="headerlink" title="Spring Boot Admin"></a>Spring Boot Admin</h3><h4 id="Spring-Boot-Admin-Server"><a href="#Spring-Boot-Admin-Server" class="headerlink" title="Spring Boot Admin Server"></a>Spring Boot Admin Server</h4><p>新建一个SpringBoot项目 加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在启动类注解上增加 <code>@EnableAdminServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAdminServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBootAdminServerApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MyBootAdminServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改端口为7000</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">7000</span><br></code></pre></td></tr></table></figure><h4 id="Spring-Boot-Admin-Client"><a href="#Spring-Boot-Admin-Client" class="headerlink" title="Spring Boot Admin Client"></a>Spring Boot Admin Client</h4><p>增加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改配置文件使其指向 <code>Spring Boot Admin Server</code> 的地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">my-demo-app</span><br><span class="hljs-attr">spring.boot.admin.client.url</span>=<span class="hljs-string">http://127.0.0.1:7000</span><br><span class="hljs-attr">spring.boot.admin.client.instance.prefer-ip</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h4 id="启动项目测试"><a href="#启动项目测试" class="headerlink" title="启动项目测试"></a>启动项目测试</h4><p>输入地址 <a href="http://127.0.0.1:7000/">http://127.0.0.1:7000</a></p><p><img src="https://img-blog.csdnimg.cn/20201231210122929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Spring-Boot-启动源码解析"><a href="#Spring-Boot-启动源码解析" class="headerlink" title="Spring Boot 启动源码解析"></a>Spring Boot 启动源码解析</h2><h3 id="总体概览"><a href="#总体概览" class="headerlink" title="总体概览"></a>总体概览</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个新的实例，这个应用程序的上下文将要从指定的来源加载Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br>    <span class="hljs-comment">// 资源初始化资源加载器，默认为null</span><br><span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>    <span class="hljs-comment">// 断言主要加载资源类不能为 null，否则报错</span><br>Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br>    <span class="hljs-comment">// 初始化主要加载资源类集合并去重</span><br><span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));<br>    <span class="hljs-comment">// 推断当前 WEB 应用类型，一共有三种：NONE,SERVLET,REACTIVE</span><br><span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>    <span class="hljs-comment">// 设置应用上线文初始化器</span><br>    <span class="hljs-comment">// 从&quot;META-INF/spring.factories&quot;读取ApplicationContextInitializer类的实例名称集合并去重，并使用set去重（一共7个）</span><br>setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));<br>    <span class="hljs-comment">// 设置监听器</span><br>    <span class="hljs-comment">// 从&quot;META-INF/spring.factories&quot;读取ApplicationListener类的实例名称集合并去重，并使用set去重（一共11个）</span><br>setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<br>    <span class="hljs-comment">// 推断主入口应用类，通过当前调用栈，获取Main方法所在类，并赋值给mainApplicationClass</span><br><span class="hljs-built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br>    <span class="hljs-comment">// 创建并启动计时监控类</span><br><span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>stopWatch.start();<br>    <span class="hljs-comment">// 初始化应用上下文和异常报告集合</span><br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 设置系统属性“java.awt.headless”的值，默认为true，用于运行headless服务器，进行简单的图像处理</span><br>    <span class="hljs-comment">// 多用于在缺少显示屏、键盘或者鼠标时的系统配置，很多监控工具如jconsole 需要将该值设置为true</span><br>configureHeadlessProperty();<br>    <span class="hljs-comment">// 1.创建所有spring运行监听器并发布应用启动事件</span><br>    <span class="hljs-comment">// 获取SpringApplicationRunListener类型的实例EventPublishingRunListener</span><br>    <span class="hljs-comment">// 并封装进SpringApplicationRunListeners，然后返回SpringApplicationRunListeners</span><br>    <span class="hljs-comment">// 说的简单点，getRunListeners就是准备好了运行时监听器EventPublishingRunListener。</span><br><span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br>listeners.starting();<br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 初始化默认应用参数类</span><br><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br>        <span class="hljs-comment">// 2.根据运行监听器和应用参数来准备spring环境</span><br><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, applicationArguments);<br>        <span class="hljs-comment">// 将要忽略的bean的参数打开</span><br>configureIgnoreBeanInfo(environment);<br>        <span class="hljs-comment">// 创建banner打印类</span><br><span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> printBanner(environment);<br>        <span class="hljs-comment">// 3.创建应用上下文，可以理解为创建一个容器</span><br>context = createApplicationContext();<br>        <span class="hljs-comment">// 准备异常报告器，用来支持报告关于启动的错误</span><br>exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; ConfigurableApplicationContext.class &#125;, context);<br>        <span class="hljs-comment">// 4.准备应用上下文，将启动类注入容器，为后续开启自动化提供基础</span><br>prepareContext(context, environment, listeners, applicationArguments, printedBanner);<br>        <span class="hljs-comment">// 5.刷新应用上下文</span><br>refreshContext(context);<br>        <span class="hljs-comment">// 应用上下文刷新后置处理，做一些扩展功能</span><br>afterRefresh(context, applicationArguments);<br>        <span class="hljs-comment">// 停止计时监控类</span><br>stopWatch.stop();<br>        <span class="hljs-comment">// 输出日志记录执行主类名、时间信息</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);<br>&#125;<br>        <span class="hljs-comment">// 发布应用上下文启动监听事件</span><br>listeners.started(context);<br>        <span class="hljs-comment">// 执行所有的Runner运行器</span><br>callRunners(context, applicationArguments);<br>&#125;<span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>handleRunFailure(context, ex, exceptionReporters, listeners);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 发布应用上下文就绪事件</span><br>listeners.running(context);<br>&#125;<span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>handleRunFailure(context, ex, exceptionReporters, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br>    <span class="hljs-comment">// 返回应用上下文</span><br><span class="hljs-keyword">return</span> context;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-创建所有spring运行监听器并发布应用启动事件"><a href="#1-创建所有spring运行监听器并发布应用启动事件" class="headerlink" title="1.创建所有spring运行监听器并发布应用启动事件"></a>1.创建所有spring运行监听器并发布应用启动事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br>listeners.starting();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* --- SpringApplicationRunListeners listeners = getRunListeners(args) --- */</span><br><span class="hljs-comment">// 创建 Spring 监听器</span><br><span class="hljs-keyword">private</span> SpringApplicationRunListeners <span class="hljs-title function_">getRunListeners</span><span class="hljs-params">(String[] args)</span> &#123;<br>Class&lt;?&gt;[] types = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationRunListeners</span>(logger,<br>getSpringFactoriesInstances(SpringApplicationRunListener.class, types, <span class="hljs-built_in">this</span>, args));<br>&#125;<br><br><span class="hljs-comment">// SpringApplicationRunListeners 构造方法，将日志和监听器们初始化</span><br>SpringApplicationRunListeners(Log log, Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SpringApplicationRunListener</span>&gt; listeners) &#123;<br><span class="hljs-built_in">this</span>.log = log;<br><span class="hljs-built_in">this</span>.listeners = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(listeners);<br>&#125;<br><br><span class="hljs-comment">/* --- listeners.starting() --- */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">starting</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//循环遍历获取监听器</span><br><span class="hljs-keyword">for</span> (SpringApplicationRunListener listener : <span class="hljs-built_in">this</span>.listeners) &#123;<br>listener.starting();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 此处的监听器可以看出是事件发布监听器，主要用来发布启动事件</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">starting</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//这里是创建application事件 &#x27;applicationStartingEvent&#x27;</span><br><span class="hljs-built_in">this</span>.initialMulticaster.multicastEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationStartingEvent</span>(<span class="hljs-built_in">this</span>.application, <span class="hljs-built_in">this</span>.args));<br>&#125;<br><br><span class="hljs-comment">// applicationStartingEvent是springboot框架最早执行的监听器，</span><br><span class="hljs-comment">// 在该监听器执行started方法时，会继续发布事件，主要是基于spring的事件机制</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">multicastEvent</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ApplicationEvent event, <span class="hljs-meta">@Nullable</span> ResolvableType eventType)</span> &#123;<br>    <span class="hljs-type">ResolvableType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> (eventType != <span class="hljs-literal">null</span> ? eventType : resolveDefaultEventType(event));<br>    <span class="hljs-comment">//获取线程池，如果为空则同步处理。这里线程池为空，还未初始化</span><br>    <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> getTaskExecutor();<br>    <span class="hljs-keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;<br>        <span class="hljs-keyword">if</span> (executor != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 异步发送事件</span><br>            executor.execute(() -&gt; invokeListener(listener, event));<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 同步发送事件</span><br>            invokeListener(listener, event);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-根据运行监听器和应用参数来准备spring环境"><a href="#2-根据运行监听器和应用参数来准备spring环境" class="headerlink" title="2.根据运行监听器和应用参数来准备spring环境"></a>2.根据运行监听器和应用参数来准备spring环境</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, applicationArguments);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ConfigurableEnvironment <span class="hljs-title function_">prepareEnvironment</span><span class="hljs-params">(SpringApplicationRunListeners listeners,</span><br><span class="hljs-params">ApplicationArguments applicationArguments)</span> &#123;<br><span class="hljs-comment">// 获取或者创建应用环境</span><br><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> getOrCreateEnvironment();<br>    <span class="hljs-comment">// 配置应用环境，配置propertySource和activeProfiles</span><br>configureEnvironment(environment, applicationArguments.getSourceArgs());<br>    <span class="hljs-comment">// listeners环境准备，广播ApplicationEnvironmentPreparedEvent</span><br>ConfigurationPropertySources.attach(environment);<br>listeners.environmentPrepared(environment);<br>    <span class="hljs-comment">// 将环境绑定给当前应用程序</span><br>bindToSpringApplication(environment);<br>    <span class="hljs-comment">// 对当前的环境类型进行判断，如果不一致进行转换</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isCustomEnvironment) &#123;<br>environment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnvironmentConverter</span>(getClassLoader()).convertEnvironmentIfNecessary(environment,<br>deduceEnvironmentClass());<br>&#125;<br>    <span class="hljs-comment">// 配置propertySource对它自己的递归依赖</span><br>ConfigurationPropertySources.attach(environment);<br><span class="hljs-keyword">return</span> environment;<br>&#125;<br><br><span class="hljs-comment">// 获取或者创建应用环境，根据应用程序的类型可以分为servlet环境、标准环境(特殊的非web环境)和响应式环境</span><br><span class="hljs-keyword">private</span> ConfigurableEnvironment <span class="hljs-title function_">getOrCreateEnvironment</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//存在则直接返回</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.environment != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.environment;<br>    &#125;<br>    <span class="hljs-comment">//根据webApplicationType创建对应的Environment</span><br>    <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.webApplicationType) &#123;<br>        <span class="hljs-keyword">case</span> SERVLET:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardServletEnvironment</span>();<br>        <span class="hljs-keyword">case</span> REACTIVE:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardReactiveWebEnvironment</span>();<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEnvironment</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//配置应用环境</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureEnvironment</span><span class="hljs-params">(ConfigurableEnvironment environment, String[] args)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.addConversionService) &#123;<br><span class="hljs-type">ConversionService</span> <span class="hljs-variable">conversionService</span> <span class="hljs-operator">=</span> ApplicationConversionService.getSharedInstance();<br>environment.setConversionService((ConfigurableConversionService) conversionService);<br>&#125;<br>    <span class="hljs-comment">//配置property sources</span><br>configurePropertySources(environment, args);<br>    <span class="hljs-comment">//配置profiles</span><br>configureProfiles(environment, args);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-创建应用上下文，可以理解为创建一个容器"><a href="#3-创建应用上下文，可以理解为创建一个容器" class="headerlink" title="3.创建应用上下文，可以理解为创建一个容器"></a>3.创建应用上下文，可以理解为创建一个容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">context = createApplicationContext();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> ConfigurableApplicationContext <span class="hljs-title function_">createApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    Class&lt;?&gt; contextClass = <span class="hljs-built_in">this</span>.applicationContextClass;<br>    <span class="hljs-keyword">if</span> (contextClass == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 根据不同的应用类型初始化不同的上下文应用类</span><br>            <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.webApplicationType) &#123;<br>                <span class="hljs-keyword">case</span> SERVLET:<br>                    contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> REACTIVE:<br>                    contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br>                <span class="hljs-string">&quot;Unable create a default ApplicationContext, please specify an ApplicationContextClass&quot;</span>, ex);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-准备应用上下文，将启动类注入容器，为后续开启自动化提供基础"><a href="#4-准备应用上下文，将启动类注入容器，为后续开启自动化提供基础" class="headerlink" title="4.准备应用上下文，将启动类注入容器，为后续开启自动化提供基础"></a>4.准备应用上下文，将启动类注入容器，为后续开启自动化提供基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">prepareContext(context, environment, listeners, applicationArguments, printedBanner);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareContext</span><span class="hljs-params">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,</span><br><span class="hljs-params">SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;<br>    <span class="hljs-comment">// 应用上下文的environment</span><br>    context.setEnvironment(environment);<br>    <span class="hljs-comment">// 应用上下文后处理</span><br>    postProcessApplicationContext(context);<br>    <span class="hljs-comment">// 为上下文应用所有初始化器，执行容器中的applicationContextInitializer(spring.factories的实例)</span><br>    <span class="hljs-comment">// 将所有的初始化对象放置到context对象中</span><br>    applyInitializers(context);<br>    <span class="hljs-comment">// 触发所有SpringApplicationRunListener监听器的ContextPrepared事件方法。添加所有的事件监听器</span><br>    listeners.contextPrepared(context);<br>    <span class="hljs-comment">// 记录启动日志</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>        logStartupInfo(context.getParent() == <span class="hljs-literal">null</span>);<br>        logStartupProfileInfo(context);<br>    &#125;<br>    <span class="hljs-comment">// 注册启动参数bean，将容器指定的参数封装成bean，注入容器</span><br>    <span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> context.getBeanFactory();<br>    beanFactory.registerSingleton(<span class="hljs-string">&quot;springApplicationArguments&quot;</span>, applicationArguments);<br>    <span class="hljs-comment">// 设置banner</span><br>    <span class="hljs-keyword">if</span> (printedBanner != <span class="hljs-literal">null</span>) &#123;<br>        beanFactory.registerSingleton(<span class="hljs-string">&quot;springBootBanner&quot;</span>, printedBanner);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> DefaultListableBeanFactory) &#123;<br>        ((DefaultListableBeanFactory) beanFactory)<br>        .setAllowBeanDefinitionOverriding(<span class="hljs-built_in">this</span>.allowBeanDefinitionOverriding);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lazyInitialization) &#123;<br>        context.addBeanFactoryPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyInitializationBeanFactoryPostProcessor</span>());<br>    &#125;<br>    <span class="hljs-comment">// 加载所有资源，指的是启动器指定的参数</span><br>    Set&lt;Object&gt; sources = getAllSources();<br>    Assert.notEmpty(sources, <span class="hljs-string">&quot;Sources must not be empty&quot;</span>);<br>    <span class="hljs-comment">// 将bean加载到上下文中</span><br>    load(context, sources.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]));<br>    <span class="hljs-comment">// 触发所有springapplicationRunListener监听器的contextLoaded事件方法，</span><br>    listeners.contextLoaded(context);<br>&#125;<br><br><span class="hljs-comment">// 这里没有做任何的处理过程，因为beanNameGenerator和resourceLoader默认为空，可以方便后续做扩展处理</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessApplicationContext</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.beanNameGenerator != <span class="hljs-literal">null</span>) &#123;<br>        context.getBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,<br>                                                   <span class="hljs-built_in">this</span>.beanNameGenerator);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.resourceLoader != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (context <span class="hljs-keyword">instanceof</span> GenericApplicationContext) &#123;<br>            ((GenericApplicationContext) context).setResourceLoader(<span class="hljs-built_in">this</span>.resourceLoader);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (context <span class="hljs-keyword">instanceof</span> DefaultResourceLoader) &#123;<br>            ((DefaultResourceLoader) context).setClassLoader(<span class="hljs-built_in">this</span>.resourceLoader.getClassLoader());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.addConversionService) &#123;<br>        context.getBeanFactory().setConversionService(ApplicationConversionService.getSharedInstance());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 将启动器类加载到spring容器中，为后续的自动化配置奠定基础，之前看到的很多注解也与此相关</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">load</span><span class="hljs-params">(ApplicationContext context, Object[] sources)</span> &#123;<br>    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>        logger.debug(<span class="hljs-string">&quot;Loading source &quot;</span> + StringUtils.arrayToCommaDelimitedString(sources));<br>    &#125;<br>    <span class="hljs-type">BeanDefinitionLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> createBeanDefinitionLoader(getBeanDefinitionRegistry(context), sources);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.beanNameGenerator != <span class="hljs-literal">null</span>) &#123;<br>        loader.setBeanNameGenerator(<span class="hljs-built_in">this</span>.beanNameGenerator);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.resourceLoader != <span class="hljs-literal">null</span>) &#123;<br>        loader.setResourceLoader(<span class="hljs-built_in">this</span>.resourceLoader);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.environment != <span class="hljs-literal">null</span>) &#123;<br>        loader.setEnvironment(<span class="hljs-built_in">this</span>.environment);<br>    &#125;<br>    loader.load();<br>&#125;<br><br><span class="hljs-comment">// springboot会优先选择groovy加载方式，找不到在选择java方式</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">load</span><span class="hljs-params">(Class&lt;?&gt; source)</span> &#123;<br>    <span class="hljs-keyword">if</span> (isGroovyPresent() &amp;&amp; GroovyBeanDefinitionSource.class.isAssignableFrom(source)) &#123;<br>        <span class="hljs-comment">// Any GroovyLoaders added in beans&#123;&#125; DSL can contribute beans here</span><br>        <span class="hljs-type">GroovyBeanDefinitionSource</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);<br>        load(loader);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isComponent(source)) &#123;<br>        <span class="hljs-built_in">this</span>.annotatedReader.register(source);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-刷新应用上下文"><a href="#5-刷新应用上下文" class="headerlink" title="5.刷新应用上下文"></a>5.刷新应用上下文</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">refreshContext(context);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshContext</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>    refresh(context);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.registerShutdownHook) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            context.registerShutdownHook();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (AccessControlException ex) &#123;<br>            <span class="hljs-comment">// Not allowed in some environments.</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.startupShutdownMonitor) &#123;<br>        <span class="hljs-comment">// 刷新上下文环境，初始化上下文环境，对系统的环境变量或者系统属性进行准备和校验</span><br>        prepareRefresh();<br><br>        <span class="hljs-comment">// 初始化beanfactory，解析xml，相当于之前的xmlBeanfactory操作</span><br>        <span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> obtainFreshBeanFactory();<br><br>        <span class="hljs-comment">// 为上下文准备beanfactory，对beanFactory的各种功能进行填充，</span><br>        <span class="hljs-comment">// 如@autowired，设置spel表达式解析器，设置编辑注册器，添加applicationContextAwareProcessor处理器等等</span><br>        prepareBeanFactory(beanFactory);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 提供子类覆盖的额外处理，即子类处理自定义的beanfactorypostProcess</span><br>            postProcessBeanFactory(beanFactory);<br><br>            <span class="hljs-comment">// 激活各种beanfactory处理器</span><br>            invokeBeanFactoryPostProcessors(beanFactory);<br><br>            <span class="hljs-comment">// 注册拦截bean创建的bean处理器，即注册beanPostProcessor</span><br>            registerBeanPostProcessors(beanFactory);<br><br>            <span class="hljs-comment">// 初始化上下文中的资源文件如国际化文件的处理</span><br>            initMessageSource();<br><br>            <span class="hljs-comment">// 初始化上下文事件广播器</span><br>            initApplicationEventMulticaster();<br><br>            <span class="hljs-comment">// 给子类扩展初始化其他bean</span><br>            onRefresh();<br><br>            <span class="hljs-comment">// 在所有的bean中查找listener bean,然后 注册到广播器中</span><br>            registerListeners();<br><br>            <span class="hljs-comment">// 初始化剩余的非懒惰的bean，即初始化非延迟加载的bean</span><br>            finishBeanFactoryInitialization(beanFactory);<br><br>            <span class="hljs-comment">// 发完成刷新过程，通知声明周期处理器刷新过程，同时发出ContextRefreshEvent通知别人</span><br>            finishRefresh();<br>        &#125;<br><br>        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>            <span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;<br>                logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - &quot;</span> +<br>                            <span class="hljs-string">&quot;cancelling refresh attempt: &quot;</span> + ex);<br>            &#125;<br><br>            <span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span><br>            destroyBeans();<br><br>            <span class="hljs-comment">// Reset &#x27;active&#x27; flag.</span><br>            cancelRefresh(ex);<br><br>            <span class="hljs-comment">// Propagate exception to caller.</span><br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br><br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// Reset common introspection caches in Spring&#x27;s core, since we</span><br>            <span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span><br>            resetCommonCaches();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-Boot-自动配置原理"><a href="#Spring-Boot-自动配置原理" class="headerlink" title="Spring Boot 自动配置原理"></a>Spring Boot 自动配置原理</h2><p><img src="https://img-blog.csdnimg.cn/2020122821461787.png" alt="在这里插入图片描述"></p><h3 id="自动包配置原理"><a href="#自动包配置原理" class="headerlink" title="自动包配置原理"></a>自动包配置原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span> -&gt; <span class="hljs-meta">@EnableAutoConfiguration</span> -&gt; <span class="hljs-meta">@AutoConfigurationPackage</span> -&gt; <br><span class="hljs-meta">@Import(AutoConfigurationPackages.Registrar.class)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取到标注类上的包名，将包名下的所有组件注册进容器</span><br>register(registry, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageImports</span>(metadata).getPackageNames().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]));<br></code></pre></td></tr></table></figure><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p>spring.factories 是帮助 SpringBoot 项目包以外的 Bean 注册到 SpringBoot 项目的 Spring 容器的。</p><p>由于 @ComponentScan 注解只能扫描 SpringBoot 项目包内的 Bean 并注册到 Spring 容器中，因此需要 @EnableAutoConfiguration 来注册项目包外的bean，而 spring.factories 则是用来记录项目包外需要注册的bean类名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span> -&gt; <span class="hljs-meta">@EnableAutoConfiguration</span> -&gt; <span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取自动配置的入口</span><br>getAutoConfigurationEntry(annotationMetadata);<br><span class="hljs-comment">// 获取所有候选的配置    </span><br>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);<br><span class="hljs-comment">// META-INF/spring.factories 里面写了 SpringBoot 一启动就需加载的所有配置类</span><br>Enumeration&lt;URL&gt; urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);<br></code></pre></td></tr></table></figure><p><strong>按需开启配置项：以DispatcherServlet为例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-comment">// 在Servlet的Web模块才生效</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-comment">// 容器中拥有DispatcherServlet这个类才生效</span><br><span class="hljs-meta">@ConditionalOnClass(DispatcherServlet.class)</span><br><span class="hljs-comment">// 在 ServletWebServerFactoryAutoConfiguration 后配置</span><br><span class="hljs-meta">@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServletAutoConfiguration</span>&#123;<br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br>    <span class="hljs-comment">// 匹配自定义规则，只有满足这些条件才会将Bean注入进来</span><br><span class="hljs-meta">@Conditional(DefaultDispatcherServletCondition.class)</span><br><span class="hljs-meta">@ConditionalOnClass(ServletRegistration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(WebMvcProperties.class)</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DispatcherServletConfiguration</span> &#123;<br>        <span class="hljs-meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br>        <span class="hljs-keyword">public</span> DispatcherServlet <span class="hljs-title function_">dispatcherServlet</span><span class="hljs-params">(WebMvcProperties webMvcProperties)</span> &#123;<br>            <span class="hljs-type">DispatcherServlet</span> <span class="hljs-variable">dispatcherServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatcherServlet</span>();<br>            dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());<br>            dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());<br>            dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());<br>            dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());<br>            dispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());<br>            <span class="hljs-keyword">return</span> dispatcherServlet;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自动配置启动流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">prepareContext -&gt; load<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">load</span><span class="hljs-params">(Object source)</span> &#123;<br>Assert.notNull(source, <span class="hljs-string">&quot;Source must not be null&quot;</span>);<br>    <span class="hljs-comment">// 如果是class类型，启用注解类型</span><br><span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> Class&lt;?&gt;) &#123;<br><span class="hljs-keyword">return</span> load((Class&lt;?&gt;) source);<br>&#125;<br>    <span class="hljs-comment">// 如果是resource类型，启动xml解析</span><br><span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> Resource) &#123;<br><span class="hljs-keyword">return</span> load((Resource) source);<br>&#125;<br>    <span class="hljs-comment">// 如果是package类型，启用扫描包，例如@ComponentScan</span><br><span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> Package) &#123;<br><span class="hljs-keyword">return</span> load((Package) source);<br>&#125;<br>    <span class="hljs-comment">// 如果是字符串类型，直接加载</span><br><span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> CharSequence) &#123;<br><span class="hljs-keyword">return</span> load((CharSequence) source);<br>&#125;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid source type &quot;</span> + source.getClass());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">load</span><span class="hljs-params">(Class&lt;?&gt; source)</span> &#123;<br>    <span class="hljs-comment">// 判断是否使用groovy脚本</span><br>    <span class="hljs-keyword">if</span> (isGroovyPresent() &amp;&amp; GroovyBeanDefinitionSource.class.isAssignableFrom(source)) &#123;<br>        <span class="hljs-type">GroovyBeanDefinitionSource</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);<br>        load(loader);<br>    &#125;<br>    <span class="hljs-comment">// 如果数据来源合法 则注册Bean</span><br>    <span class="hljs-keyword">if</span> (isEligible(source)) &#123;<br>        <span class="hljs-built_in">this</span>.annotatedReader.register(source);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入 <code>this.annotatedReader.register(source)</code> 追溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从给定的bean class中注册一个bean对象，从注解中找到相关的元数据</span><br><span class="hljs-comment"> * 将启动类注册成为一个 BeanDefination</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">doRegisterBean</span><span class="hljs-params">(Class&lt;T&gt; beanClass, <span class="hljs-meta">@Nullable</span> String name,</span><br><span class="hljs-params">      <span class="hljs-meta">@Nullable</span> Class&lt;? extends Annotation&gt;[] qualifiers, <span class="hljs-meta">@Nullable</span> Supplier&lt;T&gt; supplier,</span><br><span class="hljs-params">      <span class="hljs-meta">@Nullable</span> BeanDefinitionCustomizer[] customizers)</span> &#123;<br><br>   <span class="hljs-type">AnnotatedGenericBeanDefinition</span> <span class="hljs-variable">abd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotatedGenericBeanDefinition</span>(beanClass);<br>   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;<br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br><br>   abd.setInstanceSupplier(supplier);<br>   <span class="hljs-type">ScopeMetadata</span> <span class="hljs-variable">scopeMetadata</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);<br>   abd.setScope(scopeMetadata.getScopeName());<br>   <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> (name != <span class="hljs-literal">null</span> ? name : <span class="hljs-built_in">this</span>.beanNameGenerator.generateBeanName(abd, <span class="hljs-built_in">this</span>.registry));<br><br>   AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);<br>   <span class="hljs-keyword">if</span> (qualifiers != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; qualifier : qualifiers) &#123;<br>         <span class="hljs-keyword">if</span> (Primary.class == qualifier) &#123;<br>            abd.setPrimary(<span class="hljs-literal">true</span>);<br>         &#125;<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Lazy.class == qualifier) &#123;<br>            abd.setLazyInit(<span class="hljs-literal">true</span>);<br>         &#125;<br>         <span class="hljs-keyword">else</span> &#123;<br>            abd.addQualifier(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AutowireCandidateQualifier</span>(qualifier));<br>         &#125;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (customizers != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (BeanDefinitionCustomizer customizer : customizers) &#123;<br>         customizer.customize(abd);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-type">BeanDefinitionHolder</span> <span class="hljs-variable">definitionHolder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(abd, beanName);<br>   definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="hljs-built_in">this</span>.registry);<br>   BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="hljs-built_in">this</span>.registry);<br>&#125;<br></code></pre></td></tr></table></figure><p>刷新容器自动装配入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.startupShutdownMonitor) &#123;<br>        <span class="hljs-comment">// 此处是自动装配的入口</span><br>        invokeBeanFactoryPostProcessors(beanFactory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在invokeBeanFactoryPostProcessors方法中完成bean的实例化和执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeBeanFactoryPostProcessors</span><span class="hljs-params">(</span><br><span class="hljs-params">    ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> &#123;<br>    <span class="hljs-comment">// 开始遍历三个内部类，如果属于BeanDefinitionRegistryPostProcessor子类，加入到bean注册的集合</span><br>    <span class="hljs-comment">// 否则加入到regularPostProcessors</span><br>    <span class="hljs-keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;<br>        <span class="hljs-keyword">if</span> (postProcessor <span class="hljs-keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;<br>            <span class="hljs-type">BeanDefinitionRegistryPostProcessor</span> <span class="hljs-variable">registryProcessor</span> <span class="hljs-operator">=</span><br>                (BeanDefinitionRegistryPostProcessor) postProcessor;<br>            <span class="hljs-comment">//* 进入此方法的实现 ConfigurationClassPostProcessor</span><br>            registryProcessor.postProcessBeanDefinitionRegistry(registry); <br>            registryProcessors.add(registryProcessor);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            regularPostProcessors.add(postProcessor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">postProcessBeanDefinitionRegistry -&gt; processConfigBeanDefinitions -&gt; parser.parse<br></code></pre></td></tr></table></figure><p>开始执行自动配置逻辑（启动类指定的配置，非默认配置），最终会在ConfigurationClassParser类中，此类是所有配置类的解析类，所有的解析逻辑在parser.parse(candidates)中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> &#123;<br>    <span class="hljs-keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;<br>        <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> holder.getBeanDefinition();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (bd <span class="hljs-keyword">instanceof</span> AnnotatedBeanDefinition) &#123;<br>                <span class="hljs-comment">//* 解析逻辑</span><br>                parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bd <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;<br>                parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                parse(bd.getBeanClassName(), holder.getBeanName());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionStoreException</span>(<br>                <span class="hljs-string">&quot;Failed to parse configuration class [&quot;</span> + bd.getBeanClassName() + <span class="hljs-string">&quot;]&quot;</span>, ex);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//* 执行配置类</span><br>    <span class="hljs-built_in">this</span>.deferredImportSelectorHandler.process();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">parse -&gt; processConfigurationClass -&gt; doProcessConfigurationClass<br></code></pre></td></tr></table></figure><p>跟进doProcessConfigurationClass方法，此方式是支持注解配置的核心逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> SourceClass <span class="hljs-title function_">doProcessConfigurationClass</span><span class="hljs-params">(ConfigurationClass configClass, SourceClass sourceClass)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-comment">// 处理内部类逻辑，由于传来的参数是启动类，并不包含内部类，所以跳过</span><br>    <span class="hljs-keyword">if</span> (configClass.getMetadata().isAnnotated(Component.class.getName())) &#123;<br>        <span class="hljs-comment">// Recursively process any member (nested) classes first</span><br>        processMemberClasses(configClass, sourceClass);<br>    &#125;<br><br>    <span class="hljs-comment">// Process any @PropertySource annotations</span><br>    <span class="hljs-comment">// 针对属性配置的解析</span><br>    <span class="hljs-keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(<br>        sourceClass.getMetadata(), PropertySources.class,<br>        org.springframework.context.annotation.PropertySource.class)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.environment <span class="hljs-keyword">instanceof</span> ConfigurableEnvironment) &#123;<br>            processPropertySource(propertySource);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;Ignoring @PropertySource annotation on [&quot;</span> + sourceClass.getMetadata().getClassName() +<br>                        <span class="hljs-string">&quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Process any @ComponentScan annotations</span><br>    <span class="hljs-comment">// 这里是根据启动类@ComponentScan注解来扫描项目中的bean</span><br>    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(<br>        sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);<br>    <span class="hljs-keyword">if</span> (!componentScans.isEmpty() &amp;&amp;<br>        !<span class="hljs-built_in">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;<br><br>        <span class="hljs-keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;<br>            <span class="hljs-comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span><br>            <span class="hljs-comment">//遍历项目中的bean，如果是注解定义的bean，则进一步解析</span><br>            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =<br>                <span class="hljs-built_in">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());<br>            <span class="hljs-comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span><br>            <span class="hljs-keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;<br>                <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">bdCand</span> <span class="hljs-operator">=</span> holder.getBeanDefinition().getOriginatingBeanDefinition();<br>                <span class="hljs-keyword">if</span> (bdCand == <span class="hljs-literal">null</span>) &#123;<br>                    bdCand = holder.getBeanDefinition();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="hljs-built_in">this</span>.metadataReaderFactory)) &#123;<br>                    <span class="hljs-comment">//递归解析，所有的bean,如果有注解，会进一步解析注解中包含的bean</span><br>                    parse(bdCand.getBeanClassName(), holder.getBeanName());<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Process any @Import annotations</span><br>    <span class="hljs-comment">// 递归解析，获取导入的配置类，很多情况下，导入的配置类中会同样包含导入类注解</span><br>    processImports(configClass, sourceClass, getImports(sourceClass), <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// Process any @ImportResource annotations</span><br>    <span class="hljs-comment">//解析@ImportResource配置类</span><br>    <span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">importResource</span> <span class="hljs-operator">=</span><br>        AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);<br>    <span class="hljs-keyword">if</span> (importResource != <span class="hljs-literal">null</span>) &#123;<br>        String[] resources = importResource.getStringArray(<span class="hljs-string">&quot;locations&quot;</span>);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BeanDefinitionReader</span>&gt; readerClass = importResource.getClass(<span class="hljs-string">&quot;reader&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String resource : resources) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resolvedResource</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.environment.resolveRequiredPlaceholders(resource);<br>            configClass.addImportedResource(resolvedResource, readerClass);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Process individual @Bean methods</span><br>    <span class="hljs-comment">//处理@Bean注解修饰的类</span><br>    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);<br>    <span class="hljs-keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;<br>        configClass.addBeanMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanMethod</span>(methodMetadata, configClass));<br>    &#125;<br><br>    <span class="hljs-comment">// Process default methods on interfaces</span><br>    <span class="hljs-comment">// 处理接口中的默认方法</span><br>    processInterfaces(configClass, sourceClass);<br><br>    <span class="hljs-comment">// Process superclass, if any</span><br>    <span class="hljs-comment">//如果该类有父类，则继续返回，上层方法判断不为空，则继续递归执行</span><br>    <span class="hljs-keyword">if</span> (sourceClass.getMetadata().hasSuperClass()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">superclass</span> <span class="hljs-operator">=</span> sourceClass.getMetadata().getSuperClassName();<br>        <span class="hljs-keyword">if</span> (superclass != <span class="hljs-literal">null</span> &amp;&amp; !superclass.startsWith(<span class="hljs-string">&quot;java&quot;</span>) &amp;&amp;<br>            !<span class="hljs-built_in">this</span>.knownSuperclasses.containsKey(superclass)) &#123;<br>            <span class="hljs-built_in">this</span>.knownSuperclasses.put(superclass, configClass);<br>            <span class="hljs-comment">// Superclass found, return its annotation metadata and recurse</span><br>            <span class="hljs-keyword">return</span> sourceClass.getSuperClass();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// No superclass -&gt; processing is complete</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看获取配置类的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">processImports(configClass, sourceClass, getImports(sourceClass), <span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">private</span> Set&lt;SourceClass&gt; <span class="hljs-title function_">getImports</span><span class="hljs-params">(SourceClass sourceClass)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    Set&lt;SourceClass&gt; imports = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>    Set&lt;SourceClass&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>    collectImports(sourceClass, imports, visited);<br>    <span class="hljs-keyword">return</span> imports;<br>&#125;<br><span class="hljs-comment">// 所有的bean都以导入的方式被加载进去</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">collectImports</span><span class="hljs-params">(SourceClass sourceClass, Set&lt;SourceClass&gt; imports, Set&lt;SourceClass&gt; visited)</span><br>    <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-keyword">if</span> (visited.add(sourceClass)) &#123;<br>        <span class="hljs-keyword">for</span> (SourceClass annotation : sourceClass.getAnnotations()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">annName</span> <span class="hljs-operator">=</span> annotation.getMetadata().getClassName();<br>            <span class="hljs-keyword">if</span> (!annName.equals(Import.class.getName())) &#123;<br>                <span class="hljs-comment">// 递归</span><br>                collectImports(annotation, imports, visited);<br>            &#125;<br>        &#125;<br>        imports.addAll(sourceClass.getAnnotationAttributes(Import.class.getName(), <span class="hljs-string">&quot;value&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续回到ConfigurationClassParser中的parse方法中的最后一行,继续跟进该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.deferredImportSelectorHandler.process()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">()</span> &#123;<br>    List&lt;DeferredImportSelectorHolder&gt; deferredImports = <span class="hljs-built_in">this</span>.deferredImportSelectors;<br>    <span class="hljs-built_in">this</span>.deferredImportSelectors = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (deferredImports != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">DeferredImportSelectorGroupingHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeferredImportSelectorGroupingHandler</span>();<br>            deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);<br>            deferredImports.forEach(handler::register);<br>            handler.processGroupImports();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-built_in">this</span>.deferredImportSelectors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processGroupImports</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (DeferredImportSelectorGrouping grouping : <span class="hljs-built_in">this</span>.groupings.values()) &#123;<br>        grouping.getImports().forEach(entry -&gt; &#123;<br>            <span class="hljs-type">ConfigurationClass</span> <span class="hljs-variable">configurationClass</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.configurationClasses.get(<br>                entry.getMetadata());<br>            <span class="hljs-keyword">try</span> &#123;<br>                processImports(configurationClass, asSourceClass(configurationClass),<br>                               asSourceClasses(entry.getImportClassName()), <span class="hljs-literal">false</span>);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;<br>                <span class="hljs-keyword">throw</span> ex;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionStoreException</span>(<br>                    <span class="hljs-string">&quot;Failed to process import candidates for configuration class [&quot;</span> +<br>                    configurationClass.getMetadata().getClassName() + <span class="hljs-string">&quot;]&quot;</span>, ex);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Iterable&lt;Group.Entry&gt; getImports() &#123;<br>    <span class="hljs-keyword">for</span> (DeferredImportSelectorHolder deferredImport : <span class="hljs-built_in">this</span>.deferredImports) &#123;<br>        <span class="hljs-built_in">this</span>.group.process(deferredImport.getConfigurationClass().getMetadata(),<br>                           deferredImport.getImportSelector());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.group.selectImports();<br>&#125;<br><br><span class="hljs-keyword">public</span> DeferredImportSelector <span class="hljs-title function_">getImportSelector</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.importSelector;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> &#123;<br>    Assert.state(deferredImportSelector <span class="hljs-keyword">instanceof</span> AutoConfigurationImportSelector,<br>                 () -&gt; String.format(<span class="hljs-string">&quot;Only %s implementations are supported, got %s&quot;</span>,<br>                                     AutoConfigurationImportSelector.class.getSimpleName(),<br>                                     deferredImportSelector.getClass().getName()));<br>    <span class="hljs-type">AutoConfigurationEntry</span> <span class="hljs-variable">autoConfigurationEntry</span> <span class="hljs-operator">=</span> ((AutoConfigurationImportSelector) deferredImportSelector)<br>        .getAutoConfigurationEntry(getAutoConfigurationMetadata(), annotationMetadata);<br>    <span class="hljs-built_in">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);<br>    <span class="hljs-keyword">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;<br>        <span class="hljs-built_in">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定制化配置</strong></p><ul><li>修改配置文件为自定义的值</li><li>使用@Bean去替换底层的组件</li><li>使用自定义器XxxCustomizer</li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java集合</title>
    <link href="/pumpkin/2021/10/18/Java/Basic/Java%E9%9B%86%E5%90%88/"/>
    <url>/pumpkin/2021/10/18/Java/Basic/Java%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h1><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote><p>ArrayList、LinkedList、Vector、Stack、CopyOnWriteArrayList</p></blockquote><table><thead><tr><th>名称</th><th>特点</th><th>get(index)</th><th>add(E)</th><th>add(index, E)</th><th>remove(E)</th></tr></thead><tbody><tr><td>ArrayList</td><td>高效，线程不安全</td><td>O(1)</td><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr><tr><td>LinkedList</td><td>删除更高效，查询低效</td><td>O(n)</td><td>O(1)</td><td>O(n)</td><td>O(1)</td></tr><tr><td>Vector</td><td>低效，线程安全</td><td>O(1)</td><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ol><li>底层是数组</li><li>默认装Object</li><li>初始为10，(Jdk8之后默认添加数据的时候才开始给默认长度)。</li><li>每次扩容是原长度的一半（取整）：第一次扩到15，第二次22</li><li>扩容方式：Arrays.copyOf，默认把原数组复制到新数组</li><li>不是线程安全的</li></ol><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ol><li>底层是双向链表</li><li>链表删除和增加快，查询和修改慢</li><li>实现了Queue接口，所以还提供了offer(), peek(), poll()等方法</li></ol><h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><p>写时加锁，读时不加锁，复制一个新的数组，把新数组指向原来的数组</p><p>适用于读多写少的场景</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote><p>LinkedHashSet、TreeSet、EnumSet、CopyOnWriteArraySet、ConcurrentSkipListSet</p></blockquote><table><thead><tr><th>名称</th><th>特点</th><th>add(E)</th><th>remove(E)</th><th>contains(E)</th></tr></thead><tbody><tr><td>HashSet</td><td>线程不安全，可存储null值</td><td>O(1)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>LinkedHashSet</td><td>查询时有序 (存储还是无序)</td><td>O(logn)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>TreeSet</td><td>可根据指定值排序(基于红黑树)</td><td>O(1)</td><td>O(1)</td><td>O(1)</td></tr></tbody></table><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ol><li>底层是HashMap</li><li>添加过程</li></ol><p><img src="https://img-blog.csdnimg.cn/20200209154216578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>在多线程的情况下，多考虑使用Queue</p><h4 id="Deque-双端队列"><a href="#Deque-双端队列" class="headerlink" title="Deque 双端队列"></a>Deque 双端队列</h4><blockquote><p>ArrayDeque、BlockingDeque、LinkedBlockingDeque</p></blockquote><h4 id="BlokingQueue"><a href="#BlokingQueue" class="headerlink" title="BlokingQueue"></a>BlokingQueue</h4><blockquote><p>ArrayBlockingQueue、ProrityBlockingQueue、LinkedBlockingQueue</p></blockquote><p>获取数据时队列中无数据，阻塞。添加数据时队列已满，阻塞。</p><p><strong>添加元素</strong></p><p>add：添加元素的时候，若超出了度列的长度会直接抛出异常</p><p>offer：添加元素的时候，若超出了度列的长度会直接返回false</p><p>put：添加元素的时候，若超出了度列的长度会阻塞一直等待空间，以加入元素</p><p><strong>获取元素</strong></p><p>remove：获取元素，若队列为空，会抛出异常</p><p>poll：获取元素，队列为空时，返回null</p><p>take：获取元素，队列为空时，队列阻塞</p><p>element：查看队首元素，队列元素为空抛异常</p><p>peek：查看队首元素，队列元素为空返回 null</p><h5 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h5><p>容量为0的队列，使用put添加元素时阻塞，直到另一个线程取到数据</p><p>场景：两个线程交换数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> BlockingQueue&lt;String&gt; blockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> blockingQueue.take();<br>            System.out.println(<span class="hljs-string">&quot;子线程取到主线程数据:&quot;</span> + value);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;).start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    blockingQueue.put(<span class="hljs-string">&quot;1&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="TransferQueue-LinkedTransferQueue"><a href="#TransferQueue-LinkedTransferQueue" class="headerlink" title="TransferQueue LinkedTransferQueue"></a>TransferQueue LinkedTransferQueue</h5><p>与 SynchronousQueue 的区别在于，使用 <code>transfer</code> 方法来添加数据，并且当这个数据不被取走，线程会一直守在原地，类似MQ的消息确认机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">transferQueue.transfer(<span class="hljs-string">&quot;data&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h4><blockquote><p>底层使用CAS实现原子性操作</p></blockquote><p>使用 ConcurrentLinkedQueue 实现卖票程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Queue&lt;String&gt; tickets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentLinkedQueue</span>&lt;&gt;();<br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)<br>        tickets.add(<span class="hljs-string">&quot;票 编号:&quot;</span> + i);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> tickets.poll();<br>                <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>) <span class="hljs-keyword">break</span>;<br>                System.out.println(<span class="hljs-string">&quot;销售了 - &quot;</span> + s);<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><p>有序的队列，内部使用二叉树实现</p><h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h4><p>按照内部到期的时间进行排序，等待时间短的会排到队列的前面。</p><p>使用场景：按时间进行任务调度</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><table><thead><tr><th>名称</th><th>特点</th><th>get(key)</th><th>put(key)</th></tr></thead><tbody><tr><td>HashMap</td><td>线程不安全，高效</td><td>O(1)~O(log n)</td><td>O(1)</td></tr><tr><td>LinkedHashMap</td><td>查询时有序 (存储还是无序)</td><td>O(1)~O(log n)</td><td>O(1)</td></tr><tr><td>TreeMap</td><td>可根据指定值排序(取决于Compare返回值)</td><td>O(log n)</td><td>O(1)</td></tr><tr><td>Hashtable</td><td>线程安全，低效</td><td>O(1)~O(log n)</td><td>O(1)</td></tr></tbody></table><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p><strong>JDK7和8的异同</strong></p><p>JDK7：</p><ol><li>数组 + 链表</li><li>插入链表头部</li><li>直接计算 key 的 HashCode 值</li><li>扩容时会颠倒链表顺序</li><li>只要大于阈值就直接扩容2倍</li></ol><p>JDK8：</p><ol><li>数组 + 链表 + 红黑树</li><li>插入链表尾部</li><li>采用 Key 的 HashCode 异或上 Key 的 HashCode 进行无符号右移16位的结果 <code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>，避免了只靠低位数据来计算哈希时导致的冲突，计算结果由高低位结合决定，使元素分布更均匀</li><li>扩容时保持原链表顺序</li><li>当数组容量小于64时，直接扩容。大于64时，若链表长度大于8就转红黑树，否则就扩容。</li></ol><p><strong>负载因子为什么是0.75</strong></p><p>负载因子过小会导致更快扩容，浪费空间。过大会导致哈希碰撞的几率变大。</p><p><strong>HashMap扩容复制</strong></p><p>不是简单的将原数组中的每一个元素取出进行重新hash映射，而是做移位检测。所谓移位检测的含义具体是针对HashMap做映射时的&amp;运算所提出的，通过上文对&amp;元算的分析可知，映射的本质即看hash值的某一位是0还是1，当扩容以后，会相比于原数组多出一位做比较，由多出来的这一位是0还是1来决定是否进行移位，而具体的移位距离，也是可知的。</p><p><strong>JDK8添加过程</strong></p><ol><li>底层：数组 + 链表 + 红黑树</li><li>首次添加操作创建数组，长度16，存的是一维数组Entry[]</li><li>扩容：超过临界值(Capacity * Load Factory)，则扩容为原来2倍，并将元数据复制过来<br><img src="https://img-blog.csdnimg.cn/20200209154206861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>有序基于链表实现的 HashMap</p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>基于红黑树实现的有序Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自定义排序规则</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;String, String&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>1.7：Segment + HashEntry + Unsafe</p><p>1.8：移除Segment，使锁的粒度更小，Synchronized + CAS</p><h3 id="ConcurrentSkitListMap"><a href="#ConcurrentSkitListMap" class="headerlink" title="ConcurrentSkitListMap"></a>ConcurrentSkitListMap</h3><blockquote><p>同步容器，有序</p></blockquote><p><strong>跳表</strong></p><p>算法在最稀疏的层次进行搜索，直至需要查找的元素在该层两个相邻的元素中间。这时，算法将跳转到下一个层次，重复刚才的搜索，直到找到需要查找的元素为止。</p><p><img src="https://img-blog.csdnimg.cn/20210115222639601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h3><p>Entry 是弱引用，如果没有被其他强引用，那么GC后就会被回收</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/pumpkin/2021/10/18/Java/Spring/Mybatis/"/>
    <url>/pumpkin/2021/10/18/Java/Spring/Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><p>每当我们使用MyBatis开启一次和数据库的会话，MyBatis会创建出一个SqlSession对象表示一次数据库会话。</p><p>在对数据库的一次会话中，我们有可能会反复地执行完全相同的查询语句，如果不采取一些措施的话，每一次查询都会查询一次数据库,而我们在极短的时间内做了完全相同的查询，那么它们的结果极有可能完全相同，由于查询一次数据库的代价很大，这有可能造成很大的资源浪费。</p><h2 id="Mybatis-缓存"><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a>Mybatis 缓存</h2><h3 id="一级缓存（默认开启）"><a href="#一级缓存（默认开启）" class="headerlink" title="一级缓存（默认开启）"></a>一级缓存（默认开启）</h3><p>本地缓存，MyBatis会在表示会话的SqlSession对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出返回给用户，不需要再进行一次数据库查询了，执行增删改后失效。</p><p><strong>一级缓存生命周期</strong></p><ol><li>MyBatis在开启一个数据库会话时，会创建一个新的SqlSession对象，SqlSession对象中会有一个新的Executor对象，Executor对象中持有一个新的PerpetualCache对象；当会话结束时，SqlSession对象及其内部的Executor对象还有PerpetualCache对象也一并释放掉。</li><li>如果SqlSession调用了close方法，会释放掉一级缓存PerpetualCache对象，一级缓存将不可用；</li><li>如果SqlSession调用了clearCache，会清空PerpetualCache对象中的数据，但是该对象仍可使用；</li><li>SqlSession中执行了任何一个update操作(update、delete、insert) ，都会清空PerpetualCache对象的数据，但是该对象可以继续使用；</li></ol><p><strong>一级缓存的两种级别</strong></p><ol><li>session 级别的缓存，在同一个 sqlSession 内，对同样的查询将不再查询数据库，直接从缓存中。</li><li>statement 级别的缓存，避坑： 为了避免这个问题，可以将一级缓存的级别设为 statement 级别的，这样每次查询结束都会清掉一级缓存。</li></ol><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p><strong>开启二级缓存</strong></p><p>增加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mybatis.configuration.cache-enabled</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>在 Mapper.xml 中配置 cache 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">各个参数解释</span><br><span class="hljs-comment">type: 指定自定义缓存的全类名(实现C)</span><br><span class="hljs-comment">size: 缓存存放多少个元素</span><br><span class="hljs-comment">eviction: 缓存回收策略：LRU、FIFO、SOFT、WEAK</span><br><span class="hljs-comment">LRU(默认): 最近最少未回收</span><br><span class="hljs-comment">FIFO: 先进先出，按照缓存进入的顺序来移除它们</span><br><span class="hljs-comment">SOFT: 软引用，移除基于垃圾回收器状态和软引用规则的对象</span><br><span class="hljs-comment">WEAK: 弱引用，更积极地移除基于垃圾回收器和弱引用规则的对象</span><br><span class="hljs-comment">flushInterval: 单位ms，缓存刷新间隔，缓存多少时间刷新一次，默认不清空</span><br><span class="hljs-comment">blocking: 若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;1024&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;LRU&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;120000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>二级缓存原理</strong></p><p>二级缓存是用来解决一级缓存不能跨会话共享的问题的，范围是namespace 级别的，可以被多个SqlSession 共享（只要是同一个接口里面的相同方法，都可以共享），生命周期和应用同步。如果你的MyBatis使用了二级缓存，并且你的Mapper和select语句也配置使用了二级缓存，那么在执行select查询的时候，MyBatis会先从二级缓存中取，其次才是一级缓存，即MyBatis查询数据的顺序是：二级缓存  &gt; 一级缓存 &gt; 数据库。</p><p>MyBatis 用了一个装饰器的类来维护二级缓存，就是CachingExecutor。如果启用了二级缓存，MyBatis 在创建Executor 对象的时候会对Executor 进行装饰。CachingExecutor 对于查询请求，会判断二级缓存是否有缓存结果，如果有就直接返回，如果没有委派交给真正的查询器Executor 实现类，比如SimpleExecutor 来执行查询，再走到一级缓存的流程。最后会把结果缓存起来，并且返回给用户。</p><p><img src="https://img-blog.csdnimg.cn/20210208104315871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>不推荐开启二级缓存</strong></p><p>因为二级缓存是基于 namespace 的（即一个 Mapper.xml 文件），所有基于该 Mapper 的增删改操作都会刷新缓存，但是如果其他的 Mapper 中有对该 Mapper 中数据表的操作，就会导致两个 namesapce 中的数据不一致。推荐使用 redis 替代。</p><h2 id="Mybatis-批量删除"><a href="#Mybatis-批量删除" class="headerlink" title="Mybatis 批量删除"></a>Mybatis 批量删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.util.List&quot;</span>&gt;</span><br>    delete from DUB_ORIGIN_ATTACH<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Mybatis-多数据源配置"><a href="#Mybatis-多数据源配置" class="headerlink" title="Mybatis 多数据源配置"></a>Mybatis 多数据源配置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">dub.datasource.oracle.driver-class-name</span>=<span class="hljs-string">oracle.jdbc.driver.OracleDriver</span><br><span class="hljs-attr">dub.datasource.oracle.url</span>=<span class="hljs-string">jdbc:oracle:thin:@127.0.0.1:1521:test</span><br><span class="hljs-attr">dub.datasource.oracle.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">dub.datasource.oracle.password</span>=<span class="hljs-string">root</span><br><br><span class="hljs-attr">dub.datasource.mysql.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">dub.datasource.mysql.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf-8&amp;useSSL=false</span><br><span class="hljs-attr">dub.datasource.mysql.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">dub.datasource.mysql.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages =&quot;com.smartebao.dub.export.declare.common.mapper.oracle&quot;, sqlSessionTemplateRef  = &quot;oracleSqlSessionTemplate&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DubOracleDataSourceConfig</span> &#123;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(&quot;oracleSqlSessionFactory&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">ds1SqlSessionFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;oracleDataSource&quot;)</span> DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MybatisSqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisSqlSessionFactoryBean</span>();<br>        sqlSessionFactory.setDataSource(dataSource);<br>        <span class="hljs-type">MybatisConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisConfiguration</span>();<br>        configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);<br>        configuration.setJdbcTypeForNull(JdbcType.NULL);<br>        sqlSessionFactory.setConfiguration(configuration);<br>        sqlSessionFactory.setMapperLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>().<br>                getResources(<span class="hljs-string">&quot;classpath*:com/smartbao/dub/export/declare/common/mapper/oracle/**&quot;</span>));<br>        sqlSessionFactory.setGlobalConfig(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>().setBanner(<span class="hljs-literal">false</span>));<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.getObject();<br>    &#125;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = &quot;oracleTransactionManager&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">ds1TransactionManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;oracleDataSource&quot;)</span> DataSource dataSource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(dataSource);<br>    &#125;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = &quot;oracleSqlSessionTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionTemplate <span class="hljs-title function_">ds1SqlSessionTemplate</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;oracleSqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionTemplate</span>(sqlSessionFactory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages =&quot;com.smartebao.dub.export.declare.common.mapper.mysql&quot;, sqlSessionTemplateRef  = &quot;mysqlSqlSessionTemplate&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DubMysqlDataSourceConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean(&quot;mysqlSqlSessionFactory&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">ds1SqlSessionFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;mysqlDataSource&quot;)</span> DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MybatisSqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisSqlSessionFactoryBean</span>();<br>        sqlSessionFactory.setDataSource(dataSource);<br>        <span class="hljs-type">MybatisConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisConfiguration</span>();<br>        configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);<br>        configuration.setJdbcTypeForNull(JdbcType.NULL);<br>        sqlSessionFactory.setConfiguration(configuration);<br>        sqlSessionFactory.setMapperLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>().<br>                getResources(<span class="hljs-string">&quot;classpath*:com/smartbao/dub/export/declare/common/mapper/mysql/**&quot;</span>));<br>        sqlSessionFactory.setGlobalConfig(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>().setBanner(<span class="hljs-literal">false</span>));<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.getObject();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;mysqlTransactionManager&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">ds1TransactionManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;mysqlDataSource&quot;)</span> DataSource dataSource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(dataSource);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;mysqlSqlSessionTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionTemplate <span class="hljs-title function_">ds1SqlSessionTemplate</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;mysqlSqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionTemplate</span>(sqlSessionFactory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages =&quot;com.smartebao.dub.export.declare.common.mapper.oracle&quot;, sqlSessionTemplateRef  = &quot;oracleSqlSessionTemplate&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DubOracleDataSourceConfig</span> &#123;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(&quot;oracleSqlSessionFactory&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">ds1SqlSessionFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;oracleDataSource&quot;)</span> DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MybatisSqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisSqlSessionFactoryBean</span>();<br>        sqlSessionFactory.setDataSource(dataSource);<br>        <span class="hljs-type">MybatisConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisConfiguration</span>();<br>        configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);<br>        configuration.setJdbcTypeForNull(JdbcType.NULL);<br>        sqlSessionFactory.setConfiguration(configuration);<br>        sqlSessionFactory.setMapperLocations(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>().<br>                getResources(<span class="hljs-string">&quot;classpath*:com/smartbao/dub/export/declare/common/mapper/oracle/**&quot;</span>));<br>        sqlSessionFactory.setGlobalConfig(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>().setBanner(<span class="hljs-literal">false</span>));<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.getObject();<br>    &#125;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = &quot;oracleTransactionManager&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">ds1TransactionManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;oracleDataSource&quot;)</span> DataSource dataSource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(dataSource);<br>    &#125;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = &quot;oracleSqlSessionTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionTemplate <span class="hljs-title function_">ds1SqlSessionTemplate</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;oracleSqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionTemplate</span>(sqlSessionFactory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/pumpkin/2021/10/18/Java/Basic/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/pumpkin/2021/10/18/Java/Basic/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-多线程"><a href="#Java-多线程" class="headerlink" title="Java 多线程"></a>Java 多线程</h1><h2 id="1-线程的概念"><a href="#1-线程的概念" class="headerlink" title="1. 线程的概念"></a>1. 线程的概念</h2><p><strong>操作系统是如何切换线程的</strong></p><p>Cpu会从内存里取出线程，线程内部状态是由线程栈来维护的。</p><p>一个程序的不同分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 顺序执行</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">T1</span>().run();<br><span class="hljs-comment">// 并行执行</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">T1</span>().start();<br><span class="hljs-comment">// 睡眠500毫秒</span><br>Thead.sleep(<span class="hljs-number">500</span>);<br><span class="hljs-comment">// 让出线程,使线程进入等待队列，但也有可能再次被Cpu拿出来执行</span><br>Thread.yield();<br><span class="hljs-comment">// t2运行中调用t1.join()即执行t1线程，保证t1结束以后t2才能继续运行</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;t1&quot;</span>);<br>&#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123; t1.join(); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;<br>&#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br></code></pre></td></tr></table></figure><p>线程状态迁移图</p><p><img src="https://img-blog.csdnimg.cn/20210107211056470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-线程的创建方式"><a href="#2-线程的创建方式" class="headerlink" title="2. 线程的创建方式"></a>2. 线程的创建方式</h2><ol><li>继承Thead类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 运行了...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// main</span><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>t.start();<br></code></pre></td></tr></table></figure><ol start="2"><li>实现Runnable接口</li></ol><p>普通写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 运行了...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// main</span><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t).start();<br></code></pre></td></tr></table></figure><p>lambda写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 运行了...&quot;</span>);<br>&#125;).start();<br></code></pre></td></tr></table></figure><ol start="3"><li>实现Callable接口：可以抛出异常，支持泛型的返回值</li></ol><ul><li>Future：可以获得线程的执行结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">FutureTask&lt;Integer&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(() -&gt; <span class="hljs-number">1</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> futureTask.get();<br>System.out.println(<span class="hljs-string">&quot;结果:&quot;</span> + result);<br></code></pre></td></tr></table></figure><ul><li><p>CompletableFuture</p><p>使用<code>Future</code>获得异步执行结果时，要么调用阻塞方法<code>get()</code>，要么轮询看<code>isDone()</code>是否为<code>true</code>，这两种方法都不是很好，因为主线程也会被迫等待。</p><p>从Java 8开始引入了<code>CompletableFuture</code>，它针对<code>Future</code>做了改进，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法。</p><p><code>CompletableFuture</code>更强大的功能是，多个<code>CompletableFuture</code>可以串行执行</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建异步执行任务</span><br>CompletableFuture&lt;Integer&gt; task1 = CompletableFuture.supplyAsync(() -&gt; <span class="hljs-number">1</span>);<br>CompletableFuture&lt;Integer&gt; task2 = task1.thenApplyAsync(o -&gt; o + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 如果执行成功</span><br>task2.thenAccept(res -&gt; System.out.println(<span class="hljs-string">&quot;最终结果:&quot;</span> + res));<br><span class="hljs-comment">// 如果执行异常</span><br>task2.exceptionally(e -&gt; &#123;<br>  System.out.println(<span class="hljs-string">&quot;Failed: &quot;</span> + e.getMessage());<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;);<br><span class="hljs-comment">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭</span><br>Thread.sleep(<span class="hljs-number">200</span>);<br></code></pre></td></tr></table></figure><ol start="4"><li>使用线程池</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">5</span>);<br>ScheduledFuture&lt;Integer&gt; result = pool.schedule(() -&gt; &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">100</span>);<br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t&quot;</span> + num);<br>    <span class="hljs-keyword">return</span> num;<br>&#125;, <span class="hljs-number">100</span>, TimeUnit.MILLISECONDS);<br>System.out.println(result.get());<br>pool.shutdown();<br></code></pre></td></tr></table></figure><h2 id="3-线程池详解"><a href="#3-线程池详解" class="headerlink" title="3. 线程池详解"></a>3. 线程池详解</h2><h3 id="3-1-线程池种类"><a href="#3-1-线程池种类" class="headerlink" title="3.1 线程池种类"></a>3.1 线程池种类</h3><ul><li>newFixedThreadPool（固定大小的线程池）</li><li>newSingleThreadExecutor（单线程线程池）</li><li>newCachedThreadPool（可缓存线程的线程池）用于并发执行大量短期的小任务。</li><li>newScheduledThreadPool：用于需要多个后台线程执行周期任务，同时需要限制线程数量的场景。</li></ul><h3 id="3-2-线程池参数"><a href="#3-2-线程池参数" class="headerlink" title="3.2 线程池参数"></a>3.2 线程池参数</h3><ol><li>corePoolSize: 线程池中的常驻核心线程数，即使空闲也不归还。</li><li>maximumPoolSize: 线程池能够容纳同时执行的最大线程数，空闲了会归还给操作系统。</li><li>keepAliveTime: 多余的空闲线程存活时间。</li><li>unit: keepAliveTime的单位。</li><li>workQueue: 任务队列，被提交但尚未被执行的任务，一般使用阻塞队列。</li><li>threadFactory: 表示生成线程池中工作线程的线程工厂，用于创建线程，一般默认即可。</li><li>handler: 拒绝策略，表示当队列满了并且工作线程大于等于线程的最大线程数时如何来拒绝请求执行的runnable策略。</li></ol><h3 id="3-3-线程池底层工作原理"><a href="#3-3-线程池底层工作原理" class="headerlink" title="3.3 线程池底层工作原理"></a>3.3 线程池底层工作原理</h3><ul><li><p>在创建了线程池后，等待提交过来的任务请求</p></li><li><p>当调用execute()方法添加一个请求任务时，线程池会做如下判断</p><ul><li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行任务</li><li>如果正在运行的线程大于等于corePoolSize，那么将这个任务放入队列</li><li>如果这时队列满了且正在运行的线程数量小于maximumPoolSize，那么要创建非核心线程立刻运行这个任务</li><li>如果队列满了且正在运行的线程数大于等于maximumPoolSize，那么线程池会启动拒绝策略</li></ul></li><li><p>当一个线程完成任务时，他会从队列中取下一个任务来执行</p></li><li><p>当一个线程无事可做超过keepAliveTime时，线程会判断：</p><ul><li>如果当线程数大于corePoolSize，那么这个线程就被停掉</li><li>线程池的所有任务完成后最终会收缩到corePoreSize</li></ul></li></ul><h3 id="3-4-拒绝策略"><a href="#3-4-拒绝策略" class="headerlink" title="3.4 拒绝策略"></a>3.4 拒绝策略</h3><p>定义：等待队列和max线程数都满了，那么就需要启用拒绝策略处理这个问题。</p><ul><li>AbortPolicy(默认)：直接抛出RejectedExecutionException异常</li><li>CallerRunsPolicy：既不会抛弃任务，也不会抛出异常，而是把某些任务回退给调用者</li><li>DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务</li><li>DiscardPolicy：直接丢弃任务，不予任何处理也不抛出异常</li><li>自定义Policy：实现 <code>RejectedExecutionHandler</code> 接口</li></ul><h3 id="3-5-自定义线程池"><a href="#3-5-自定义线程池" class="headerlink" title="3.5 自定义线程池"></a>3.5 自定义线程池</h3><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>    <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1L</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="hljs-number">3</span>),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThreadFactory</span>(<span class="hljs-string">&quot;myPool&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">fi</span> <span class="hljs-operator">=</span> i;<br>      pool.execute(() -&gt; &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t&quot;</span> + fi);<br>      &#125;);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    pool.shutdown();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ThreadFactory</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">poolNumber</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ThreadGroup group;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">threadNumber</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String namePrefix;<br><br>  MyThreadFactory(String prefix) &#123;<br>    <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>    group = (s != <span class="hljs-literal">null</span>) ? s.getThreadGroup() :<br>    Thread.currentThread().getThreadGroup();<br>    namePrefix = prefix + <span class="hljs-string">&quot;-&quot;</span> +<br>      poolNumber.getAndIncrement() +<br>      <span class="hljs-string">&quot;-thread-&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(group, r,<br>                          namePrefix + threadNumber.getAndIncrement(),<br>                          <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (t.isDaemon())<br>      t.setDaemon(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)<br>      t.setPriority(Thread.NORM_PRIORITY);<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ThreadPoolTaskExecutor"><a href="#ThreadPoolTaskExecutor" class="headerlink" title="ThreadPoolTaskExecutor"></a>ThreadPoolTaskExecutor</h4><blockquote><p>Spring 为我们提供的线程池类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(&quot;taskExector&quot;)</span><br><span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">taskExector</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">ThreadPoolTaskExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolTaskExecutor</span>();<br>  <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors();<span class="hljs-comment">//获取到服务器的cpu内核</span><br>  executor.setCorePoolSize(<span class="hljs-number">5</span>);<span class="hljs-comment">//核心池大小</span><br>  executor.setMaxPoolSize(<span class="hljs-number">100</span>);<span class="hljs-comment">//最大线程数</span><br>  executor.setQueueCapacity(<span class="hljs-number">1000</span>);<span class="hljs-comment">//队列程度</span><br>  executor.setKeepAliveSeconds(<span class="hljs-number">1000</span>);<span class="hljs-comment">//线程空闲时间</span><br>  executor.setThreadNamePrefix(<span class="hljs-string">&quot;task-asyn&quot;</span>);//线程前缀名称<br>  executor.setRejectedExecutionHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<span class="hljs-comment">//配置拒绝策略</span><br>  <span class="hljs-keyword">return</span> executor;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource(name=&quot;taskExecutor&quot;)</span><br>ThreadPoolTaskExecutor taskExecutor;<br></code></pre></td></tr></table></figure><h3 id="3-6-如何合理配置线程池"><a href="#3-6-如何合理配置线程池" class="headerlink" title="3.6 如何合理配置线程池"></a>3.6 如何合理配置线程池</h3><p><img src="https://img-blog.csdnimg.cn/20210116163921272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Cpu密集型(Cpu一直运行)：Cpu核数+1个线程的线程池</li><li>IO密集型(需要不断取数据)：<ul><li>IO密集型并不是一直在执行任务，配置尽可能多的线程，如Cpu核数 * 2</li><li>Cpu核数 &#x2F; (1 - 阻塞系数(0.8~0.9))例如8核Cpu：8 &#x2F; (1 - 0.9) &#x3D; 80个线程数</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java锁</title>
    <link href="/pumpkin/2021/10/18/Java/Basic/Java%E9%94%81/"/>
    <url>/pumpkin/2021/10/18/Java/Basic/Java%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-锁"><a href="#Java-锁" class="headerlink" title="Java 锁"></a>Java 锁</h1><h2 id="JMM-Java-Memory-Model"><a href="#JMM-Java-Memory-Model" class="headerlink" title="JMM (Java Memory Model)"></a>JMM (Java Memory Model)</h2><p>是一组规范，可见性、原子性、有序性，定义了程序中各个变量的访问方式。</p><p><strong>解释</strong>：线程创建时JVM会为其创建工作内存（线程私有），JMM规定所有变量存储在主内存（共享），但线程必须在工作内存中操作变量。具体流程：拷贝-&gt;操作-&gt;写回&lt;&#x2F;。各个工作内存存储主内存变量的复印件，不同线程无法互相访问，线程间通信必须通过主内存。</p><p><img src="https://img-blog.csdnimg.cn/20210121135743932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>JMM关于同步的规定</strong>：</p><ol><li>线程解锁前，必须把共享变量的值刷新回主内存。</li><li>线程加锁前，必须读取主内存的最新值到工作内存。</li><li>加锁解锁是同一把锁。</li></ol><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>保证可见性，禁止指令重排</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>缓存一致性协议。JMM模型里有8个指令完成数据的读写，通过其中load和store指令相互组成的4个内存屏障实现禁止指令重排序。</p><p><strong>字节码层面</strong>：ACC_VOLATILE</p><p><strong>JVM层面</strong></p><p><img src="https://img-blog.csdnimg.cn/20210117102410887.png" alt="在这里插入图片描述"></p><p><strong>JVM内存屏障</strong></p><p>LoadLoad：在Load2及后续读取操作的数据被访问前，保证Load1要读取的数据读取完毕。</p><p>StoreStore：在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</p><p>LoadStore：在Store2及后续写入操作刷出前，保证Load1要读取的数据被读取完毕。</p><p>StoreLoad：在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。</p><p><strong>OS层面：硬件内存屏障、原子指令</strong></p><p>sfence：save | 在sfence指令前的写操作必须在sfence指令后的写操作前完成</p><p>lfence：load | 在lfence指令前的读操作必须在lfence指令后的读操作前完成</p><p>mfence：modify&#x2F;mix | 在mfence指令前的读写操作必须在mfence指令后的读写操作前完成</p><p>原子指令：如x86上的lock前缀指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序</p><p><strong>为什么volatile不能实现原子性</strong></p><p>没有原子性是因为底层代码一个++操作会被写成多行c++，这时候失去CPU分片就会值被改掉</p><p><strong>单例模式中的DCL为什么要加volatile</strong></p><p>由于指令重排，对象在半初始化状态的时候就赋值给这个变量了，即instance已经不再是null，第二个线程就直接拿来使用这个半初始化状态的对象。</p><p><strong>volatile引用对象</strong></p><p>如果volatile修饰的是一个引用对象，那么引用对象内部的属性发生改变volatile是无法观察到的。</p><h2 id="CAS-Compare-And-Set"><a href="#CAS-Compare-And-Set" class="headerlink" title="CAS (Compare And Set)"></a>CAS (Compare And Set)</h2><p><strong>作用</strong>：线程的期望值和物理内存真实值一样则修改，否则需要重新获得主物理内存的真实值，这个过程是原子的。</p><p><strong>原理</strong>：Unsafe、自旋锁、乐观锁</p><ul><li><p>Unsafe：Java无法直接访问底层系统，可以基于Unsafe内部native方法可以像C的指针一样直接操作内存。</p></li><li><p>自旋锁：循环判断工作内存与主内存的值是否相等，如相等则返回。</p></li></ul><p><strong>缺点</strong>：循环时间长开销大、只能保证一个共享变量的原子操作、ABA问题。</p><p><strong>CAS是怎么保证原子性的</strong></p><p>获取内存中的值，CAS比较不一致，则继续获取内存中的值，直到CAS成功为止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// var1: 当前对象</span><br><span class="hljs-comment">// var2: 当前对象的内存偏移量地址</span><br><span class="hljs-comment">// var4: 增加的值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAddInt</span><span class="hljs-params">(Object var1, <span class="hljs-type">long</span> var2, <span class="hljs-type">int</span> var4)</span> &#123;<br>    <span class="hljs-type">int</span> var5;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">// 根据当前对象的内存偏移量获取当前对象的值</span><br>        var5 = <span class="hljs-built_in">this</span>.getIntVolatile(var1, var2);<br>    <span class="hljs-comment">// 如果CAS比较结果不一致，则继续循环，否则退出循环</span><br>    &#125; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br>    <span class="hljs-keyword">return</span> var5;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>为什么CAS要比synchronized快</strong></p><p>synchronized需要进行上下文切换，每一次线程进出Cpu就是一次上下文切换，而这一次切换大概需要3-5微秒，而Cpu执行一条执行大概只需要0.6纳秒，而CAS没有上下文切换的过程，那么效率就高。</p><p><strong>ABA问题</strong></p><p>CAS只会判断最终的对象是否与期望的一致，但不会判断在这期间对象是否有改变，当这期间对象发生了改变，就会产生ABA问题，即虽然判断对象是同一个，但是其中的属性发生了改变。</p><p>解决方案：加版本号。</p><p><strong>并发累加Long的三种方式</strong></p><ol><li>加锁</li><li>AtomicLong：CAS</li><li>LongAdder：分段锁，线程数量特别多的时候比Atomic更有优势</li></ol><p><strong>AtomicInteger</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">5</span>);<br>System.out.println(atomicInteger.compareAndSet(<span class="hljs-number">5</span>, <span class="hljs-number">2019</span>) + <span class="hljs-string">&quot;\t current data:&quot;</span> + atomicInteger.get());<br>System.out.println(atomicInteger.compareAndSet(<span class="hljs-number">5</span>, <span class="hljs-number">1024</span>) + <span class="hljs-string">&quot;\t current data:&quot;</span> + atomicInteger.get());<br>atomicInteger.getAndIncrement();<br></code></pre></td></tr></table></figure><p><strong>AtomicReference</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomicReferenceDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">z3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;z3&quot;</span>, <span class="hljs-number">22</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;l4&quot;</span>, <span class="hljs-number">25</span>);<br><br>        AtomicReference&lt;User&gt; atomicReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;();<br>        atomicReference.set(z3);<br>        System.out.println(atomicReference.compareAndSet(z3, l4) + <span class="hljs-string">&quot;\t&quot;</span> + atomicReference.get().toString());<br>        System.out.println(atomicReference.compareAndSet(z3, l4) + <span class="hljs-string">&quot;\t&quot;</span> + atomicReference.get().toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@ToString</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>        String username;<br>        <span class="hljs-type">int</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><h3 id="按性质分类"><a href="#按性质分类" class="headerlink" title="按性质分类"></a>按性质分类</h3><p><strong>公平锁</strong>：多个线程按照申请锁的顺序来获取锁。</p><p><strong>非公平锁</strong>：多个线程获取锁的顺序并不是按照申请锁的顺序。</p><p><strong>乐观锁</strong>：采用尝试更新，不断重新的方式更新数据。</p><p><strong>悲观锁</strong>：对于同一个数据的并发操作，悲观锁采取加锁的形式。</p><p><strong>独享锁</strong>：该锁一次只能被一个线程所持有。</p><p><strong>共享锁</strong>：该锁可被多个线程所持有。</p><p><strong>互斥锁</strong>：写锁。</p><p><strong>读写锁</strong>：可以多人读，但只允许一人写。</p><p><strong>可重入锁</strong>：在同一个线程的外层方法获取锁的时候，进入内层方法会自动获取锁。避免死锁。</p><p><strong>对象锁</strong>：将sychronized放在普通同步方法中，sychronized同步监视器为普通对象</p><p><strong>全局锁</strong>：将sychronized放在静态同步方法中，sychronized同步监视器为类对象</p><h3 id="按照设计分类"><a href="#按照设计分类" class="headerlink" title="按照设计分类"></a>按照设计分类</h3><p><strong>自旋锁</strong>：采用循环的方式去尝试获取锁。</p><p><strong>自适应自旋锁</strong>：循环多次发现等待时间过长，切换为阻塞状态。</p><p><strong>锁粗化</strong>：如一个方法内加了多个锁，JVM认为没必要，于是将其合并为一个锁。</p><p><strong>锁消除</strong>：JVM认为有些代码块无需加锁，于是删除了那个锁。</p><p><strong>偏向锁</strong>：一段同步代码一直被一个线程访问，该线程会自动获得锁。</p><p><strong>轻量级锁</strong>：当锁是偏向锁的时候，被另外线程访问，其它线程会通过自旋的形式尝试获取锁。</p><p><strong>重量级锁</strong>：当锁是轻量级锁的时候，另一个线程自旋到一定次数未得到锁则进入阻塞。</p><p><strong>分段锁</strong>：将数据分为多段，每次只给一段加锁。</p><h2 id="锁概念"><a href="#锁概念" class="headerlink" title="锁概念"></a>锁概念</h2><h3 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h3><ol><li>无锁：程序不会有锁竞争</li><li>偏向锁：经常只有一个线程加锁，markword 记录线程ID</li><li>自旋锁：有线程来参与锁的竞争，但是获取锁的冲突时间很短</li><li>重量级锁：自旋10次以后，升为重量级锁 - 去OS申请锁资源</li></ol><p>什么时候用自旋什么时候用重量级锁？</p><p>执行时间长，线程多用重量级锁，否则用自旋。</p><h3 id="锁发生改变"><a href="#锁发生改变" class="headerlink" title="锁发生改变"></a>锁发生改变</h3><ol><li><p>程序中如果出现异常，默认情况下锁会被释放</p></li><li><p>如果锁对象发生改变，锁就会失效。</p><p>解决方案： 锁对象加 <code>final</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br></code></pre></td></tr></table></figure><h2 id="JUC和同步锁锁"><a href="#JUC和同步锁锁" class="headerlink" title="JUC和同步锁锁"></a>JUC和同步锁锁</h2><h3 id="Syncronized-实现细节"><a href="#Syncronized-实现细节" class="headerlink" title="Syncronized 实现细节"></a>Syncronized 实现细节</h3><p>字节码层面：monitorenter monitorexit</p><p>JVM层面：C  C++ 调用了操作系统提供的同步机制</p><p>OS和硬件层面：x86是 <code>lock comxchg xxx</code>，lock是用来锁其它指令的</p><h3 id="Sychronized-and-Lock"><a href="#Sychronized-and-Lock" class="headerlink" title="Sychronized and Lock"></a>Sychronized and Lock</h3><ol><li>Sychronized：非公平，悲观，独享，互斥，可重入的重量级</li><li>Lock<ol><li>ReentrantLock：可公平，悲观，独享，互斥，可重入，重量级锁。</li><li>ReentrantReadWriteLock：可公平，悲观，写独享，读共享，读写，可重入，重量级锁。</li></ol></li></ol><p><strong>Sychronized 和 ReentrantLock 的区别</strong></p><ol><li>synchronized是关键字，Lock是Api</li><li>synchronized自动释放锁，Lock手动释放</li><li>synchronized不可以中断，ReentrantLock可中断(调用interrupt方法)</li><li>synchronized非公平锁，Lock两者皆可</li><li>synchronized只能随机或全部唤醒，Lock可以使用Condition精确唤醒</li></ol><p><strong>Sychronized 和 ReentrantLock 的使用场景</strong></p><p>sychronized如果抢不到锁，就会一直等待</p><p>reentrantLock有tryLock机制，如果等待超时可以放弃等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (lock.tryLock(<span class="hljs-number">3L</span>, TimeUnit.SECONDS))&#123;<span class="hljs-comment">// 3秒超时</span><br>    lock.lock();<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">// 业务逻辑</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 放弃等待后执行</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ReadWriteLock-StampedLock"><a href="#ReadWriteLock-StampedLock" class="headerlink" title="ReadWriteLock - StampedLock"></a>ReadWriteLock - StampedLock</h3><p>ReadLock：读锁，读的时候其它读线程依然可以进入</p><p>WriteLock，写锁，写的时候不允许其它线程进入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">readWriteLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">readLock</span> <span class="hljs-operator">=</span> readWriteLock.readLock();<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">writeLock</span> <span class="hljs-operator">=</span> readWriteLock.writeLock();<br></code></pre></td></tr></table></figure><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>被减少到零之后才放行，否则阻塞等待。</p><p>定义一个CountDownLatch，有初始值，使用await阻塞线程，当减少到0时消除阻塞，类似于join但是更灵活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">6</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++)&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        countDownLatch.countDown();<br>    &#125;, String.valueOf(i)).start();<br>&#125;<br>countDownLatch.await();<br>System.out.println(<span class="hljs-string">&quot;解除门栓&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>先到的被阻塞，直到达到指定值时释放</p><p>await到指定个线程之后，放行</p><p>场景：某线程需等待其它线程执行完后才能执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">cyclicBarrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">7</span>, () -&gt; System.out.println(<span class="hljs-string">&quot;释放通行&quot;</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; i++)&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">tempInt</span> <span class="hljs-operator">=</span> i;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t 线程已到&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            cyclicBarrier.await();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;, String.valueOf(i)).start();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Phaser"><a href="#Phaser" class="headerlink" title="Phaser"></a>Phaser</h3><p>CyclicBarrier升级版，使用arriveAndAwaitAdvance到达一个阶段的时候等待其它线程完成再向后执行</p><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>多共享资源的互斥使用，并发线程数的控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在多个线程并发访问时，最多只有3个线程可以同时运行</span><br><span class="hljs-comment">// acquire:总量-1</span><br><span class="hljs-comment">// release:总量+1</span><br><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        semaphore.acquire();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        semaphore.release();<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><h3 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h3><p>两个线程间交换数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 执行exchange()时阻塞线程</span><br>Exchanger&lt;String&gt; exchanger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exchanger</span>&lt;&gt;();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    exchanger.exchange(<span class="hljs-string">&quot;1&quot;</span>);<br>&#125;);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    exchanger.exchange(<span class="hljs-string">&quot;2&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="线程等待和唤醒"><a href="#线程等待和唤醒" class="headerlink" title="线程等待和唤醒"></a>线程等待和唤醒</h2><h3 id="Object-wait-notify"><a href="#Object-wait-notify" class="headerlink" title="Object: wait, notify"></a>Object: wait, notify</h3><ol><li>都需要在同步代码块中执行(synchronized)</li><li>先wait再notify，等待中的线程才会被唤醒，否则无法唤醒</li><li>notify是随机唤醒一个线程</li><li>notify不释放锁，需要等待线程执行完或者线程中wait()才释放</li><li>notifyAll将所有线程唤醒，去争抢锁，但抢到锁的依旧只有一个线程</li></ol><h3 id="Condition-await-signal"><a href="#Condition-await-signal" class="headerlink" title="Condition: await, signal"></a>Condition: await, signal</h3><ol><li>都需要在同步代码块中执行</li><li>先await再signal，等待中的线程才会被唤醒，否则无法唤醒</li><li>可以精确的指定哪些线程被唤醒，即使用不同的condition加锁即可，condition的本质就是不同的等待队列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Condition</span> <span class="hljs-variable">condition1</span> <span class="hljs-operator">=</span> lock.newCondition();<br><span class="hljs-type">Condition</span> <span class="hljs-variable">condition2</span> <span class="hljs-operator">=</span> lock.newCondition();<br></code></pre></td></tr></table></figure><h3 id="LockSupport-pack-unpack"><a href="#LockSupport-pack-unpack" class="headerlink" title="LockSupport: pack, unpack"></a>LockSupport: pack, unpack</h3><p>线程阻塞工具类，可以让线程在任意位置阻塞，阻塞后也有对应的唤醒方法，底层调用Unsafe的native方法</p><p>线程阻塞需要消耗Permit，Permit最多存在1个</p><p>当调用park方法时</p><ul><li>如果有凭证，直接消耗掉这个凭证然后正常退出</li><li>如果无凭证，就阻塞等待凭证可用</li></ul><p>当调用unpark方法时</p><ul><li>增加一个凭证，但凭证最多有1个</li></ul><h2 id="AQS-AbstractQueuedSynchronizer"><a href="#AQS-AbstractQueuedSynchronizer" class="headerlink" title="AQS (AbstractQueuedSynchronizer)"></a>AQS (AbstractQueuedSynchronizer)</h2><p>概念：是用来构建锁或者其它同步组件的抽象父类</p><p><strong>CAS + volatile state + 双端队列</strong></p><p>CAS：在往队列末端加线程的时候使用的是CAS</p><p>volatile：state变量用volatile修饰保证线程之间可见</p><p>state：根据子类的具体实现来分配，如ReentrantLock加锁,是1，不加锁是0；CountDownLatch设置为5，state就是5</p><p>双端队列：CLH变种的双端队列，Node中存放的是线程</p><p><strong>公平锁和非公平锁</strong></p><ol><li>非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。</li><li>非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了，非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 公平锁会通过 hasQueuedPredecessors 方法判断队列前是否有元素 有就排队 */</span><br><span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>        setExclusiveOwnerThread(current);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 非公平锁上来直接就抢锁 */</span><br><span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>        setExclusiveOwnerThread(current);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201218203120948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>源码说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>        setExclusiveOwnerThread(Thread.currentThread());<span class="hljs-comment">// 第一个线程抢到锁</span><br>    <span class="hljs-keyword">else</span><br>        acquire(<span class="hljs-number">1</span>);<span class="hljs-comment">// 第二个线程及后续线程抢占</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp;<span class="hljs-comment">// 尝试抢占，抢占成功返回true不进入队列</span><br>        <span class="hljs-comment">// acquireQueued 尝试获取锁，若不成功则用LockSupport.park阻塞，直到被唤醒</span><br>        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);<br>    <span class="hljs-comment">// Try the fast path of enq; backup to full enq on failure</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-comment">// 第二次以后进入只需将Node加入队列末尾即可</span><br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) &#123;<br>        node.prev = pred;<br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 第一次进入队列会先初始化，即生成一个空的头节点</span><br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果前置节点是头节点，那么第二个节点会尝试获得锁</span><br><span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg))&#123;&#125;<br></code></pre></td></tr></table></figure><p>JDK9使用VarHandle：普通的原子操作，比反射快，直接操作二进制码</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><blockquote><p>线程独享的Map</p></blockquote><p><strong>ThreadLocalMap中的Entry是弱引用</strong></p><ol><li>若是强引用，即使tl &#x3D;&#x3D; null，但key的引用依然指向ThreadLocal对象，所以有内存泄露，而使用弱引用则不会。</li><li>但还是有内存泄露的存在，ThreadLocalMap 是 Thread 的一个属性，生命周期跟 Thread 一致，当ThreadLocal被回收，key的值变成null，则导致整个value再也无法被访问到，因此依然存在内存泄露。所以ThreadLocal不用了需要调用 <code>remove()</code>回收</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocal&lt;M&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>tl.set(<span class="hljs-keyword">new</span> <span class="hljs-title class_">M</span>());<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210114221056228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/pumpkin/2021/10/18/Java/Basic/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/pumpkin/2021/10/18/Java/Basic/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h1><h2 id="类加载顺序"><a href="#类加载顺序" class="headerlink" title="类加载顺序"></a>类加载顺序</h2><ol><li>类初始化：静态方法 -&gt; 静态代码块，先初始化父类再初始化子类</li><li>实例初始化 ：顺序: 非静态实例变量、非静态代码块、构造器代码</li><li>子类覆写了父类的方法，初始化时只会执行子类的方法，若父类方法没被覆写，则执行父类方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> param();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> paramParent();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> staticParam();<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类静态代码块&quot;</span>);<br>    &#125;<br><br>    Parent()&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类构造方法&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">param</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类实例变量1&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">paramParent</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类实例变量2&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">staticParam</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类静态实例变量&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> param();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> staticParam();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类静态代码块&quot;</span>);<br>    &#125;<br><br>    Child()&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类构造方法&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">param</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类实例变量&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">staticParam</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类静态实例变量&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Child</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>();<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p>父类静态实例变量</p><p>父类静态代码块</p><p>子类静态实例变量</p><p>子类静态代码块</p><p>子类实例变量</p><p>父类实例变量2</p><p>父类代码块</p><p>父类构造方法</p><p>子类实例变量</p><p>子类代码块</p><p>子类构造方法</p><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>静态变量作用在类层面，所有实例都会共享</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticVariableDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> num;<br><br>    &#123;<br>        num++;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">plus</span><span class="hljs-params">()</span>&#123;<br>        num++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StaticVariableDemo</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticVariableDemo</span>();<br>        <span class="hljs-type">StaticVariableDemo</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticVariableDemo</span>();<br>        d1.plus();<br>        d2.plus();<br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><table><thead><tr><th>静态内部类</th><th>非静态内部类</th></tr></thead><tbody><tr><td>可以有静态成员(方法，属性)</td><td>不能有静态成员(方法，属性)</td></tr><tr><td>实例化<br />OutClassTest.InnerStaticClass inner &#x3D; new OutClassTest.InnerStaticClass();</td><td>实例化<br />OutClassTest oc1 &#x3D; new OutClassTest();<br />OutClassTest.InnerClass inner &#x3D; oc1.new InnerClass();</td></tr><tr><td>调用方法或静态变量，通过类名直接调用<br />OutClassTest.InnerStaticClass.staticValue<br />OutClassTest.InnerStaticClass.method()</td><td>实例化出来之后正常调用<br />inner.method()</td></tr></tbody></table><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String中的intern()方法</p><p>如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象的引用，否则会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。</p><p>例题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Hello&quot;</span>).append(<span class="hljs-string">&quot;World&quot;</span>).toString();<br>System.out.println(str1 == str1.intern());      <span class="hljs-comment">// true</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;ja&quot;</span>).append(<span class="hljs-string">&quot;va&quot;</span>).toString();<br>System.out.println(str2 == str2.intern());      <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>解释：有一个JDK自带的初始化的字符串”java”在加载sun.misc.Version这个类的时候进入了常量池</p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul><li>基本数据类型：传递值</li><li>引用数据类型：传地址</li></ul><p>String、包装类等属于引用数据类型，同时是<strong>不可变对象</strong></p><blockquote><p>《Effective Java》<br>不可变对象(Immutable Object)：对象一旦被创建后，对象所有的状态及属性在其生命周期内不会发生任何变化。<br>由于ImmutableObject不提供任何setter方法，并且成员变量value是基本数据类型，getter方法返回的是value的拷贝，所以一旦ImmutableObject实例被创建后，该实例的状态无法再进行更改，因此该类具备不可变性。</p></blockquote><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>对象的序列化主要有两种用途：</p><ol><li>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中</li><li>在网络上传送对象的字节序列</li></ol><p>serialVersionUID作用：序列化时为了保持版本的兼容性，即在版本升级时反序列化仍保持对象的唯一性。</p><p>有两种生成方式：</p><ol><li>默认的1L，比如：private static final long serialVersionUID &#x3D; 1L</li><li>根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> xxxxL;<br></code></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法。对于任意一个对象，都能够调用它的任意方法和属性。</p></blockquote><p>获取 Class 对象的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 User 对象的Class</span><br>Class&lt;User&gt; clazz = User.class;<br>Class&lt;User&gt; clazz = user.getClass();<br>Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.demo.entity.User&quot;</span>);<br>Class&lt;?&gt; clazz = classLoader.loadClass(<span class="hljs-string">&quot;com.demo.entity.User&quot;</span>);<br></code></pre></td></tr></table></figure><p>利用反射创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// User 需要有无参构造</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><span class="hljs-comment">// 利用 User 的有参构造创建</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class).newInstance(<span class="hljs-string">&quot;name&quot;</span>);<br></code></pre></td></tr></table></figure><p>利用反射操作属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据属性名获取属性值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(String fieldName, Object object)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> field.get(object);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        log.warn(<span class="hljs-string">&quot;反射获取数据异常&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">// 根据属性名设置属性值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(String fieldName, Object object, Object value)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Class&lt;?&gt; c = object.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> c.getDeclaredField(fieldName);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(object, value);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        log.warn(<span class="hljs-string">&quot;反射设置数据异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>反射中Class.forName和ClassLoader.loadClass的区别</strong></p><ol><li><p>class.forName除了将类的class文件加载到jvm中之外，还会对类进行解释，执行类中的static块，还会执行给静态变量赋值的静态方法</p></li><li><p>classLoader只干一件事情，就是将class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。</p></li></ol><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>可以通过注解来获取相关属性，通过这些属性再配合反射实现相应业务。</p><p>案例：通过反射获取全类名，再通过全类名实例化对应的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> Channel&#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 连接接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Connection</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">build</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CloudConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Connection</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Connect to cloud&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Connection</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Connect to database&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Channel(&quot;com.demo.basic.annotation.DatabaseConnection&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span>&#123;<br><br>    <span class="hljs-keyword">private</span> Connection conn;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getAnnotation(Channel.class);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 通过反射获取到Connection对象实例</span><br>            conn = (Connection) Class.forName(channel.value()).newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-comment">// 执行build方法，实际上执行的是Connection接口的实现类</span><br>        <span class="hljs-keyword">if</span> (conn.build())&#123;<br>            System.out.println(<span class="hljs-string">&quot;消息发送:&quot;</span> + msg);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        msg.send(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><p>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)<br>按数据流的流向不同分为：输入流，输出流<br>按流的角色的不同分为：节点流，处理流<br><img src="https://img-blog.csdnimg.cn/2020020116265641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IO流体系<br><img src="https://img-blog.csdnimg.cn/20200201162728374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h3><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>File类的实例化</li><li>流的实例化</li><li>读写的操作</li><li>资源的关闭</li></ol><h4 id="字符流操作文件-文本文件"><a href="#字符流操作文件-文本文件" class="headerlink" title="字符流操作文件(文本文件)"></a>字符流操作文件(文本文件)</h4><ol><li>读文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 实例化File类对象，指明要操作的文件</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/file/1.txt&quot;</span>);<br>    <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 提供具体的流</span><br>        fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br>        <span class="hljs-comment">// 每次读1024个字符</span><br>        <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-comment">// read(char[] cbuf) 返回每次读入cbuf数组中字符的个数，如果到达文件末尾，返回-1</span><br>        <span class="hljs-keyword">while</span> ((len = fr.read(cbuf)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>                System.out.print(cbuf[i]);<br>            &#125;<br>        &#125;<br>        fr.read(cbuf);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (fr != <span class="hljs-literal">null</span>)<br>                fr.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>写文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/file/3.txt&quot;</span>);<br>    <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 参数2表示是否对原有文件追加</span><br>        fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file, <span class="hljs-literal">false</span>);<br>        fw.write(<span class="hljs-string">&quot;Hello World 张三&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (fw != <span class="hljs-literal">null</span>)<br>                fw.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>先读后写 – 复制文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyFile</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/file/3.txt&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">dstFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/file/4.txt&quot;</span>);<br>    <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(srcFile);<br>        fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(dstFile, <span class="hljs-literal">false</span>);<br>        <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = fr.read(cbuf)) != -<span class="hljs-number">1</span>)&#123;<br>            fw.write(cbuf, <span class="hljs-number">0</span>, len);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (fr != <span class="hljs-literal">null</span>)<br>                fr.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (fw != <span class="hljs-literal">null</span>)<br>                fw.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字节流操作文件-图片、视频等"><a href="#字节流操作文件-图片、视频等" class="headerlink" title="字节流操作文件(图片、视频等)"></a>字节流操作文件(图片、视频等)</h4><p>复制图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyFile</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/img/1.jpg&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">dstFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/img/2.jpg&quot;</span>);<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br>        fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(dstFile);<br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = fis.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            fos.write(buf, <span class="hljs-number">0</span>, len);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>)<br>                fis.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>)<br>                fos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="缓冲流的使用"><a href="#缓冲流的使用" class="headerlink" title="缓冲流的使用"></a>缓冲流的使用</h4><p>作用：提升流的读取、写入速度。</p><p>复制图片文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyImgFile</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/img/1.jpg&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">dstFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/img/2.jpg&quot;</span>);<br>    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建节点流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(dstFile);<br>        <span class="hljs-comment">// 创建缓冲流</span><br>        bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br>        bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br>        <span class="hljs-comment">// 读取写入</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = bis.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            bos.write(buf, <span class="hljs-number">0</span>, len);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 资源关闭，关闭外层流的同时，内层流也会自动关闭</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (bis != <span class="hljs-literal">null</span>)<br>                bis.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (bos != <span class="hljs-literal">null</span>)<br>                bos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>复制文本文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyTxtFile</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/file/1.txt&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">dstFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/resources/file/5.txt&quot;</span>);<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(srcFile);<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(dstFile);<br>        br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>        bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br>        <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = br.read(cbuf)) != -<span class="hljs-number">1</span>)&#123;<br>            bw.write(cbuf, <span class="hljs-number">0</span>, len);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (br != <span class="hljs-literal">null</span>)<br>                br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (bw != <span class="hljs-literal">null</span>)<br>                bw.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Stream-Api"><a href="#Stream-Api" class="headerlink" title="Stream Api"></a>Stream Api</h2><p>Stream 是数据渠道，用于操作数据源所生成的元素序列。</p><ol><li>Stream 不存储元素</li><li>Stream 不改变源对象，他们会返回一个持有结果的新的 Stream</li><li>Stream 操作是延迟执行的，这意味着他们会等到需要结果的时候执行</li></ol><p>Stream 操作步骤：创建流 -&gt; 中间操作 -&gt; 终止操作</p><p><strong>Stream Create</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.集合类</span><br>Collection.stream();<br><span class="hljs-comment">// 2.数组</span><br>Arrays.stream(T[]);<br><span class="hljs-comment">// 3.of</span><br>Stream.of(T... values);<br><span class="hljs-comment">// 4.创建无限流</span><br><span class="hljs-comment">// 4.1.迭代，案例：获取前10个偶数</span><br>Stream.iterate(<span class="hljs-keyword">final</span> T seed, <span class="hljs-keyword">final</span> UnaryOperator&lt;T&gt; f);<br>Stream.iterate(<span class="hljs-number">0</span>, x -&gt; x + <span class="hljs-number">2</span>).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br><span class="hljs-comment">// 4.2.生成，案例：获取前10个随机数</span><br>Stream.genrate(Supplier&lt;T&gt; s);<br>Stream.generate(Math::random).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure><p><strong>Stream Middle Operation</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 筛选和切片</span><br><span class="hljs-comment"> * - filter     接收lambda，从流冲排除某些元素</span><br><span class="hljs-comment"> * - limit      截断流，使其元素不超过给定数量</span><br><span class="hljs-comment"> * - skip(n)    跳过元素，返回一个扔掉了前n个元素的流，若流中元素不足n个，则返回一个空流，与limit互补</span><br><span class="hljs-comment"> * - distinct   筛选，通过流所生成元素的hashCode()和equals()去除重复元素</span><br><span class="hljs-comment"> */</span><br>emps.stream().filter(e -&gt; e.getSalary() &gt;= <span class="hljs-number">100</span>).limit(<span class="hljs-number">3</span>).forEach(System.out::println);<br>emps.stream().filter(e -&gt; e.getSalary() &gt;= <span class="hljs-number">100</span>).skip(<span class="hljs-number">1</span>).forEach(System.out::println);<br>emps.stream().filter(e -&gt; e.getSalary() &gt;= <span class="hljs-number">100</span>).distinct().forEach(System.out::println);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 映射</span><br><span class="hljs-comment"> * map      接收lambda，将元素转换成其它形式或提取信息。接收另一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新元素。</span><br><span class="hljs-comment"> * flatMap  接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流，类似于list.allAll()</span><br><span class="hljs-comment"> * mapToDouble</span><br><span class="hljs-comment"> * mapToInt</span><br><span class="hljs-comment"> * mapToLong</span><br><span class="hljs-comment"> */</span><br>list.stream().map(String::toUpperCase).forEach(System.out::println);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 排序</span><br><span class="hljs-comment"> * sorted()                 自然排序(Comparable)</span><br><span class="hljs-comment"> * sorted(Comparator com)   定制排序(Comparator)</span><br><span class="hljs-comment"> */</span><br>list.stream().sorted().forEach(System.out::println);<br></code></pre></td></tr></table></figure><p><strong>Stream Termination</strong></p><p>匹配和查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 是否匹配所有元素 allMatch</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> emps.stream().allMatch(e -&gt; e.getStatus().equals(Employee.Status.BUSY));<br><br><span class="hljs-comment">// 至少匹配一个元素 anyMatch</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> emps.stream().anyMatch(e -&gt; e.getStatus().equals(Employee.Status.BUSY));<br><br><span class="hljs-comment">// 检查是否没有匹配所有元素 noneMatch</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> emps.stream().noneMatch(e -&gt; e.getStatus().equals(Employee.Status.BUSY));<br><br><span class="hljs-comment">// 倒排后返回第一个元素 findFirst</span><br>Optional&lt;Employee&gt; op = emps.stream().sorted(Comparator.comparingDouble(Employee::getSalary).reversed()).findFirst();<br>System.out.println(op.get());<br><br><span class="hljs-comment">// 返回任意元素的值 findAny</span><br>Optional&lt;Employee&gt; op1 = emps.stream().filter(e -&gt; e.getStatus().equals(Employee.Status.FREE)).findAny();<br>System.out.println(op1.get());<br><br><span class="hljs-comment">// 返回元素总个数 count</span><br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> emps.stream().count();<br><br><span class="hljs-comment">// 返回流中最大值 max</span><br>Optional&lt;Employee&gt; max = emps.stream().max(Comparator.comparingDouble(Employee::getSalary));<br>System.out.println(max.get());<br><br><span class="hljs-comment">// 返回流中最小值 min</span><br>Optional&lt;Double&gt; min = emps.stream().map(Employee::getSalary).min(Double::compare);<br>System.out.println(min.get());<br></code></pre></td></tr></table></figure><p>归约：可以将流中的元素反复结合起来，得到一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">reduce(T identity, BinaryOperator);<br>reduce(BinaryOperator);<br><span class="hljs-comment">// 案例：求和</span><br>List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> list.stream().reduce(<span class="hljs-number">0</span>, Integer::sum);<br></code></pre></td></tr></table></figure><p>收集：将流转换为其它形式，接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 收集为List</span><br>List&lt;String&gt; list = emps.stream().map(Employee::getName).collect(Collectors.toList());<br><span class="hljs-comment">// 分组</span><br>Map&lt;Employee.Status, List&lt;Employee&gt;&gt; map = emps.stream()<br>    .collect(Collectors.groupingBy(Employee::getStatus));<br><span class="hljs-comment">// 多级分组</span><br>Map&lt;Employee.Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; map = emps.stream()<br>    .collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy(e -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (e.getAge() &lt;= <span class="hljs-number">35</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;青年&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;老年&quot;</span>;<br>        &#125;<br>    &#125;)));<br><span class="hljs-comment">// 分区</span><br>Map&lt;Boolean, List&lt;Employee&gt;&gt; map = emps.stream()<br>    .collect(Collectors.partitioningBy(e -&gt; e.getSalary() &gt; <span class="hljs-number">8000</span>));<br><span class="hljs-comment">// 统计</span><br><span class="hljs-type">DoubleSummaryStatistics</span> <span class="hljs-variable">summary</span> <span class="hljs-operator">=</span> emps.stream()<br>    .collect(Collectors.summarizingDouble(Employee::getSalary));<br>System.out.println(summary.getSum());<br>System.out.println(summary.getAverage());<br>System.out.println(summary.getMax());<br><span class="hljs-comment">// 拼接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> emps.stream().map(Employee::getName).collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的创建过程"><a href="#对象的创建过程" class="headerlink" title="对象的创建过程"></a>对象的创建过程</h3><ol><li><p>class loading</p></li><li><p>class linking (verification preparation resolution)</p></li><li><p>class initializing：静态变量赋值，执行静态语句块</p></li><li><p>申请内存对象</p></li><li><p>成员变量赋值</p></li><li><p>调用构造方法</p><ol><li>成员变量顺序赋初始值</li><li>执行构造方法语句</li></ol></li></ol><h3 id="对象在内存中的存储布局"><a href="#对象在内存中的存储布局" class="headerlink" title="对象在内存中的存储布局"></a>对象在内存中的存储布局</h3><p>一个Object对象占16个字节</p><h4 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h4><ol><li><p>对象头 markdown 8</p></li><li><p>ClassPoniter指针：开启-XX:+UseCompressedClassPoiners 为4字节，不开启为8字节</p></li><li><p>实例数据</p><p>引用类型：开启-XX:+UseCompressedOops为4字节 不开启为8字节</p></li><li><p>Padding对齐：8的倍数</p></li></ol><h4 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h4><ol><li>对象头 markdown 8</li><li>ClassPoniter指针：开启-XX:+UseCompressedClassPoiners 为4字节，不开启为8字节</li><li>数组长度：4字节</li><li>数组数据</li><li>Padding对齐：8的倍数</li></ol><h3 id="对象头信息"><a href="#对象头信息" class="headerlink" title="对象头信息"></a>对象头信息</h3><p>对象头信息包括：对象的HashCode，锁标志位、GC标记（分代的年龄）等</p><p>markword 64位</p><p><img src="https://img-blog.csdnimg.cn/2021011712102443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="对象定位"><a href="#对象定位" class="headerlink" title="对象定位"></a>对象定位</h3><ol><li>句柄池：间接指针，一个指向对象，另一个指向了.class</li><li>直接指针（HotSpot）：直接指向对象，对象再指向.class</li></ol><h3 id="对象分配"><a href="#对象分配" class="headerlink" title="对象分配"></a>对象分配</h3><p>首先new一个对象的时候尝试往栈上分配，如可以分配下，就分配到栈上，栈一弹出对象就没了。</p><p>如果对象过大，栈分配不下，直接分配到堆内存（老年代）。</p><p>如果对象不大，先进行线程本地分配，分配不下找伊甸区，然后进行GC的过程，年龄到了进入老年代。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java JVM</title>
    <link href="/pumpkin/2021/10/18/Java/Basic/JavaJVM/"/>
    <url>/pumpkin/2021/10/18/Java/Basic/JavaJVM/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h3 id="Java从编码到执行"><a href="#Java从编码到执行" class="headerlink" title="Java从编码到执行"></a>Java从编码到执行</h3><p><img src="https://img-blog.csdnimg.cn/20210111203500781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>解释器：bytecode intepreter</p><p>JIT：Just In-Time compiler</p><p>混合使用解释器 + 热点代码编译</p><p>起始阶段采用解释执行</p><p>热点代码检测</p><ul><li><p>多次被调用的方法（方法计数器：监测方法执行频率）</p></li><li><p>多次被调用的循环（循环计数器：监测循环执行频率）</p></li><li><p>进行编译</p></li><li><p>-Xmixed 默认为混合模式 开始解释执行，启动速度较快，对热点代码实行检测和编译</p></li><li><p>-Xint 使用编译模式，启动很快，执行稍慢</p></li><li><p>-Xcomp 使用纯编译模式，执行很快，启动很慢</p></li></ul><h3 id="Class类文件解释"><a href="#Class类文件解释" class="headerlink" title="Class类文件解释"></a>Class类文件解释</h3><p><img src="https://img-blog.csdnimg.cn/20210111220329956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Class生命周期"><a href="#Class生命周期" class="headerlink" title="Class生命周期"></a>Class生命周期</h3><p><img src="https://img-blog.csdnimg.cn/20210111220751109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><p><strong>类加载流程图：</strong><br><img src="https://img-blog.csdnimg.cn/20200131191909464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>类加载器示意图：</strong><br><img src="https://img-blog.csdnimg.cn/20210111220915818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>ClassLoader</strong>：负责加载class文件（class文件在文件开头有特定文件标识）</p><p><strong>各个类加载器的作用</strong></p><p>BootStrapClassLoader 引导类加载器：加载JVM自身需要的类，使用C++实现，负责加载<code>%JAVA_HOME%/jre/lib.jar</code>核心类库。</p><p>ExtensionClassLoader 扩展类加载器：负责加载%JAVA_HOME%&#x2F;lib&#x2F;ext目录下的类。</p><p>AppClassLoader 系统类加载器：负责加载系统类路径<code>java -classpath</code>或<code>-D java.class.path</code> 指定路径下的类库。</p><p>CustomClassLoader 自定义类加载器：继承ClassLoader重写findClass方法</p><p><strong>双亲委派</strong>：JVM收到类加载请求，他会自底向上地去缓存中找这个类，找到了返回，没找到就把这个请求委派给父加载器（不是继承）去寻找，直到BootstrapClassLoader也没找到时，会自顶向下加载这个class，如果到最后还没加载成功，则会抛出异常 <code>ClassNotFoundException</code></p><p>作用：沙箱安全，不让自己定义的类去勿扰JDK出厂自带的类</p><p><img src="https://img-blog.csdnimg.cn/20210111223139570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="JVM-内存模型"><a href="#JVM-内存模型" class="headerlink" title="JVM 内存模型"></a>JVM 内存模型</h2><p><img src="https://img-blog.csdnimg.cn/20200131192106991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li><strong>程序计数器</strong>：存放指令位置，虚拟机的运行就是循环取PC中的指令</li><li><strong>栈</strong>：每个JVM都有自己私有的JVM栈，JVM栈用来存储栈帧</li><li><strong>本地方法栈</strong>：存放native方法的地方。</li><li><strong>堆</strong>：所有线程共享，存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</li><li><strong>方法区</strong>：存储class二进制文件、类信息、常量、静态变量、运行时常量池</li><li><strong>直接内存</strong>：JVM可以直接访问的内核空间的内存。</li></ol><p><strong>图示：线程的共享区和私有区</strong></p><p><img src="https://img-blog.csdnimg.cn/20210119205519997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>栈：每个JVM都有自己私有的JVM栈，JVM栈用来存储Frame</p><p>Frame：每个方法对应一个 Frame</p><p>Frame 存放：Local Variable Table, Operated Stack, Dynamic Linking, Return Address</p><p>Local Variable Table：byte、short、int、long、float、double、boolean、char、reference</p><p>Dynamic Linking：A方法调用B方法，这个过程就叫动态链接</p><p>Return Address：A方法调用B方法，B方法返回值的存放地址</p><p>案例：输出结果为8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将8压入操作数栈，再将8拿出来赋值给i</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-comment">// 将8压入操作数栈，i加1，从操作数栈中弹出8赋值给i</span><br>i = i++;<br><span class="hljs-comment">// 输出最终结果 8</span><br>System.out.println(i);<br></code></pre></td></tr></table></figure><p><strong>栈上分配</strong> </p><p>逃逸分析：逃逸分析的目的是判断对象的作用域是否有可能逃逸出函数体。 </p><p>标量替换：允许将对象打散分配在栈上，比如若一个对象拥有两个字段，会将这两个字段视作局部变量进行分配。 </p><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><h3 id="堆的基本概念"><a href="#堆的基本概念" class="headerlink" title="堆的基本概念"></a>堆的基本概念</h3><p>Java 中的堆是用来存储对象本身的以及数组（当然，数组引用是存放在 Java 栈中的）， 堆是被所有线程共享的，在 JVM 中只有一个堆。所有对象实例以及数组都要在堆上分配内 存，单随着 JIT 发展，栈上分配，标量替换优化技术，在堆上分配变得不那么到绝对，只能在 server 模式下才能启用逃逸分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 左边存放在栈中，右边存放在堆中</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure><h3 id="JVM-内存分代模型"><a href="#JVM-内存分代模型" class="headerlink" title="JVM 内存分代模型"></a>JVM 内存分代模型</h3><blockquote><p>除了 Epsilon ZGC Shenandoah 之外的GC都是使用逻辑分代模型</p><p>G1是逻辑分代，物理不分代</p><p>除上述 GC 模型之外不仅是逻辑分代，而且是物理分代</p></blockquote><p>新生代 &#x3D; Eden区 + 2 个 Suvivor区</p><ol><li>YGC 回收之后，大多数对象被回收，活着的进入S0</li><li>再次 YGC ，活着的对象 Eden + S0 -&gt; S1</li><li>再次 YGC， Eden + S1 -&gt; S0</li><li>年龄足够进入老年代</li><li>分配担保：Suvivor区装不下直接进入老年代</li></ol><p>老年代：</p><ol><li>老年代满了就Full GC</li></ol><p>永久代（1.7）&#x2F; 元空间（1.8）</p><ol><li>永久代 元空间 - Class</li><li>永久代必须指定大小限制，元空间可以设置，也可以不设置，上限取决于物理内存</li><li>字符串常量 1.7 - 永久代，1.8 - 堆</li><li>永久代和元空间都是方法区的实现</li></ol><p>图示</p><p><img src="https://img-blog.csdnimg.cn/20200131193503949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="实例化对象分配"><a href="#实例化对象分配" class="headerlink" title="实例化对象分配"></a>实例化对象分配</h3><ol><li><p>栈上分配</p><p>线程私有小对象、无逃逸、支持标量替换</p></li><li><p>线程本地分配 TLAB （Thread Local Alllocation Buffer）</p><p>默认占用Eden的1%、多线程的时候不用竞争Eden就可以申请空间，提升效率、小对象</p></li><li><p>老年代：大对象</p></li></ol><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><h3 id="GC概述"><a href="#GC概述" class="headerlink" title="GC概述"></a>GC概述</h3><p>GC是什么（分代收集算法）</p><ul><li>频繁收集Young区</li><li>较少收集Old区</li><li>基本不动元空间</li></ul><p>普通GC(Minor GC)：只针对新生代区域的GC，指发生在新生代的垃圾收集动作，因为大部分Java对象存活率不高，所以Minor GC非常频繁，一般回收速度也比较快。</p><p>全局GC(Major GC &#x2F; Full GC)：指发生在老年代的垃圾收集动作，出现了Major GC，经常会伴随至少一次的Minor GC，Major GC的速度一般要比Minor GC慢10倍以上。</p><p><strong>Card Table</strong></p><p>由于做 YGC 时，需要扫描整个 OLD 区，效率非常低，所以 JVM 设计了 Card Table，如果一个 OLD 区的 Card Table 中有对象指向 Y 区，就将它设为 Dirty，下次扫描时，只需要扫描 Ditry Card。在结构上，Card Table 用 Bit Map 实现。</p><p><strong>CSet（Collection Set）</strong></p><p>一组可以被回收的集合，在CSet中存活的数据会在GC的过程中被移动到另一个可用分区，CSet中的分区可以来自Eden、Survivor、Old区，CSet会占用不到整个堆空间1%的大小。简单来说，G1中需要被回收的Card的集合。</p><p><strong>RSet（Remembered Set）</strong></p><p>记录了其它 Region 中的对象到本 Region 的引用</p><p>使得垃圾回收器不需要扫描整个堆栈来找到谁引用了当前分区中的对象，只需要扫描 RSet 即可</p><p>由于RSet的存在，那么每次给对象赋值引用的时候，就得做一些额外的操作：在RSet中做一些额外的记录，在GC中被称为写屏障（这个写屏障 不等于内存屏障）</p><h3 id="如何定位垃圾"><a href="#如何定位垃圾" class="headerlink" title="如何定位垃圾"></a>如何定位垃圾</h3><p><strong>引用计数法</strong></p><p>没有被引用的内存空间就是垃圾，需要被收集</p><p>缺点：计数器本身有消耗，较难处理循环引用</p><p><strong>根可达性分析算法</strong></p><p>通过一系列的名为”GC Root”的对象作为起点，从这些节点向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Root没有任何引用链相连时，则该对象不可达，该对象是不可使用的，垃圾收集器将回收其所占的内存。</p><p>Java 可以做GC Root的对象：局部变量表、静态变量引用的对象、常量池引用的对象、Native方法引用的对象。</p><h3 id="常用的垃圾回收算法"><a href="#常用的垃圾回收算法" class="headerlink" title="常用的垃圾回收算法"></a>常用的垃圾回收算法</h3><ol><li><p>复制算法（Copying）：没有碎片，浪费空间</p><p>YGC用的是复制算法，复制算法的基本思想是将内存分为两块，每次只用其中一块，当一块内存用完，就将还活着的对象复制到另一块上面，复制算法不会产生内存碎片。</p><p>原理：从根集合（GC Root）开始，通过Tracing从From中找到存活对象，拷贝到To中。From和To交换身份，下次内存分配从To开始</p><p>缺点：浪费了一半内存</p></li><li><p>标记清除（Mark-Sweep）：位置不连续，产生碎片，效率偏低（两遍扫描）</p><p>老年代一般由标记清除和标记整理混合实现</p><p>原理：算法分成标记和清除两个阶段。在标记阶段，collector从根对象开始进行遍历，对从根对象可以访问到的对象都打上一个标识，将其记录为可达对象。在清除阶段，collector对堆内存从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象，则就将其回收。</p><p>解释：程序运行期间，可用内存将被耗尽的时候,GC线程就会被触发并将程序暂停，随后将要回收的对象标记一遍，最终统一回收这些对象。</p><p>缺点：两次扫描，耗时严重，会产生内存碎片（清理出来的内存是不连续的）</p></li><li><p>标记清除压缩（Mark-Compact）：没有碎片，效率偏低（两遍扫描，指针需要调整）</p><p>第一步：标记清除<br><img src="https://img-blog.csdnimg.cn/20200117210457686.png" alt="在这里插入图片描述"><br>第二步：压缩，再次扫描，并往一端滑动存活对象<br><img src="https://img-blog.csdnimg.cn/20200117210521309.png" alt="在这里插入图片描述"></p></li></ol><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><ul><li><p>串行回收：单线程，会暂停所有的用户线程，Serial + Serial Old</p></li><li><p>并行回收：多线程，会暂停所有的用户线程，Parallel Scavenge + Parallel Old（JDK8默认）</p></li><li><p>并发标记清除：用户线程和垃圾收集线程同时执行（并行或交替），ParNew + CMS</p><ul><li><p>CMS四个阶段：初始标记，并发标记，重新标记，并发清除</p></li><li><p>CSM的问题：会产生碎片，有浮动垃圾，当老年代碎片过多，换Serial Old上场</p></li><li><p>CMS问题解决方案之一：降低触发CMS的阈值，如果频繁发生SerialOld卡顿，应该调小阈值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-XX:CMSInitiatingOccupancyFraction 70% # 内存空间降低到70%再进行回收，默认是68%<br></code></pre></td></tr></table></figure></li></ul></li><li><p>G1：将堆内存分割成不同的区域并发的对其进行垃圾回收，只在逻辑上分年轻代老年代</p><p>G1可以在大多数情况下实现指定的GC暂停时间，同时还能保持较高的吞吐量。</p><p>G1可以动态地调整新老年代的比例，调整的依据是 YGC 的暂停时间。比如指定的暂定时间是20ms，此时10个 region 中有6个Y区，但回收时间是30ms，那么G1会将6个Y区减少至5个或4个Y区直到暂定时间小于20ms为止。</p><p>G1在对象太多的时候也会产生Full GC，如果产生Full GC，我们应该做：</p><ol><li><p>扩内存</p></li><li><p>提高 CPU 性能</p></li><li><p>降低 MixedGC 触发的阈值，让MixedGC提早发生（默认45%)</p><p>MixedGC（类似CMS）：初始标记STW，并发标记，最终标记STW，筛选回收STW（并行）</p></li></ol></li></ul><p><img src="https://img-blog.csdnimg.cn/2021011714275194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="垃圾回收器算法"><a href="#垃圾回收器算法" class="headerlink" title="垃圾回收器算法"></a>垃圾回收器算法</h3><p><strong>垃圾回收器使用的算法</strong></p><p>CMS：三色标记 + Incremental Update</p><p>G1：三色标记 + SATB（Snapshot at the begining）</p><p>ZGC：Colored Pointers（颜色指针）</p><p><strong>三色标记算法</strong></p><p>三色标记把对象在逻辑上分成三种颜色</p><p>白：未被标记的对象</p><p>灰：自身被标记，成员变量未被标记</p><p>黑：自身和成员变量均已标记完成</p><p>漏标：本来是 live object，但是由于没有遍历到，被当成 garbage 回收掉了。在并发标记的过程中，黑色指向了白色，如果不对黑色重新扫描，则会把白色对象当做没有新引用指向从而回收掉。</p><p>如果解决漏标：Incremental Update、SATB</p><p>Incremental Update（增量更新）：当一个白色对象被一个黑色对象引用，将黑色重启标记为灰色，让 Controller 重新扫描</p><p>SATB（Snapshot at the begining）：在起始的时候做一个快照，当灰色-&gt;白色引用消失时，要把这个引用推到GC的堆栈，下次扫描时拿到这个引用，由于有RSet的存在，不需要扫描整个堆区查找指向白色的引用，效率比较高。</p><p><img src="https://img-blog.csdnimg.cn/20210214141554379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li>强引用：OOM也不回收</li><li>软引用：内存不足时回收</li><li>弱引用：只要执行GC就被回收</li><li>虚引用：跟没引用一样，可以用来管理堆外内存（直接内存），当对象被回收时，通过Queue可以检测到，然后清理堆外内存。堆外内存如何回收 – Unsafe.freeMemory(address)</li></ul><h3 id="GC-常用参数"><a href="#GC-常用参数" class="headerlink" title="GC 常用参数"></a>GC 常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">年轻代 最小堆 最大堆 栈空间</span><br>-Xmn -Xms -Xmx -Xss<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用TLAB，默认打开</span><br>-XX:+UseTLAB<br><span class="hljs-meta prompt_"># </span><span class="language-bash">打印TLAB的使用情况</span><br>-XX:+PrintTLAB<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置TLAB大小</span><br>-XX:TLABSize<br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁用 System.gc()，System.gc()是Full GC</span><br>-XX:+DisableExplictGC<br><span class="hljs-meta prompt_"># </span><span class="language-bash">打印GC</span><br>-XX:+PrintGC<br>-XX:+PrintGCDetails<br>-XX:+PrintGCTimeStamps<br>-XX:+PrintHeapAtGC<br>-XX:+PrintGCTimeStamps<br><span class="hljs-meta prompt_"># </span><span class="language-bash">打印应用程序时间</span><br>-XX:+PrintGCApplicationConcurrentTime<br><span class="hljs-meta prompt_"># </span><span class="language-bash">打印暂停时长</span><br>-XX:+PrintGCApplicationStoppedTime<br><span class="hljs-meta prompt_"># </span><span class="language-bash">记录回收了多少种不同引用类型的引用</span><br>-XX:+PrintReferenceGC<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可在程序运行时，打印虚拟机接受到的命令行显示参数</span><br>-XX:+PrintVMOptions<br><span class="hljs-meta prompt_"># </span><span class="language-bash">GC的升代年龄</span><br>-XX:MaxTenuringThreshold<br><span class="hljs-meta prompt_"># </span><span class="language-bash">锁自旋次数</span><br>-XX:PreBlockSpin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">热点代码检测参数，执行多少次会变成热点代码进行本地化的编译</span><br>-XX:ComplieThreshold<br></code></pre></td></tr></table></figure><h3 id="Parallel-常用参数"><a href="#Parallel-常用参数" class="headerlink" title="Parallel 常用参数"></a>Parallel 常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Survivor的比例</span><br>-XX:SurvivorRatio<br><span class="hljs-meta prompt_"># </span><span class="language-bash">多大的大对象会被直接分配到Old区</span><br>-XX:PreTenureSizeThreshold<br><span class="hljs-meta prompt_"># </span><span class="language-bash">并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同</span><br>-XX:+ParallelGCThreads<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自动选择各区大小比例</span><br>-XX:+UseAdaptiveSizePolicy<br></code></pre></td></tr></table></figure><h3 id="CMS-常用参数"><a href="#CMS-常用参数" class="headerlink" title="CMS 常用参数"></a>CMS 常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用CMS</span><br>-XX:+UseConcMarkSweepGC<br><span class="hljs-meta prompt_"># </span><span class="language-bash">CMS线程数量</span><br>-XX:ParallelCMSThreads<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用多少比例的老年代后开始CMS收集，默认是68%</span><br>-XX:CMSInitiatingOccupancyFraction<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在FGC时进行压缩(标记整理)</span><br>-XX:+UseCMSCompactAtFullCollection<br><span class="hljs-meta prompt_"># </span><span class="language-bash">多少次FGC后进行压缩</span><br>-XX:CMSFullGCsBeforeCompaction<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停顿时间</span><br>-XX:MaxGCPauseMillis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">回收永久代</span><br>-XX:+CMSClassUnloadingEnabled<br><span class="hljs-meta prompt_"># </span><span class="language-bash">达到什么比例时进行Perm回收</span><br>-XX:CMSInitiatingPermOccupancyFraction<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置GC时间占用程序运行时间的百分比</span><br>GCTimeRatio<br></code></pre></td></tr></table></figure><h3 id="G1-常用参数"><a href="#G1-常用参数" class="headerlink" title="G1 常用参数"></a>G1 常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用G1</span><br>-XX:+UseG1GC<br><span class="hljs-meta prompt_"># </span><span class="language-bash">建议最大停顿时间，GC会尝试调整Young区的块数来达到这个值</span><br>-XX:MaxGCPauseMillis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">分区大小，建议逐渐增大该值，1 2 4 8 16 32</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">随着size增加，垃圾存活的时间更长，GC间隔更长，但每次GC的时间也会更长</span><br>-XX:+G1HeapRegionSize<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新生代最小比例，默认5%</span><br>G1NewSizePercent<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新生代最大比例，默认60%</span><br>G1MaxNewSizePercent<br><span class="hljs-meta prompt_"># </span><span class="language-bash">GC时间建议比例，G1会根据这个值调整空间</span><br>GCTimeRatio<br><span class="hljs-meta prompt_"># </span><span class="language-bash">线程数量</span><br>ConcGCThreads<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动G1的堆空间占用比例</span><br>InitiatingHeapOccupancyPercent<br></code></pre></td></tr></table></figure><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>吞吐量：用户代码时间 &#x2F; ( 用户代码执行时间 + 垃圾回收时间 )</p><p>响应时间：STW（Stop The World）越短，响应时间越好</p><h3 id="JVM调优指令"><a href="#JVM调优指令" class="headerlink" title="JVM调优指令"></a>JVM调优指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有指令</span><br>java -X<br>java -XX:+PrintFlagsFinal -version<br><span class="hljs-meta prompt_"># </span><span class="language-bash">模糊查询指令</span><br>java -XX:+PrintFlagsFinal -version | grep Command <br></code></pre></td></tr></table></figure><p>常用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Xms&lt;size&gt;        # 设置初始 Java 堆大小<br>-Xmx&lt;size&gt;        # 设置最大 Java 堆大小<br>-Xss&lt;size&gt;        # 设置 Java 线程堆栈大小<br>-XX:+PrintCommandLineFlags -version# 查看当前使用的垃圾回收器<br>-XX: MetaspaceSize=128m# 修改元空间大小<br>-XX: MaxTenuringThreshold=15# 修改老年代的大小<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">jinfo &lt;pid&gt;# 打印虚拟机详细信息<br>jstat -gc &lt;pid&gt; &lt;time&gt;# 打印gc信息，每&lt;time&gt;毫秒打印一次<br>jconsole# java控制面板<br></code></pre></td></tr></table></figure><h3 id="JVM调优场景"><a href="#JVM调优场景" class="headerlink" title="JVM调优场景"></a>JVM调优场景</h3><p><strong>系统CPU经常100%，如何调优</strong></p><p>CPU 100% 一定有线程在占用系统资源</p><ol><li>找出哪个进程的 CPU 高（top）</li><li>该进程的哪个线程 CPU 高（top - Hp [pid]）</li><li>导出该线程的堆栈（jstack）</li><li>查找哪个方法（栈帧）消耗时间 （jstack）</li><li>工作线程占比高 | 垃圾回收线程占比高</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看Linux中哪个进程占资源</span><br>top<br><span class="hljs-meta prompt_"># </span><span class="language-bash">只列出java的进程</span><br>jps<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看这个&lt;pid&gt;的进程中哪个线程占资源</span><br>top -Hp &lt;pid&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看这个&lt;pid&gt;的线程堆栈</span><br>jstack &lt;pid&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">导出堆内存</span><br>jmap -heap &lt;pid&gt;<br></code></pre></td></tr></table></figure><p><strong>如何监控JVM</strong></p><p>jstat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">格式模板</span><br>jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">常见用法</span><br>jstack &lt;pid&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">类加载统计</span><br>jstat -class 19570<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译统计</span><br>jstat -compiler 19570<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 观察信息</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">死锁</span><br>Found one java-level deadlock<br><span class="hljs-meta prompt_"># </span><span class="language-bash">锁时间过长</span><br>很多线程都在 waiting on &lt;0x00000000eda673f0&gt; 等待锁的释放<br>要找到 &lt;0x00000000eda673f0&gt; 这把锁被哪个线程持有<br>举例说明：一个程序有10个线程，第一个线程持有锁后死循环，其它线程全部WAITING，只有第一个线程是RUNNABLE<br></code></pre></td></tr></table></figure><p>jconsole jvisualvm</p><p><strong>执行GC之后内存占用依然很高</strong></p><p>使用jvisualvm打开GUI面板，监视 -&gt; 堆 Dump，截取一个内存快照。</p><p>检查 -&gt; 查找前20个最大的对象，可以检查到哪几个对象占用了大量的内存。</p><p><strong>JMX不建议在生产环境使用</strong></p><p>JMX一般是在测试环境使用，因为 JMX 会 patch 到 JVM 上而且占用了很大的性能。</p><p>如何在线上系统观察 可以使用 jmap 命令找到占用内存较大的类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jmap -histo 21853 | head -20<br></code></pre></td></tr></table></figure><p>但是对于内存特别大的系统，jmap执行期间会对进程产生很大影响，甚至卡顿</p><p>解决方案1：设定以下参数，OOM的时候会自动生成堆转储文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-XX:+HeapDumpOnOutOfMemoryError<br></code></pre></td></tr></table></figure><p>解决方案2：有服务器备份（高可用），停掉这台服务器对其它服务器不影响</p><h3 id="jconsole-远程连接"><a href="#jconsole-远程连接" class="headerlink" title="jconsole 远程连接"></a>jconsole 远程连接</h3><p>程序启动加入参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Djava.rmi.server.hostname=192.168.17.11<br>-Dcom.sun.management.jmxremote=11111<br>-Dcom.sun.management.jmxremote.authenticate=false<br>-Dcom.sun.management.jmxremote.ssl=false<br></code></pre></td></tr></table></figure><p>windows 打开 jconsole 远程连接 192.168.17.11:11111</p><h3 id="GC-日志分析"><a href="#GC-日志分析" class="headerlink" title="GC 日志分析"></a>GC 日志分析</h3><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Xms20M -Xmx20M -XX:+PrintGCDetails -XX:+UseConcMarkSweepGC GCDemo<br></code></pre></td></tr></table></figure><p>日志说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[GC (Allocation Failure) [ParNew: 4544K-&gt;260K(6144K), 0.0012072 secs] 4544K-&gt;261K(19840K), 0.0012674 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] <br><br>ParNew：年轻代收集器<br><span class="hljs-meta prompt_">4544k-&gt;</span><span class="language-bash">260k: 收集前后对比</span><br>(6144k): 整个年轻代容量<br><span class="hljs-meta prompt_">4544K-&gt;</span><span class="language-bash">261K: 整个堆的情况</span><br>(19840K)：整个堆的大小<br></code></pre></td></tr></table></figure><h3 id="G1-日志"><a href="#G1-日志" class="headerlink" title="G1 日志"></a>G1 日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[GC pause (G1 Evacuation pause)(young)(initial-mark), 0.0015790 secs]<br><br>G1 Evacuation pause: 年轻代复制存活对象<br>initial-mark: 混合回收阶段，这里是YGC混合老年代回收<br></code></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>JVM一个线程的成本：1MB</p><p>线程多了调度成本就高了，造成了CPU的浪费</p><p>class被load到内存之后，class的二进制文件加载到内存里，与此同时生成了class类的对象，该对象指向了二进制文件。class对象存在metaspace</p><p>阿里多租户JVM：每租户单空间，Session based GC</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DevOps/Linux/5.Netty/"/>
    <url>/pumpkin/2021/10/18/DevOps/Linux/5.Netty/</url>
    
    <content type="html"><![CDATA[<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><p>Netty 是一个高性能，异步事件驱动的 NIO 框架，它提供了对 TCP、UDP 的文件传输支持。作为一个异步 NIO 框架，Netty 的所有 IO 操作都是异步非阻塞的，通过 Future-Listener 机制，用户可以通过 主动获取或通知机制获得 IO 操作结果。</p><p>Netty 功能特性如下：</p><ul><li>传输服务，支持 BIO 和 NIO。</li><li>容器集成，支持 OSGI、JBossMC、Spring、Guice 容器。</li><li>协议支持，HTTP、Protobuf、二进制、文本、WebSocket 等一系列常见协议都支持。还支持通过实行编码解码逻辑来实现自定义协议。</li><li>Core 核心，可扩展事件模型、通用通信 API、支持零拷贝的 ByteBuf 缓冲对象。</li></ul><h2 id="长连接和短连接"><a href="#长连接和短连接" class="headerlink" title="长连接和短连接"></a>长连接和短连接</h2><p><strong>长连接</strong></p><p>客户端和服务器连上之后不断开</p><p>应用场景：游戏服务器，服务器可以主动推送数据，传输二进制数据，协议自己攒，占用资源相对较多</p><p><strong>短连接</strong></p><p>客户端和服务器连上会还会断开</p><p>应用场景：Web 服务器，服务器不会主动推送数据，客户端请求后返回数据，传输文本数据，HTTP、HTML，占用资源相对较少</p><h2 id="Netty-Reactor-架构图"><a href="#Netty-Reactor-架构图" class="headerlink" title="Netty Reactor 架构图"></a>Netty Reactor 架构图</h2><p>Server 端包含 1 个 Boss NioEventLoopGroup 和 1 个 Worker NioEventLoopGroup。</p><p>NioEventLoopGroup 相当于 1 个事件循环组，这个组里包含多个事件循环 NioEventLoop，每个 NioEventLoop 包含 1 个 Selector 和 1 个事件循环线程。</p><p>每个 Boss NioEventLoop 循环执行的任务包含 3 步：</p><ul><li>轮询 Accept 事件。</li><li>处理 Accept I&#x2F;O 事件，与 Client 建立连接，生成 NioSocketChannel，并将 NioSocketChannel 注册到某个 Worker NioEventLoop 的 Selector 上。</li><li>处理任务队列中的任务，runAllTasks。任务队列中的任务包括用户调用 eventloop.execute 或 schedule 执行的任务，或者其他线程提交到该 eventloop 的任务。</li></ul><p>每个 Worker NioEventLoop 循环执行的任务包含 3 步：</p><ul><li>轮询 Read、Write 事件。</li><li>处理 I&#x2F;O 事件，即 Read、Write 事件，在 NioSocketChannel 可读、可写事件发生时进行处理。</li><li>处理任务队列中的任务，runAllTasks。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210207155958940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Netty-组件"><a href="#Netty-组件" class="headerlink" title="Netty 组件"></a>Netty 组件</h2><p><strong>Bootstrap、ServerBootstrap</strong></p><p>Bootstrap 意思是引导，一个 Netty 应用通常由一个 Bootstrap 开始，主要作用是配置整个 Netty 程序，串联各个组件，Netty 中 Bootstrap 类是客户端程序的启动引导类，ServerBootstrap 是服务端启动引导类。</p><p><strong>Future、ChannelFuture</strong></p><p>正如前面介绍，在 Netty 中所有的 IO 操作都是异步的，不能立刻得知消息是否被正确处理。</p><p>但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 Future 和 ChannelFutures，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件。</p><p><strong>Channel</strong></p><p>Netty 网络通信的组件，能够用于执行网络 I&#x2F;O 操作。Channel 为用户提供：</p><ul><li>当前网络连接的通道的状态（例如是否打开？是否已连接？）</li><li>网络连接的配置参数 （例如接收缓冲区大小）</li><li>提供异步的网络 I&#x2F;O 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 I&#x2F;O 调用都将立即返回，并且不保证在调用结束时所请求的 I&#x2F;O 操作已完成。 调用立即返回一个 ChannelFuture 实例，通过注册监听器到 ChannelFuture 上，可以 I&#x2F;O 操作成功、失败或取消时回调通知调用方。</li><li>支持关联 I&#x2F;O 操作与对应的处理程序。</li></ul><p>不同协议、不同的阻塞类型的连接都有不同的 Channel 类型与之对应。下面是一些常用的 Channel 类型：</p><ul><li>NioSocketChannel，异步的客户端 TCP Socket 连接。</li><li>NioServerSocketChannel，异步的服务器端 TCP Socket 连接。</li><li>NioDatagramChannel，异步的 UDP 连接。</li><li>NioSctpChannel，异步的客户端 Sctp 连接。</li><li>NioSctpServerChannel，异步的 Sctp 服务器端连接，这些通道涵盖了 UDP 和 TCP 网络 IO 以及文件 IO。</li></ul><p><strong>Selector</strong></p><p>Netty 基于 Selector 对象实现 I&#x2F;O 多路复用，通过 Selector 一个线程可以监听多个连接的 Channel 事件。</p><p>当向一个 Selector 中注册 Channel 后，Selector 内部的机制就可以自动不断地查询(Select) 这些注册的 Channel 是否有已就绪的 I&#x2F;O 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 Channel 。</p><p><strong>NioEventLoop</strong></p><p>NioEventLoop 中维护了一个线程和任务队列，支持异步提交执行任务，线程启动时会调用 NioEventLoop 的 run 方法，执行 I&#x2F;O 任务和非 I&#x2F;O 任务：</p><ul><li>I&#x2F;O 任务，即 selectionKey 中 ready 的事件，如 accept、connect、read、write 等，由 processSelectedKeys 方法触发。</li><li>非 IO 任务，添加到 taskQueue 中的任务，如 register0、bind0 等任务，由 runAllTasks 方法触发。</li></ul><p>两种任务的执行时间比由变量 ioRatio 控制，默认为 50，则表示允许非 IO 任务执行的时间与 IO 任务的执行时间相等。</p><p><strong>NioEventLoopGroup</strong></p><p>NioEventLoopGroup，主要管理 eventLoop 的生命周期，可以理解为一个线程池，内部维护了一组线程，每个线程(NioEventLoop)负责处理多个 Channel 上的事件，而一个 Channel 只对应于一个线程。</p><p><strong>ChannelHandler</strong></p><p>ChannelHandler 是一个接口，处理 I&#x2F;O 事件或拦截 I&#x2F;O 操作，并将其转发到其 ChannelPipeline(业务处理链)中的下一个处理程序。</p><p>ChannelHandler 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类：</p><ul><li>ChannelInboundHandler 用于处理入站 I&#x2F;O 事件。</li><li>ChannelOutboundHandler 用于处理出站 I&#x2F;O 操作。</li></ul><p>或者使用以下适配器类：</p><ul><li>ChannelInboundHandlerAdapter 用于处理入站 I&#x2F;O 事件。</li><li>ChannelOutboundHandlerAdapter 用于处理出站 I&#x2F;O 操作。</li><li>ChannelDuplexHandler 用于处理入站和出站事件。</li></ul><p><strong>ChannelHandlerContext</strong></p><p>保存 Channel 相关的所有上下文信息，同时关联一个 ChannelHandler 对象。</p><p><strong>ChannelPipline</strong></p><p>保存 ChannelHandler 的 List，用于处理或拦截 Channel 的入站事件和出站操作。</p><p>ChannelPipeline 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 Channel 中各个的 ChannelHandler 如何相互交互。</p><p>下图引用 Netty 的 Javadoc 4.1 中 ChannelPipeline 的说明，描述了 ChannelPipeline 中 ChannelHandler 通常如何处理 I&#x2F;O 事件。</p><p>I&#x2F;O 事件由 ChannelInboundHandler 或 ChannelOutboundHandler 处理，并通过调用 ChannelHandlerContext 中定义的事件传播方法。</p><p>例如 ChannelHandlerContext.fireChannelRead（Object）和 ChannelOutboundInvoker.write（Object）转发到其最近的处理程序。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20181102/d5981ee92f2442e2a0dc16b9b970a288.jpeg" alt="img"></p><p>入站事件由自下而上方向的入站处理程序处理，如图左侧所示。入站 Handler 处理程序通常处理由图底部的 I&#x2F;O 线程生成的入站数据。</p><p>通常通过实际输入操作（例如 SocketChannel.read（ByteBuffer））从远程读取入站数据。</p><p>出站事件由上下方向处理，如图右侧所示。出站 Handler 处理程序通常会生成或转换出站传输，例如 write 请求。</p><p>I&#x2F;O 线程通常执行实际的输出操作，例如 SocketChannel.write（ByteBuffer）。</p><p>在 Netty 中每个 Channel 都有且仅有一个 ChannelPipeline 与之对应，它们的组成关系如下：</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20181102/0676b41896ee4f8e87a006e993cca570.jpeg" alt="img"></p><p>一个 Channel 包含了一个 ChannelPipeline，而 ChannelPipeline 中又维护了一个由 ChannelHandlerContext 组成的双向链表，并且每个 ChannelHandlerContext 中又关联着一个 ChannelHandler。</p><p>入站事件和出站事件在一个双向链表中，入站事件会从链表 head 往后传递到最后一个入站的 handler，出站事件会从链表 tail 往前传递到最前一个出站的 handler，两种类型的 handler 互不干扰。</p><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><p>Netty 中的 I&#x2F;O 操作是异步的，包括 Bind、Write、Connect 等操作会简单的返回一个 ChannelFuture。</p><p>调用者并不能立刻获得结果，而是通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得 IO 操作结果。</p><p>当 Future 对象刚刚创建时，处于非完成状态，调用者可以通过返回的 ChannelFuture 来获取操作执行的状态，注册监听函数来执行完成后的操作。</p><h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><blockquote><p>Direct Buffers 使用堆外直接内存</p></blockquote><p>Netty 接收和发送 ByteBuffer 使用堆外直接内存进行 Socket 读写，不需要进行字节缓冲区的二次拷贝。</p><p>Netty 提供了组合 Buffer 对象，可以聚合多个 ByteBuffer 对象，用户可以像操作一个 Buffer 那样方便的对组合 Buffer 进行操作，避免了传统通过内存拷贝的方式将几个小 Buffer 合并成一个大 Buffer。</p><p>Netty 的文件传输采用了 transferTo 方法，它可以直接将文件缓冲区的数据发送到目标 Channel，避免传统循环 write 方式导致的内存拷贝问题。</p><h2 id="无锁设计-线程绑定"><a href="#无锁设计-线程绑定" class="headerlink" title="无锁设计 线程绑定"></a>无锁设计 线程绑定</h2><p>Netty 采用了串行无锁化设计，在 IO 线程内部进行串行操作，避免在多线程竞争导致的性能下降。</p><p>Netty 的 NioEventLoop 读取到消息后，直接调用 ChannelPipeline 的 fireChannelRead 方法，只要用户不主动切换线程，一直会由 NioEventLoop 调用到用户的 Handler，期间不进行线程切换，这种串行化的方式避免了多线程操作导致的锁竞争，从性能角度看是最优的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DevOps/Linux/4.Tomcat/"/>
    <url>/pumpkin/2021/10/18/DevOps/Linux/4.Tomcat/</url>
    
    <content type="html"><![CDATA[<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><p>Tomcat为什么慢，因为它在应用层，是Java开发跑在JVM上的，相当于在内核上又虚拟的一块内存出来，在CPU调内核的时候又切换成虚拟机的状态，所以性能低。</p><p><img src="https://img-blog.csdnimg.cn/202101161546587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>面向组件架构</li><li>基于JMX</li><li>事件侦听</li></ul><h2 id="面向组件架构"><a href="#面向组件架构" class="headerlink" title="面向组件架构"></a>面向组件架构</h2><p>tomcat代码看似很庞大，但从结构上看却很清晰和简单，它主要由一堆组件组成，如Server、Service、Connector等，并基于JMX管理这些组件，另外实现以上接口的组件也实现了代表生存期的接口Lifecycle，使其组件履行固定的生存期，在其整个生存期的过程中通过事件侦听LifecycleEvent实现扩展。Tomcat的核心类图如下所示：</p><p><img src="https://p-blog.csdn.net/images/p_blog_csdn_net/cutesource/EntryImages/20091214/coreClass.jpg" alt="img"></p><p>Catalina：与开始&#x2F;关闭shell脚本交互的主类，因此如果要研究启动和关闭的过程，就从这个类开始看起。</p><p>Server：是整个Tomcat组件的容器，包含一个或多个Service。</p><p>Service：Service是包含Connector和Container的集合，Service用适当的Connector接收用户的请求，再发给相应的Container来处理。</p><p>Connector：实现某一协议的连接器，如默认的有实现HTTP、HTTPS、AJP协议的。</p><p>Container：可以理解为处理某类型请求的容器，处理的方式一般为把处理请求的处理器包装为Valve对象，并按一定顺序放入类型为Pipeline的管道里。Container有多种子类型：Engine、Host、Context和Wrapper，这几种子类型Container依次包含，处理不同粒度的请求。另外Container里包含一些基础服务，如Loader、Manager和Realm。</p><p>Engine：Engine包含Host和Context，接到请求后仍给相应的Host在相应的Context里处理。</p><p>Host：就是我们所理解的虚拟主机。</p><p>Context：就是我们所部属的具体Web应用的上下文，每个请求都在是相应的上下文里处理的。</p><p>Wrapper：Wrapper是针对每个Servlet的Container，每个Servlet都有相应的Wrapper来管理。</p><p>可以看出Server、Service、Connector、Container、Engine、Host、Context和Wrapper这些核心组件的作用范围是逐层递减，并逐层包含。</p><p><strong>下面就是些被Container所用的基础组件</strong></p><p>Loader：是被Container用来载入各种所需的Class。</p><p>Manager：是被Container用来管理Session池。</p><p>Realm：是用来处理安全里授权与认证。</p><h2 id="基于JMX"><a href="#基于JMX" class="headerlink" title="基于JMX"></a>基于JMX</h2><p>Tomcat会为每个组件进行注册过程，通过Registry管理起来，而Registry是基于JMX来实现的，因此在看组件的init和start过程实际上就是初始化MBean和触发MBean的start方法，会大量看到形如下面这样的代码，这实际上就是通过JMX管理各种组件的行为和生命期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Registry.getRegistry(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>).invoke(mbeans, <span class="hljs-string">&quot;init&quot;</span>, <span class="hljs-literal">false</span>);<br>Registry.getRegistry(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>).invoke(mbeans, <span class="hljs-string">&quot;start&quot;</span>, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h2 id="事件侦听"><a href="#事件侦听" class="headerlink" title="事件侦听"></a>事件侦听</h2><p>各个组件在其生命期中会有各种各样行为，而这些行为都有触发相应的事件，Tomcat就是通过侦听这些时间达到对这些行为进行扩展的目的。在看组件的init和start过程中会看到大量如：</p><p>lifecycle.fireLifecycleEvent(AFTER_START_EVENT, null);这样的代码，这就是对某一类型事件的触发，如果你想在其中加入自己的行为，就只用注册相应类型的事件即可。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DevOps/Linux/2.IO%E6%A8%A1%E5%9E%8B/"/>
    <url>/pumpkin/2021/10/18/DevOps/Linux/2.IO%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><h2 id="基本概念说明"><a href="#基本概念说明" class="headerlink" title="基本概念说明"></a>基本概念说明</h2><p><strong>用户空间和内核空间</strong></p><p>操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核，保证内核的安全，操心系统将虚拟空间划分为两部分：内核空间，用户空间。</p><p><strong>进程切换</strong></p><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。进程切换很消耗资源。</p><p><strong>进程阻塞</strong></p><p>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。当进程进入阻塞状态，是不占用CPU资源的。</p><p><strong>文件描述符</strong></p><p>是一个用于表述指向文件的引用的抽象化概念。它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。一个 Socket 连接实际上就是一个文件描述符。</p><p>查看一个进程的文件描述符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /proc/&#123;pid&#125;/fd<br></code></pre></td></tr></table></figure><p><strong>缓存IO</strong></p><p>缓存 I&#x2F;O 又被称作标准 I&#x2F;O，大多数文件系统的默认 I&#x2F;O 操作都是缓存 I&#x2F;O。在 Linux 的缓存 I&#x2F;O 机制中，操作系统会将 I&#x2F;O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p><p><strong>说明</strong></p><p>客户端连接先到达内核，read命令可以读文件描述符</p><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><blockquote><p>阻塞</p></blockquote><p>同步阻塞，等待 read 命令时，线程一直处于阻塞状态。所以每次连接都要抛出一个新的线程。</p><p><strong>流程</strong></p><ol><li>客户端连接进入时阻塞，等待用户线程响应</li><li>用户线程响应后返回给客户端</li></ol><p><strong>弊端</strong></p><p>用户需要等待read将socket中的数据读取到buffer后，才继续处理接收的数据。整个IO请求的过程中，用户线程是被阻塞的，这导致用户在发起IO请求时，不能做任何事情，对CPU的资源利用率不够。</p><p><img src="https://img-blog.csdnimg.cn/20210202222236861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><blockquote><p>轮询</p></blockquote><p>同步非阻塞，轮询文件描述符调用 read，一个线程可以对应多个客户端连接。</p><p><strong>流程</strong></p><ol><li>客户端连接进入时不阻塞，而是把每个文件描述符放入List</li><li>对 List 里的文件描述符进行遍历，如果有数据则直接返回</li></ol><p><strong>弊端</strong></p><p>用户需要不断地调用read，尝试读取socket中的数据，直到读取成功后，才继续处理接收的数据。整个IO请求的过程中，虽然用户线程每次发起IO请求后可以立即返回，但是为了等到数据，仍需要不断地轮询、重复请求，消耗了大量的CPU的资源。</p><p><img src="https://img-blog.csdnimg.cn/2021020222244755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="NIO-多路复用"><a href="#NIO-多路复用" class="headerlink" title="NIO 多路复用"></a>NIO 多路复用</h2><blockquote><p>内核增加了 select 系统调用</p></blockquote><p><strong>流程</strong></p><ol><li>用户空间线程调用 select</li><li>内核轮询所有文件描述符并标记 ready 的文件描述符，之后将所有文件描述符返回给用户线程</li><li>用户线程遍历所有文件描述符挑出 ready 的去调用 read</li></ol><p><strong>缺陷</strong>：用户态和内核态传递数据的成本较高</p><p><img src="https://img-blog.csdnimg.cn/20210202224819803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><blockquote><p>用户空间和内核空间之间多出了一块虚拟的共享空间，共享空间是通过内核的系统调用 mmap 实现的。</p><p>共享空间的增删改操作由内核空间完成，但查询是用户空间和内核空间都可以查。</p></blockquote><p><strong>流程</strong></p><ol><li>每次客户端连接进来用户空间线程就将其文件描述符放入共享空间的红黑树中</li><li>此时用户空间调用 wait 等待事件</li><li>当内核准备好了数据，就将红黑树中已经 ready 的文件描述符放入链表中</li><li>此时用户空间 wait 释放，取链表中的文件描述符去调用 read</li></ol><p><img src="https://img-blog.csdnimg.cn/20210202232431428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><blockquote><p>零拷贝是通过系统调用 sendfile 实现的</p></blockquote><p>如果需要拷贝 file.txt 文件，用户空间线程调用内核的 read ，再去调用 write 返回到网卡。</p><p><img src="https://img-blog.csdnimg.cn/20210202230912874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 如果通过零拷贝，就可以直接调用内核的 sendfile，可以不跟用户空间产生IO</p><p><img src="https://img-blog.csdnimg.cn/20210202230508156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DevOps/Linux/1.Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/pumpkin/2021/10/18/DevOps/Linux/1.Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## ls</span></span><br>ls -a # 列出所有，包含隐藏<br>ls -l # 列出详细信息<br>ls -h # 配合-l显示文件大小<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通配符</span><br>* 可以代表任意多个的字符<br>? 代表任意一个字符<br>[] 表示可以匹配字符组的任一个 <br>例如 [abc] [a-d]<br>示例：ls [abc]a.txt<br></code></pre></td></tr></table></figure><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd # 切换到当前用户主目录<br>cd ~# 切换到当前用户主目录<br>cd .# 保持在当前目录<br>cd ..# 返回上一级<br>cd -# 在最近两次目录之间切换<br></code></pre></td></tr></table></figure><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir dir# 创建目录<br>mkdir -p dir1/dir2# 递归创建子目录<br></code></pre></td></tr></table></figure><h3 id="rm-cp-mv"><a href="#rm-cp-mv" class="headerlink" title="rm cp mv"></a>rm cp mv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -r # 递归删除文件夹下的所有内容<br>rm -f # 强制删除，无需提示<br>cp -r # 复制目录文件，则递归复制子文件<br>mv# 移动文件<br></code></pre></td></tr></table></figure><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">衔接：前一个命令的输出作为后一个命令的输入</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">管道会触发创建子进程</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">常用管道命令: more grep</span><br>ls -a | grep [keyword]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">详细参数</span><br>-n 显示匹配行及行号<br>-v 显示不包含匹配文本的所有行(求反)<br>-i 忽略大小写<br>^a行首，搜寻以a开头的行<br><span class="hljs-meta prompt_">ke$</span><span class="language-bash">行尾，搜寻以ke结尾的行</span><br>示例：grep -nvi “hello world” 1.txt<br></code></pre></td></tr></table></figure><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有端口(包括监听和未监听的)</span><br>netstat -a<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有TCP端口</span><br>netstat -at<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有的UDP端口</span><br>netstat -au<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有监听状态下的端口</span><br>netstat -l<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有监听状态下的TCP端口</span><br>netstat -lt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有监听状态下的UDP端口</span><br>netstat -lu<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有监听状态下的UNIX端口</span><br>netstat -lx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出指定端口的进程</span><br>netstat -an | grep &#x27;:80&#x27;<br></code></pre></td></tr></table></figure><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">独立命令(只能使用其中一个):<br>-c: 建立压缩档案<br>-x: 解压<br>-t: 查看内容<br>-r: 向压缩归档文件末尾追加文件<br>-u: 更新原压缩包中的文件<br><br>可选命令:<br>-z: 有gzip属性的<br>-j: 有bz2属性的<br>-Z: 有compress属性的<br>-v: 显示所有过程<br>-O: 将文件解开到标准输出<br><br>必需命令:<br>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。<br><br>tar -xvf file.tar # 解压file.tar并展示过程<br>tar -xvzf file.tar.gz # 解压file.tar.gz并展示过程<br>tar -xjvf file.tar.bz2# 解压file.tar.bz2并展示过程<br>tar -xZvf file.tar.Z# 解压file.tar.Z并展示过程<br><br>tar -cvf all.tar * # 将目录里所有文件打包成all.tar<br>tar -czf jpg.tar.gz *.jpg   # 将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个名为jpg.tar.gz的压缩包<br>tar -cjf jpg.tar.bz2 *.jpg # 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个名为jpg.tar.bz2的压缩包<br>tar -cZf jpg.tar.Z *.jpg    # 将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个jpg.tar.Z的压缩包<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## rar,zip</span></span><br>unrar e file.rar<br>unzip file.zip<br><br>rar a jpg.rar *.jpg # rar格式的压缩<br>zip jpg.zip *.jpg # zip格式的压缩<br></code></pre></td></tr></table></figure><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p><strong>命令格式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail [param] [doc]<br></code></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>-f 循环读取</li><li>-q 不显示处理信息</li><li>-v 显示详细的处理信息</li><li>-c&lt;数目&gt; 显示的字节数</li><li>-n&lt;行数&gt; 显示文件的尾部 n 行内容</li><li>–pid&#x3D;PID 与-f合用,表示在进程ID,PID死掉之后结束</li><li>-q, –quiet, –silent 从不输出给出文件名的首部</li><li>-s, –sleep-interval&#x3D;S 与-f合用,表示在每次反复的间隔休眠S秒</li></ul><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo<br>echo 1 &gt; 1.txt# 将1输出到1.txt中<br>echo 1 &gt;&gt; 1.txt# 将11追加到1.txt中<br></code></pre></td></tr></table></figure><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat# 查看文件内容<br>cat -b# 对非空输出行号<br>cat -n# 对所有行输出行号<br>more# 分屏查看文件内容<br></code></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find [路径] -name ”*.py“ # 查找指定路径下扩展名是.py的文件，包括子目录<br></code></pre></td></tr></table></figure><h2 id="系统相关命令"><a href="#系统相关命令" class="headerlink" title="系统相关命令"></a>系统相关命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看系统时间</span><br>date<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看日历, -y 查看一年的日历</span><br>cal<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示磁盘剩余空间 -h:以人性化的方式显示</span><br>df -h<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示目录下的文件大小</span><br>du -h [目录名]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看进程状态 a:显示所有进程 u:显示进程详细状态 x:显示没有控制终端的进程</span><br>ps aux<br><span class="hljs-meta prompt_"># </span><span class="language-bash">动态显示运行中的程序并排序</span><br>top<br><span class="hljs-meta prompt_"># </span><span class="language-bash">终止指定代号的进程，-9表示强行终止</span><br>kill [pid]<br>kill -9 [pid]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据进程名查看运行进程</span><br>ps -ef | grep [进程名]<br></code></pre></td></tr></table></figure><p>软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">类似于windows的快捷方式，源文件要使用绝对路径，方便移动链接文件后还能使用</span><br>ln -s [source] [target]<br></code></pre></td></tr></table></figure><p>硬链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">硬连接的源文件被删除，目标文件还是可以打开</span><br>ln [source] [target]<br></code></pre></td></tr></table></figure><p>在 Linux 中，文件名和文件数据是分开存储的</p><p>在 Linux 中，只有文件的硬链接数等于0才会被删除</p><p>使用 ls -l 可以查看一个文件的硬链接数量</p><p><img src="https://img-blog.csdnimg.cn/20210406230655759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Vi命令"><a href="#Vi命令" class="headerlink" title="Vi命令"></a>Vi命令</h2><ol><li><p>命令行模式</p><p>   按「ESC」键</p></li><li><p>插入模式</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">「<span class="hljs-selector-tag">i</span>」：进入插入模式，从光标当前位置开始输入文件。<br>「<span class="hljs-selector-tag">a</span>」：进入插入模式，从目前光标所在位置的下一个位置开始输入文字。<br>「o」：进入插入模式，插入新的一行，从行首开始输入文字。<br></code></pre></td></tr></table></figure><ol start="3"><li>移动光标</li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs elixir">「ctrl」+「b」：屏幕往<span class="hljs-string">&quot;后&quot;</span>移动一页。<br>「ctrl」+「f」：屏幕往<span class="hljs-string">&quot;前&quot;</span>移动一页。<br>「ctrl」+「u」：屏幕往<span class="hljs-string">&quot;后&quot;</span>移动半页。<br>「ctrl」+「d」：屏幕往<span class="hljs-string">&quot;前&quot;</span>移动半页。<br>「<span class="hljs-number">0</span>」：移到文章的开头。<br>「G」：移动到文章的最后。<br>「<span class="hljs-variable">$」</span>：移动到光标所在行的<span class="hljs-string">&quot;行尾&quot;</span>。<br>「^」：移动到光标所在行的<span class="hljs-string">&quot;行首&quot;</span><br>「w」：光标跳到下个字的开头<br>「e」：光标跳到下个字的字尾<br>「b」：光标回到上个字的开头<br></code></pre></td></tr></table></figure><ol start="4"><li>删除文字</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">「x」：删除光标所在位置的<span class="hljs-string">&quot;后面&quot;</span><span class="hljs-number">1</span>个字符。<br>「#x」：删除光标所在位置的<span class="hljs-string">&quot;后面&quot;</span>#个字符。<br>「X」：删除光标所在位置的<span class="hljs-string">&quot;前面&quot;</span><span class="hljs-number">1</span>个字符。<br>「#X」：删除光标所在位置的<span class="hljs-string">&quot;前面&quot;</span>#个字符。<br>「dd」：删除光标所在行。<br>「#dd」：从光标所在行开始删除#行<br></code></pre></td></tr></table></figure><ol start="5"><li>复制文字</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">「yw」：复制光标到行尾的字符。<br>「#yw」：复制#个字符。<br>「yy」：复制光标所在行。<br>「#yy」：复制包含光标所在行及后面的#行文字。<br>「p」：粘贴复制的文字到光标所在位置。<br></code></pre></td></tr></table></figure><ol start="6"><li>替换文字</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">「<span class="hljs-built_in">r</span>」：替换光标所在处的字符。<br>「<span class="hljs-built_in">R</span>」：替换光标所到之处的字符，直到按下「ESC」键为止。<br></code></pre></td></tr></table></figure><ol start="7"><li>返回上一次操作</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">按「u」键<br></code></pre></td></tr></table></figure><ol start="8"><li>更改</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">「cw」：更改光标后到行尾的所有字符<br>「c#w」：更改光标后的#个字符<br></code></pre></td></tr></table></figure><ol start="9"><li>跳至指定的行</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">「ctrl」+「g」：列出光标所在行的行号。<br>「#G」：移动光标至文章的第#行行首。<br></code></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>从指定url下载资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y wget<br>wget http://download.redis.io/releases/redis-5.0.5.tar.gz<br></code></pre></td></tr></table></figure><p>Linux开机启动项目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">/etc/init.d<br></code></pre></td></tr></table></figure><p>Linux环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">修改环境变量</span><br>vi /etc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启环境变量</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><p>nc命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 安装包</span><br>yum install <span class="hljs-literal">-y</span> nmap<span class="hljs-literal">-ncat</span><br><span class="hljs-comment"># 监听TCP/UDP端口</span><br>nc localhost <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>后台启动程序并输出日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup java -jar myproject.jar &gt;myproject.log 2&gt;&amp;1 &amp;<br><br>命令详解：<br>nohup：不挂断地运行命令，退出帐户之后继续运行相应的进程。<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">myproject.log：控制台输出到myproject.log日志文件中。</span><br><span class="hljs-meta prompt_">2&gt;</span><span class="language-bash">&amp;1：标准错误重定向到标准输出。</span><br>最后的&amp;：让改作业在后台运行。<br></code></pre></td></tr></table></figure><p>父子进程</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/bin/bash 开启一个子进程<br>父子进程间数据是隔离的，但是父进程可以使用 <span class="hljs-built_in">export</span> 使子进程看到数据<br><span class="hljs-built_in">export</span> 的环境变量，子进程修改不会影响父进程，父进程修改也不会影响子进程<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DataSource/redis/redis%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5/"/>
    <url>/pumpkin/2021/10/18/DataSource/redis/redis%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="redis过期策略"><a href="#redis过期策略" class="headerlink" title="redis过期策略"></a>redis过期策略</h1><p><strong>定期删除</strong>：redis每隔100ms就随机抽取一些设置了过期时间的key，检查是否过期，如果过期就删除。</p><p><strong>惰性删除</strong>：在获取某个key的时候，redis会检查一下，这个key如果过期了就会被删除。</p><p><strong>内存淘汰机制</strong></p><p>当redis内存占用过高的时候，此时会进行淘汰，有如下策略</p><ol><li>noeviction：当内存不足以容纳新写入数据时，新写入被报错</li><li>allkeys-lru（常用）：当内存不足以容纳新写入数据时，移除最近最久未使用的key</li><li>allkeys-random：当内存不足以容纳新写入数据时，随机移除某个key</li><li>volatile-lru：当内存不足以容纳新写入数据时，在设置过期时间的key中，移除最近最最久未使用的key</li><li>volatile-random：当内存不足以容纳新写入数据时，在设置过期时间的key中，随机移除某个key</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在设置过期时间的key中，有更早过期时间的key优先移除</li><li>allkeys-lfu：当内存不足以容纳新写入数据时，移除最近最少使用的key</li><li>volatile-lfu：当内存不足以容纳新写入数据时，在设置过期时间的key中，移除最近最少使用的key</li></ol><p>内存淘汰机制的配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">maxmemory<span class="hljs-literal">-policy</span> noeviction<br></code></pre></td></tr></table></figure><p>LRU</p><p>核心算法：LinkedHashMap</p><p>原理：可以重写 <code>removeEldestEntry</code> 方法，使得在容量超出 size 的时候，可以执行淘汰策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LruCacheDemo</span>&lt;K, V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;   <span class="hljs-comment">// 缓存容量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LruCacheDemo</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span>&#123;<br>        <span class="hljs-built_in">super</span>(capacity, <span class="hljs-number">0.75F</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeEldestEntry</span><span class="hljs-params">(Map.Entry&lt;K, V&gt; eldest)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.size() &gt; capacity;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        LruCacheDemo&lt;Integer, String&gt; lru = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LruCacheDemo</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>        lru.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        lru.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>        lru.put(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>        lru.get(<span class="hljs-number">1</span>);<br>        lru.put(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>        System.out.println(lru.keySet());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 哈希 + 双向链表 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LruDemo</span> &#123;<br><br>    <span class="hljs-comment">// 构造一个Node节点作为数据载体</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K, V&gt;&#123;<br>        K key;<br>        V value;<br>        Node&lt;K, V&gt; prev;<br>        Node&lt;K, V&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-built_in">this</span>.prev = <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(K key, V value)</span>&#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.prev = <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 构建一个虚拟的双向链表，存放Node</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleLinkedList</span>&lt;K, V&gt;&#123;<br>        Node&lt;K, V&gt; head;<br>        Node&lt;K, V&gt; tail;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DoubleLinkedList</span><span class="hljs-params">()</span>&#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>            tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>            head.next = tail;<br>            tail.prev = head;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHead</span><span class="hljs-params">(Node&lt;K, V&gt; node)</span>&#123;<br>            node.next = head.next;<br>            node.prev = head;<br>            head.next.prev = node;<br>            head.next = node;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeNode</span><span class="hljs-params">(Node&lt;K, V&gt; node)</span>&#123;<br>            node.next.prev = node.prev;<br>            node.prev.next = node.next;<br>            node.prev = <span class="hljs-literal">null</span>;<br>            node.next = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Node&lt;K, V&gt; <span class="hljs-title function_">getLast</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> tail.prev;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> cacheSize;<br><br>    Map&lt;Integer, Node&lt;Integer, Integer&gt;&gt; map;<br><br>    DoubleLinkedList&lt;Integer, Integer&gt; doubleLinkedList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LruDemo</span><span class="hljs-params">(<span class="hljs-type">int</span> cacheSize)</span>&#123;<br>        <span class="hljs-built_in">this</span>.cacheSize = cacheSize;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        doubleLinkedList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleLinkedList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span>&#123;<br>        <span class="hljs-keyword">if</span> (map.containsKey(key))&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        Node&lt;Integer, Integer&gt; node = map.get(key);<br>        doubleLinkedList.removeNode(node);<br>        doubleLinkedList.addHead(node);<br>        <span class="hljs-keyword">return</span> node.value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-comment">// 更新</span><br>        <span class="hljs-keyword">if</span> (map.containsKey(key))&#123;<br>            Node&lt;Integer, Integer&gt; node = map.get(key);<br>            node.value = value;<br>            map.put(key, node);<br>            doubleLinkedList.removeNode(node);<br>            doubleLinkedList.addHead(node);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 满了 删除链表最后的Node</span><br>            <span class="hljs-keyword">if</span> (map.size() == cacheSize)&#123;<br>                Node&lt;Integer, Integer&gt; lastNode = doubleLinkedList.getLast();<br>                map.remove(lastNode.key);<br>                doubleLinkedList.removeNode(lastNode);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 新增</span><br>        Node&lt;Integer, Integer&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(key, value);<br>        map.put(key, node);<br>        doubleLinkedList.addHead(node);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LruDemo</span> <span class="hljs-variable">lru</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LruDemo</span>(<span class="hljs-number">3</span>);<br>        lru.put(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        lru.put(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>        lru.put(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>        lru.get(<span class="hljs-number">1</span>);<br>        lru.put(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>        System.out.println(lru.map.keySet());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DataSource/redis/redis%E9%9B%86%E7%BE%A4/"/>
    <url>/pumpkin/2021/10/18/DataSource/redis/redis%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="redis集群"><a href="#redis集群" class="headerlink" title="redis集群"></a>redis集群</h1><h2 id="redis单机问题与解决"><a href="#redis单机问题与解决" class="headerlink" title="redis单机问题与解决"></a>redis单机问题与解决</h2><ol><li>单点故障：增加从机，只可以读不可以写</li><li>容量有限：通过业务将redis拆分成多个</li><li>压力较大：在同一种业务下再进行细分，如将每1kw的用户存入一个redis</li></ol><p><img src="https://img-blog.csdnimg.cn/20210213111000825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="集群之间的通信"><a href="#集群之间的通信" class="headerlink" title="集群之间的通信"></a>集群之间的通信</h2><p>各个数据库相互通信，保存各个库中槽的编号数据</p><ul><li><p>一次命中，直接返回</p></li><li><p>一次未命中，告知具体位置</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200203150519604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p>准备三个redis服务，6379 6380 6381</p><h3 id="命令启动集群"><a href="#命令启动集群" class="headerlink" title="命令启动集群"></a>命令启动集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">主机正常启动</span><br>redis-server ./6379.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从机追随主机启动</span><br>redis-server ./6380.conf --replicaof 127.0.0.1 6379<br>redis-server ./6381.conf --replicaof 127.0.0.1 6379<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果没有哨兵模式，主机6379挂了，人工将从机6380切换为主机，并让6381追随它</span><br>127.0.0.1:6380&gt; replicaof no one<br>127.0.0.1:6381&gt; replicaof 127.0.0.1 6380<br></code></pre></td></tr></table></figure><h3 id="配置文件启动集群"><a href="#配置文件启动集群" class="headerlink" title="配置文件启动集群"></a>配置文件启动集群</h3><ol><li>修改redis.conf<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开启集群</span><br>cluster-enabled yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置集群配置文件，每个服务器要不一样</span><br>cluster-config-file node-6379.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置下线时间</span><br>cluster-node-timeoout 10000<br></code></pre></td></tr></table></figure></li><li>依次启动集群服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server redis-6379.conf<br></code></pre></td></tr></table></figure></li><li>将redis服务连接起来<br>需要执行src目录下的redis-trib.rb，且需要ruby环境<br>下列命名表示1个master有1个slave，且一共有6个服务器<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis-trib.rb create --replicas 1 \<br>127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 \<br>127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384<br></code></pre></td></tr></table></figure><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2></li></ol><h3 id="哨兵简介"><a href="#哨兵简介" class="headerlink" title="哨兵简介"></a>哨兵简介</h3><p>哨兵（sentinel）是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。</p><p><strong>作用</strong></p><ol><li>监控：不断的检查master和slave是否正常运行，master存活检测、master与slave运行情况检测</li><li>通知：当被监控的服务器出现故障时，向其他客户端发送通知</li><li>自动故障转移：断开master和slave连接，选取一个slave作master，将其他slave连接到新master，并告知客户端新的服务器地址</li></ol><p><strong>说明</strong></p><ul><li>哨兵也是一台redis服务器，只是不提供数据服务</li><li>通常哨兵的配置数量为单数</li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>26379.conf 26380.conf 26381.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">指定端口 26379 26380 26381</span><br>port 26379<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2个哨兵认为这个master挂了就挂了</span><br>sentinel monitor mymaster 127.0.0.1 6379 2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">30秒未响应判断死亡</span><br>sentinel down-after-milliseconds mymaster 30000<br></code></pre></td></tr></table></figure><p>启动哨兵服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server ./26379.conf --sentinel<br></code></pre></td></tr></table></figure><p>查看哨兵的通信，在master节点输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PSUBSCRIBE *<br></code></pre></td></tr></table></figure><p>可以看到以下输出，哨兵在询问master是否存活</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">3) &quot;__sentinel__:hello&quot;<br>4) &quot;127.0.0.1,26379,36f7e5a15c4bda4ea9394a8b90c5c2c307123b25,0,mymaster,127.0.0.1,6379,0&quot;<br>1) &quot;pmessage&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DataSource/redis/redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <url>/pumpkin/2021/10/18/DataSource/redis/redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="redis线程模型"><a href="#redis线程模型" class="headerlink" title="redis线程模型"></a>redis线程模型</h1><blockquote><p>NIO异步单线程</p></blockquote><h2 id="为什么redis单线程还能支撑高并发"><a href="#为什么redis单线程还能支撑高并发" class="headerlink" title="为什么redis单线程还能支撑高并发"></a>为什么redis单线程还能支撑高并发</h2><ol><li>IO多路复用程序只负责监听所有的socket产生的请求，有人发过来请求就直接放入队列中。</li><li>事件处理器是基于纯内存操作的。</li><li>单线程反而避免了多线程频繁切换上下文问题。</li></ol><h2 id="客户端与redis的通信的一次流程"><a href="#客户端与redis的通信的一次流程" class="headerlink" title="客户端与redis的通信的一次流程"></a>客户端与redis的通信的一次流程</h2><ol><li>在redis初始化的时候，redis会将连接应答处理器跟AE_READABLE事件关联起来，接着如果一个客户端与redis发起连接，此时会产生一个AE_READABLE事件，然后由连接应答处理器来处理与客户端的连接，创建客户端对应的socket，同时将这个socket的AE_READABLE事件跟命令请求处理器关联起来。</li><li>当客户端想redis发起请求的时候，首先会在socket产生一个AE_READABLE事件，然后由命令请求处理器来处理，这个命令请求处理器就会从socket中读取请求相关数据，然后进行执行和处理。</li><li>接着redis这边准备好了给客户端的相应数据之后，就会将socket的AE_WRITEABLE事件跟命令回复处理器关联起来，当客户端这边准备好读取相应数据时，就会在socket上产生一个AE_WRITEABLE事件，会由命令回复处理器来处理，就是准备好写入socket，供客户端来读取。</li><li>命令回复处理器写完之后，就会删除这个socket的AE_WRITEABLE事件和命令回复处理器的关联关系。</li></ol><p><img src="https://img-blog.csdnimg.cn/2020121916394029.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>redis在线程有顺序性</p><p><strong>Redis是二进制安全的</strong></p><p>客户端通过socket访问redis，redis拿到字节流</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DataSource/mysql/9.%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/pumpkin/2021/10/18/DataSource/mysql/9.%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="9-主从复制"><a href="#9-主从复制" class="headerlink" title="9.主从复制"></a>9.主从复制</h1><h2 id="binlog的格式"><a href="#binlog的格式" class="headerlink" title="binlog的格式"></a>binlog的格式</h2><p>binlog_format&#x3D;STATEMENT（默认）：记录写操作SQL，会有以下问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 如果有时间函数，那么主从复制的时间会不一致</span><br><span class="hljs-keyword">update</span> xxx <span class="hljs-keyword">set</span> <span class="hljs-type">time</span> <span class="hljs-operator">=</span> now() <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span><br></code></pre></td></tr></table></figure><p>binlog_format&#x3D;ROW：记录一整行记录，会完全拷贝原记录，效率低</p><p>binlog_format&#x3D;MIXED：判断写操作有没有函数，有则用STATEMENT，没有则用ROW</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 如果出现系统变量，也会出现主从复制不一致</span><br>@<span class="hljs-variable">@host</span> name<br></code></pre></td></tr></table></figure><h2 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h2><ol><li>master将改变记录到二进制日志(binary log)，这个记录过程叫二进制日志事件(binary log events)。</li><li>slave将master的binary log events拷贝到它的中继日志(relay log)。</li><li>slave重做中继日志中的事件，将改变应用到自己的数据库中，Mysql复制是异步且串行化的。<br><img src="https://img-blog.csdnimg.cn/20200203173115696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h2 id="配置-基于mysql-8-x"><a href="#配置-基于mysql-8-x" class="headerlink" title="配置(基于mysql 8.x)"></a>配置(基于mysql 8.x)</h2><h3 id="master配置文件修改"><a href="#master配置文件修改" class="headerlink" title="master配置文件修改"></a>master配置文件修改</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment"># 设置主机Id</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"># 启用二进制日志</span><br><span class="hljs-attr">log-bin</span>=<span class="hljs-string">E:\\Software\\mysql-8.0.19\\data\\logbin</span><br></code></pre></td></tr></table></figure><h3 id="slave配置文件修改"><a href="#slave配置文件修改" class="headerlink" title="slave配置文件修改"></a>slave配置文件修改</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment"># 设置从机Id</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"># 启用二进制日志</span><br><span class="hljs-attr">log-bin</span>=<span class="hljs-string">/var/run/mysqld/logbin</span><br></code></pre></td></tr></table></figure><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><blockquote><p>主机IP：192.168.1.104<br>从机IP：192.168.25.103</p></blockquote><ol><li>主节点创建用户并授权<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;192.168.1.104&#x27;</span> identified <span class="hljs-keyword">with</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-keyword">grant</span> replication slave <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;192.168.1.104&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li>查询主节点状态<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 刷新</span><br>flush privileges;<br><span class="hljs-comment">-- 查询主节点状态</span><br><span class="hljs-keyword">show</span> master status;<br></code></pre></td></tr></table></figure>参数解释：</li></ol><ul><li>File：二进制日志文件</li><li>Position：开始抄数据的位置</li><li>Binlog_Do_DB：需要复制的数据库，空表示都要复制</li><li>Binlog_Ignore_DB：忽略的数据库，空表示没有<br><img src="https://img-blog.csdnimg.cn/20200201111401768.png" alt="在这里插入图片描述"></li></ul><ol start="3"><li>在从节点上设置主节点参数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">change master <span class="hljs-keyword">to</span> master_host <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;192.168.1.104&#x27;</span>,<br>master_user <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;repl&#x27;</span>,<br>master_password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;123456&#x27;</span>,<br>master_log_file <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;binlog.000017&#x27;</span>, master_log_pos <span class="hljs-operator">=</span> <span class="hljs-number">5934</span>;<br></code></pre></td></tr></table></figure></li><li>开启主从同步<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">start</span> slave;<br></code></pre></td></tr></table></figure></li><li>查看主从同步状态<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> slave status;<br></code></pre></td></tr></table></figure></li><li>测试<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database dbtest;<br>use dbtest;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> dog;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dog(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>    dog_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dog (dog_name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;旺财&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dog (dog_name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;大白&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dog (dog_name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;汪汪&#x27;</span>);<br></code></pre></td></tr></table></figure>主机从机同步，测试成功。<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 获取binlog文件列表</span><br><span class="hljs-keyword">show</span> <span class="hljs-type">binary</span> logs;<br><span class="hljs-comment">-- 查看指定binlog文件的内容</span><br><span class="hljs-keyword">show</span> binlog events <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;binlog.000017&#x27;</span>;<br><span class="hljs-comment">-- 停止同步</span><br>stop slave;<br><span class="hljs-comment">-- 查询用户</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.user;<br><span class="hljs-comment">-- 删除用户</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `mysql`.`<span class="hljs-keyword">user</span>` <span class="hljs-keyword">WHERE</span> (`Host` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;192.168.25.103&#x27;</span>) <span class="hljs-keyword">and</span> (`<span class="hljs-keyword">User</span>` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;rep1&#x27;</span>);<br><span class="hljs-comment">-- 修改用户密码</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;192.168.1.104&#x27;</span> identified <span class="hljs-keyword">with</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;654321&#x27;</span>;<br><span class="hljs-comment">-- 授予用户权限</span><br><span class="hljs-keyword">grant</span> replication slave <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;192.168.1.104&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DataSource/mysql/7.%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    <url>/pumpkin/2021/10/18/DataSource/mysql/7.%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="6-分库分表"><a href="#6-分库分表" class="headerlink" title="6.分库分表"></a>6.分库分表</h1><h2 id="分表方式"><a href="#分表方式" class="headerlink" title="分表方式"></a>分表方式</h2><p>垂直分表：根据业务分表</p><p>水平分表：根据数据分表</p><h2 id="分库分表的问题"><a href="#分库分表的问题" class="headerlink" title="分库分表的问题"></a>分库分表的问题</h2><ol><li>跨节点连接查询问题（分页、排序）：两张表存在不同的库中，需要进行多次查询。</li><li>多数据源管理问题：一个服务中可能包含多个数据源。</li></ol><h2 id="Mycat"><a href="#Mycat" class="headerlink" title="Mycat"></a>Mycat</h2><p>MyCat技术原理中最重要的一个动词是“拦截”，它拦截了用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析：如分片分析、路由分析、读写分离分析、缓存分析等，然后将此SQL发往后端的真实数据库，并将返回的结果做适当的处理，最终再返回给用户。</p><p><img src="https://img-blog.csdnimg.cn/20210301090825393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Sharding-JDBC"><a href="#Sharding-JDBC" class="headerlink" title="Sharding JDBC"></a>Sharding JDBC</h2><blockquote><p>轻量级的 Java 框架，增强版的 JDBC</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.shardingsphere.datasource.names</span>=<span class="hljs-string">ds</span><br><br><span class="hljs-attr">spring.shardingsphere.datasource.ds.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.shardingsphere.datasource.ds.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.ds.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/tripper?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">spring.shardingsphere.datasource.ds.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.ds.password</span>=<span class="hljs-string">root</span><br><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.t_order.actual-data-nodes</span>=<span class="hljs-string">ds.t_order$-&gt;&#123;1..2&#125;</span><br><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.t_order.key-generator.column</span>=<span class="hljs-string">id</span><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.t_order.key-generator.type</span>=<span class="hljs-string">SNOWFLAKE</span><br><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column</span>=<span class="hljs-string">id</span><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression</span>=<span class="hljs-string">t_order$-&gt;&#123;id % 2 + 1&#125;</span><br><br><span class="hljs-attr">spring.main.allow-bean-definition-overriding</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DataSource/mysql/8.%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%82%E6%95%B0/"/>
    <url>/pumpkin/2021/10/18/DataSource/mysql/8.%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="8-服务器参数"><a href="#8-服务器参数" class="headerlink" title="8.服务器参数"></a>8.服务器参数</h1><h2 id="general"><a href="#general" class="headerlink" title="general"></a>general</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">数据文件存放的目录</span><br>datadir=/var/lib/mysql<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql.socket表示server和client在同一台服务器，并且使用localhost进行连接，就会使用socket进行连接</span><br>socket=/var/lib/mysql/mysql.sock<br><span class="hljs-meta prompt_"># </span><span class="language-bash">存储mysql的pid</span><br>pid_file=/var/lib/mysql/mysql.pid<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql服务的端口号</span><br>port=3306<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql存储引擎</span><br>default_storage_engine=InnoDB<br><span class="hljs-meta prompt_"># </span><span class="language-bash">当忘记mysql的用户名密码的时候，可以在mysql配置文件中配置该参数，跳过权限表验证，不需要密码即可登录mysql</span><br>skip-grant-tables<br></code></pre></td></tr></table></figure><h2 id="character"><a href="#character" class="headerlink" title="character"></a>character</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端数据的字符集</span><br>character_set_client<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql处理客户端发来的信息时，会把这些数据转换成连接的字符集格式</span><br>character_set_connection<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql发送给客户端的结果集所用的字符集</span><br>character_set_results<br><span class="hljs-meta prompt_"># </span><span class="language-bash">数据库默认的字符集</span><br>character_set_database<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql server的默认字符集</span><br>character_set_server<br></code></pre></td></tr></table></figure><h2 id="connection"><a href="#connection" class="headerlink" title="connection"></a>connection</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql的最大连接数，如果数据库的并发连接请求比较大，应该调高该值</span><br>max_connections<br><span class="hljs-meta prompt_"># </span><span class="language-bash">限制每个用户的连接个数</span><br>max_user_connections<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql能够暂存的连接数量，当mysql的线程在一个很短时间内得到非常多的连接请求时，就会起作用，如果mysql的连接数量达到</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">max_connections时，新的请求会被存储在堆栈中，以等待某一个连接释放资源，如果等待连接的数量超过back_log,则不再接受连接资源</span><br>back_log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql在关闭一个非交互的连接之前需要等待的时长</span><br>wait_timeout<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭一个交互连接之前需要等待的秒数</span><br>interactive_timeout<br></code></pre></td></tr></table></figure><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">指定错误日志文件名称，用于记录当mysqld启动和停止时，以及服务器在运行中发生任何严重错误时的相关信息</span><br>log_error<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定二进制日志文件名称，用于记录对数据造成更改的所有查询语句</span><br>log_bin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定将更新记录到二进制日志的数据库，其他所有没有显式指定的数据库更新将忽略，不记录在日志中</span><br>binlog_do_db<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定不将更新记录到二进制日志的数据库</span><br>binlog_ignore_db<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定多少次写日志后同步磁盘</span><br>sync_binlog<br><span class="hljs-meta prompt_"># </span><span class="language-bash">是否开启查询日志记录</span><br>general_log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定查询日志文件名，用于记录所有的查询语句</span><br>general_log_file<br><span class="hljs-meta prompt_"># </span><span class="language-bash">是否开启慢查询日志记录</span><br>slow_query_log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定慢查询日志文件名称，用于记录耗时比较长的查询语句</span><br>slow_query_log_file<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置慢查询的时间，超过这个时间的查询语句才会记录日志</span><br>long_query_time<br><span class="hljs-meta prompt_"># </span><span class="language-bash">是否将管理语句写入慢查询日志</span><br>log_slow_admin_statements<br></code></pre></td></tr></table></figure><h2 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">索引缓存区的大小（只对myisam表起作用）</span><br>show variables like &#x27;%key_buffer_size%&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询缓存的大小（未来版本被删除）</span><br>show variables like &#x27;%query_cache_size%&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看缓存的相关属性</span><br>show status like &#x27;%Qcache%&#x27;;<br>Qcache_free_blocks：# 缓存中相邻内存块的个数，如果值比较大，那么查询缓存中碎片比较多<br>Qcache_free_memory：# 查询缓存中剩余的内存大小<br>Qcache_hits：# 表示有多少此命中缓存<br>Qcache_inserts：# 表示多少次未命中而插入<br>Qcache_lowmen_prunes：# 多少条query因为内存不足而被移除cache<br>Qcache_queries_in_cache：# 当前cache中缓存的query数量<br>Qcache_total_blocks：# 当前cache中block的数量<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">超出此大小的查询将不被缓存</span><br>show variables like &#x27;query_cache_limit&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">缓存块最小大小</span>    <br>show variables like &#x27;query_cache_min_res_unit&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">缓存类型，决定缓存什么样的查询</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">0 表示禁用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1 表示将缓存所有结果，除非sql语句中使用sql_no_cache禁用查询缓存</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2 表示只缓存select语句中通过sql_cache指定需要缓存的查询</span><br>show variables like &#x27;query_cache_type&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">每个需要排序的线程分派该大小的缓冲区</span><br>show variables like &#x27;sort_buffer_size&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">限制server接受的数据包大小</span><br>show variables like &#x27;max_allowed_packet&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">表示关联缓存的大小</span><br>show variables like &#x27;join_buffer_size&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">线程池大小</span><br>show variables like &#x27;thread_cache_size&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前线程池的状态</span><br>show global status like &#x27;Thread%&#x27;;<br>Threads_cached# 代表当前此时此刻线程缓存中有多少空闲线程<br>Threads_connected# 代表当前已建立连接的数量<br>Threads_created# 代表最近一次服务启动，已创建现成的数量，如果该值比较大，那么服务器会一直再创建线程<br>Threads_running# 代表当前激活的线程数<br></code></pre></td></tr></table></figure><h2 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">该参数指定大小的内存来缓冲数据和索引，最大可以设置为物理内存的80%</span><br>show variables like &#x27;innodb_buffer_pool_size&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">主要控制innodb将<span class="hljs-built_in">log</span> buffer中的数据写入日志文件并flush磁盘的时间点，值分别为0，1，2</span><br>show variables like &#x27;innodb_flush_log_at_trx_commit&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置innodb线程的并发数，默认为0表示不受限制，如果要设置建议跟服务器的cpu核心数一致或者是cpu核心数的两倍</span><br>show variables like &#x27;innodb_thread_concurrency&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">此参数确定日志文件所用的内存大小，以M为单位</span><br>show variables like &#x27;innodb_log_buffer_size&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">此参数确定数据日志文件的大小，以M为单位</span><br>show variables like &#x27;innodb_log_file_size&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">以循环方式将日志文件写到多个文件中</span><br>show variables like &#x27;innodb_log_files_in_group&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql读入缓冲区大小，对表进行顺序扫描的请求将分配到一个读入缓冲区</span><br>show variables like &#x27;read_buffer_size&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql随机读的缓冲区大小</span><br>show variables like &#x27;read_rnd_buffer_size&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">此参数确定为每张表分配一个新的文件</span><br>show variables like &#x27;innodb_file_per_table&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DataSource/mysql/6.%E5%88%86%E5%8C%BA%E8%A1%A8/"/>
    <url>/pumpkin/2021/10/18/DataSource/mysql/6.%E5%88%86%E5%8C%BA%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="6-分区表"><a href="#6-分区表" class="headerlink" title="6.分区表"></a>6.分区表</h1><h2 id="分区表的应用场景"><a href="#分区表的应用场景" class="headerlink" title="分区表的应用场景"></a>分区表的应用场景</h2><p>如果需要从非常大的表中查询出某一段时间的记录，而这张表中包含很多年的历史数据，数据是按照时间排序的，此时应该如何查询数据呢？</p><p>因为数据量巨大，肯定不能在每次查询的时候都扫描全表。考虑到索引在空间和维护上的消耗，也不希望使用索引，即使使用索引，会发现会产生大量的碎片，还会产生大量的随机IO，但是当数据量超大的时候，索引也就无法起作用了，此时可以考虑使用分区来进行解决。</p><ol><li><p>表非常大以至于无法全部都放在内存中，或者只在表的最后部分有热点数据，其他均是历史数据</p></li><li><p>分区表的数据更容易维护</p><ol><li><p>批量删除大量数据可以使用清除整个分区的方式</p></li><li><p>对一个独立分区进行优化、检查、修复等操作</p></li></ol></li><li><p>分区表的数据可以分布在不同的物理设备上，从而高效地利用多个硬件设备</p><ol><li><p>可以使用分区表来避免某些特殊的瓶颈：innodb的单个索引的互斥访问、ext3文件系统的inode锁竞争</p></li><li><p>可以备份和恢复独立的分区</p></li></ol></li></ol><h2 id="分区表的限制"><a href="#分区表的限制" class="headerlink" title="分区表的限制"></a>分区表的限制</h2><ol><li><p>一个表最多只能有1024个分区，在5.7版本的时候可以支持8196个分区</p></li><li><p>在早期的mysql中，分区表达式必须是整数或者是返回整数的表达式，在mysql5.5中，某些场景可以直接使用列来进行分区</p></li><li><p>如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来</p></li><li><p>分区表无法使用外键约束</p></li></ol><h2 id="分区表的原理"><a href="#分区表的原理" class="headerlink" title="分区表的原理"></a>分区表的原理</h2><p>分区表由多个相关的底层表实现，这个底层表也是由句柄对象标识，我们可以直接访问各个分区。存储引擎管理分区的各个底层表和管理普通表一样（所有的底层表都必须使用相同的存储引擎），分区表的索引知识在各个底层表上各自加上一个完全相同的索引。从存储引擎的角度来看，底层表和普通表没有任何不同，存储引擎也无须知道这是一个普通表还是一个分区表的一部分。</p><p>分区表的操作按照以下的操作逻辑进行：</p><ol><li><p>select：当查询一个分区表时，分区层先打开并锁住所有的底层表，优化器先判断是否可以过滤部分分区，然后再调用对应的存储引擎接口访问各个分区的数据</p></li><li><p>insert：当写入一条记录事，分区层先打开并锁住所有的底层表，然后确定哪个分区接受这条记录，再将记录写入对应底层表</p></li><li><p>delete：当删除一条记录时，分区层先打开并锁住所有的底层表，然后确定数据对应的分区，最后对相应底层表进行删除操作</p></li><li><p>update：当更新一条记录时，分区层先打开并锁住所有的底层表，mysql先确定需要更新的记录再哪个分区，然后取出数据并更新，再判断更新后的数据应该再哪个分区，最后对底层表进行写入操作，并对源数据所在的底层表进行删除操作</p></li></ol><p>有些操作时支持过滤的，例如，当删除一条记录时，MySQL需要先找到这条记录，如果where条件恰好和分区表达式匹配，就可以将所有不包含这条记录的分区都过滤掉，这对update同样有效。如果是insert操作，则本身就是只命中一个分区，其他分区都会被过滤掉。mysql先确定这条记录属于哪个分区，再将记录写入对应得曾分区表，无须对任何其他分区进行操作</p><p>虽然每个操作都会“先打开并锁住所有的底层表”，但这并不是说分区表在处理过程中是锁住全表的，如果存储引擎能够自己实现行级锁，例如innodb，则会在分区层释放对应表锁。</p><h2 id="分区表的类型"><a href="#分区表的类型" class="headerlink" title="分区表的类型"></a>分区表的类型</h2><h3 id="Range-Partitioning"><a href="#Range-Partitioning" class="headerlink" title="Range Partitioning"></a>Range Partitioning</h3><p>根据列值在给定范围内将行分配给分区</p><p>范围分区表的分区方式是：每个分区都包含行数据且分区的表达式在给定的范围内，分区的范围应该是连续的且不能重叠，可以使用<code>VALUES LESS THAN</code> 运算符来定义</p><p><strong>使用 INT 类型分区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    fname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    lname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    hired <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1970-01-01&#x27;</span>,<br>    separated <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;9999-12-31&#x27;</span>,<br>    job_code <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    store_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span> (store_id) (<br>    <span class="hljs-keyword">PARTITION</span> p0 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">6</span>),<br>    <span class="hljs-keyword">PARTITION</span> p1 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">11</span>),<br>    <span class="hljs-keyword">PARTITION</span> p2 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">16</span>),<br>    <span class="hljs-keyword">PARTITION</span> p3 <span class="hljs-keyword">VALUES</span> LESS THAN MAXVALUE<span class="hljs-comment">--maxvalue表示始终大于等于最大可能整数值的整数值</span><br>);<br></code></pre></td></tr></table></figure><p><strong>使用 Date 类型分区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 基于年的分区</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    fname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    lname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    hired <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1970-01-01&#x27;</span>,<br>    separated <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;9999-12-31&#x27;</span>,<br>    job_code <span class="hljs-type">INT</span>,<br>    store_id <span class="hljs-type">INT</span><br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span> ( <span class="hljs-keyword">YEAR</span>(separated) ) (<br>    <span class="hljs-keyword">PARTITION</span> p0 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">1991</span>),<br>    <span class="hljs-keyword">PARTITION</span> p1 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">1996</span>),<br>    <span class="hljs-keyword">PARTITION</span> p2 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2001</span>),<br>    <span class="hljs-keyword">PARTITION</span> p3 <span class="hljs-keyword">VALUES</span> LESS THAN MAXVALUE<br>);<br><br><span class="hljs-comment">-- 基于范围列的分区</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> members (<br>    firstname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    lastname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">35</span>),<br>    joined <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span> COLUMNS(joined) (<br>    <span class="hljs-keyword">PARTITION</span> p0 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-string">&#x27;1960-01-01&#x27;</span>),<br>    <span class="hljs-keyword">PARTITION</span> p1 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-string">&#x27;1970-01-01&#x27;</span>),<br>    <span class="hljs-keyword">PARTITION</span> p2 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-string">&#x27;1980-01-01&#x27;</span>),<br>    <span class="hljs-keyword">PARTITION</span> p3 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-string">&#x27;1990-01-01&#x27;</span>),<br>    <span class="hljs-keyword">PARTITION</span> p4 <span class="hljs-keyword">VALUES</span> LESS THAN MAXVALUE<br>);<br><br><span class="hljs-comment">-- 使用函数</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> quarterly_report_status (<br>    report_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    report_status <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    report_updated <span class="hljs-type">TIMESTAMP</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span><br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span> ( UNIX_TIMESTAMP(report_updated) ) (<br>    <span class="hljs-keyword">PARTITION</span> p0 <span class="hljs-keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="hljs-string">&#x27;2008-01-01 00:00:00&#x27;</span>) ),<br>    <span class="hljs-keyword">PARTITION</span> p1 <span class="hljs-keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="hljs-string">&#x27;2008-04-01 00:00:00&#x27;</span>) ),<br>    <span class="hljs-keyword">PARTITION</span> p2 <span class="hljs-keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="hljs-string">&#x27;2008-07-01 00:00:00&#x27;</span>) ),<br>    <span class="hljs-keyword">PARTITION</span> p3 <span class="hljs-keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="hljs-string">&#x27;2008-10-01 00:00:00&#x27;</span>) ),<br>    <span class="hljs-keyword">PARTITION</span> p4 <span class="hljs-keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="hljs-string">&#x27;2009-01-01 00:00:00&#x27;</span>) ),<br>    <span class="hljs-keyword">PARTITION</span> p5 <span class="hljs-keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="hljs-string">&#x27;2009-04-01 00:00:00&#x27;</span>) ),<br>    <span class="hljs-keyword">PARTITION</span> p6 <span class="hljs-keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="hljs-string">&#x27;2009-07-01 00:00:00&#x27;</span>) ),<br>    <span class="hljs-keyword">PARTITION</span> p7 <span class="hljs-keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="hljs-string">&#x27;2009-10-01 00:00:00&#x27;</span>) ),<br>    <span class="hljs-keyword">PARTITION</span> p8 <span class="hljs-keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="hljs-string">&#x27;2010-01-01 00:00:00&#x27;</span>) ),<br>    <span class="hljs-keyword">PARTITION</span> p9 <span class="hljs-keyword">VALUES</span> LESS THAN (MAXVALUE)<br>);<br></code></pre></td></tr></table></figure><h3 id="List-Partitioning"><a href="#List-Partitioning" class="headerlink" title="List Partitioning"></a>List Partitioning</h3><p>类似于按range分区，区别在于list分区是基于列值匹配一个离散值集合中的某个值来进行选择</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    fname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    lname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    hired <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1970-01-01&#x27;</span>,<br>    separated <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;9999-12-31&#x27;</span>,<br>    job_code <span class="hljs-type">INT</span>,<br>    store_id <span class="hljs-type">INT</span><br>)<br><br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> LIST(store_id) (<br>    <span class="hljs-keyword">PARTITION</span> pNorth <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">17</span>),<br>    <span class="hljs-keyword">PARTITION</span> pEast <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>),<br>    <span class="hljs-keyword">PARTITION</span> pWest <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">4</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">18</span>),<br>    <span class="hljs-keyword">PARTITION</span> pCentral <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="Columns-Partitioning"><a href="#Columns-Partitioning" class="headerlink" title="Columns Partitioning"></a>Columns Partitioning</h3><p>mysql从5.5开始支持column分区，可以认为i是range和list的升级版，在5.5之后，可以使用column分区替代range和list，但是column分区只接受普通列不接受表达式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `list_c` (<br> `c1` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `c2` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>latin1<br><br><span class="hljs-comment">/*!50500 PARTITION BY RANGE COLUMNS(c1)</span><br><span class="hljs-comment">(PARTITION p0 VALUES LESS THAN (5) ENGINE = InnoDB,</span><br><span class="hljs-comment"> PARTITION p1 VALUES LESS THAN (10) ENGINE = InnoDB) */</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `list_c` (<br> `c1` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `c2` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `c3` <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>latin1<br><br><span class="hljs-comment">/*!50500 PARTITION BY RANGE COLUMNS(c1,c3)</span><br><span class="hljs-comment">(PARTITION p0 VALUES LESS THAN (5,&#x27;aaa&#x27;) ENGINE = InnoDB,</span><br><span class="hljs-comment"> PARTITION p1 VALUES LESS THAN (10,&#x27;bbb&#x27;) ENGINE = InnoDB) */</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `list_c` (<br> `c1` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `c2` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `c3` <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>latin1<br><br><span class="hljs-comment">/*!50500 PARTITION BY LIST COLUMNS(c3)</span><br><span class="hljs-comment">(PARTITION p0 VALUES IN (&#x27;aaa&#x27;) ENGINE = InnoDB,</span><br><span class="hljs-comment"> PARTITION p1 VALUES IN (&#x27;bbb&#x27;) ENGINE = InnoDB) */</span><br></code></pre></td></tr></table></figure><h3 id="Hash-Partitioning"><a href="#Hash-Partitioning" class="headerlink" title="Hash Partitioning"></a>Hash Partitioning</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    fname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    lname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    hired <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1970-01-01&#x27;</span>,<br>    separated <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;9999-12-31&#x27;</span>,<br>    job_code <span class="hljs-type">INT</span>,<br>    store_id <span class="hljs-type">INT</span><br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(store_id)<br>PARTITIONS <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    fname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    lname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    hired <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1970-01-01&#x27;</span>,<br>    separated <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;9999-12-31&#x27;</span>,<br>    job_code <span class="hljs-type">INT</span>,<br>    store_id <span class="hljs-type">INT</span><br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> LINEAR HASH(<span class="hljs-keyword">YEAR</span>(hired))<br>PARTITIONS <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><h3 id="Key-Partitioning"><a href="#Key-Partitioning" class="headerlink" title="Key Partitioning"></a>Key Partitioning</h3><p>类似于hash分区，区别在于key分区只支持一列或多列，且mysql服务器提供其自身的哈希函数，必须有一列或多列包含整数值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tk (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">CHAR</span>(<span class="hljs-number">5</span>),<br>    col3 <span class="hljs-type">DATE</span><br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> LINEAR KEY (col1)<br>PARTITIONS <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h3 id="Subpartitioning"><a href="#Subpartitioning" class="headerlink" title="Subpartitioning"></a>Subpartitioning</h3><p>在分区的基础之上，再进行分区后存储</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_partition_by_subpart`<br>(<br>  `id` <span class="hljs-type">INT</span> AUTO_INCREMENT,<br>  `sName` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `sAge` <span class="hljs-type">INT</span>(<span class="hljs-number">2</span>) UNSIGNED ZEROFILL <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `sAddr` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `sGrade` <span class="hljs-type">INT</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `sStuId` <span class="hljs-type">INT</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `sSex` <span class="hljs-type">INT</span>(<span class="hljs-number">1</span>) UNSIGNED <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`, `sGrade`)<br>)  ENGINE <span class="hljs-operator">=</span> INNODB<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span>(id)<br>SUBPARTITION <span class="hljs-keyword">BY</span> HASH(sGrade) SUBPARTITIONS <span class="hljs-number">2</span><br>(<br><span class="hljs-keyword">PARTITION</span> p0 <span class="hljs-keyword">VALUES</span> LESS THAN(<span class="hljs-number">5</span>),<br><span class="hljs-keyword">PARTITION</span> p1 <span class="hljs-keyword">VALUES</span> LESS THAN(<span class="hljs-number">10</span>),<br><span class="hljs-keyword">PARTITION</span> p2 <span class="hljs-keyword">VALUES</span> LESS THAN(<span class="hljs-number">15</span>)<br>);<br></code></pre></td></tr></table></figure><h2 id="如何使用分区表"><a href="#如何使用分区表" class="headerlink" title="如何使用分区表"></a>如何使用分区表</h2><p><strong>全量扫描数据，不要任何索引</strong></p><p>使用简单的分区方式存放表，不要任何索引，根据分区规则大致定位需要的数据为止，通过使用 where 条件将需要的数据限制在少数分区中，这种策略适用于以正常的方式访问大量数据</p><p><strong>索引数据，并分离热点</strong></p><p>如果数据有明显的热点，而且除了这部分数据，其他数据很少被访问到，那么可以将这部分热点数据单独放在一个分区中，让这个分区的数据能够有机会都缓存在内存中，这样查询就可以只访问一个很小的分区表，能够使用索引，也能够有效的使用缓存</p><h2 id="使用分区表需要注意的问题"><a href="#使用分区表需要注意的问题" class="headerlink" title="使用分区表需要注意的问题"></a>使用分区表需要注意的问题</h2><ol><li><p>null值会使分区过滤无效</p></li><li><p>分区列和索引列不匹配，会导致查询无法进行分区过滤</p></li><li><p>选择分区的成本可能很高</p></li><li><p>打开并锁住所有底层表的成本可能很高</p></li><li><p>维护分区的成本可能很高</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DataSource/mysql/1.%E5%9F%BA%E7%A1%80/"/>
    <url>/pumpkin/2021/10/18/DataSource/mysql/1.%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h1><h2 id="官方案例库"><a href="#官方案例库" class="headerlink" title="官方案例库"></a>官方案例库</h2><p>导入mysql官方案例数据库 <a href="https://dev.mysql.com/doc/index-other.html">https://dev.mysql.com/doc/index-other.html</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -u root -p<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash"><span class="hljs-built_in">source</span> /sakila-db/sakila-schema.sql</span><br><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash"><span class="hljs-built_in">source</span> /sakila-db/sakila-data.sql</span><br></code></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 去重查询</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> country_id <span class="hljs-keyword">from</span> city;<br><span class="hljs-comment">-- 分页查询: 从第10条记录开始查询5条记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> city limit <span class="hljs-number">10</span>,<span class="hljs-number">5</span>;<br><span class="hljs-comment">-- 查询前5条记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> city limit <span class="hljs-number">5</span>;<br><span class="hljs-comment">-- 筛选分组后的各组数据 having</span><br><span class="hljs-keyword">select</span> customer_id, <span class="hljs-built_in">sum</span>(amount) <span class="hljs-keyword">from</span> payment <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> customer_id <span class="hljs-keyword">having</span> <span class="hljs-built_in">sum</span>(amount) <span class="hljs-operator">&gt;</span> <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h3 id="Join-查询"><a href="#Join-查询" class="headerlink" title="Join 查询"></a>Join 查询</h3><h4 id="1-笛卡尔积-没有加筛选条件的内连接"><a href="#1-笛卡尔积-没有加筛选条件的内连接" class="headerlink" title="1. 笛卡尔积(没有加筛选条件的内连接)"></a>1. 笛卡尔积(没有加筛选条件的内连接)</h4><p>两表关联，把左表的列和右表的列通过笛卡尔积的形式表达出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 三种写法</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">join</span> t2;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> t2;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1, t2;<br></code></pre></td></tr></table></figure><h4 id="2-左连接"><a href="#2-左连接" class="headerlink" title="2. 左连接"></a>2. 左连接</h4><p>两表关联，左表全部保留，右表关联不上用null表示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id;<br></code></pre></td></tr></table></figure><h4 id="3-右连接"><a href="#3-右连接" class="headerlink" title="3. 右连接"></a>3. 右连接</h4><p>两表关联，右表全部保留，左表关联不上的用null表示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span>t2.id;<br></code></pre></td></tr></table></figure><h4 id="4-内连接"><a href="#4-内连接" class="headerlink" title="4. 内连接"></a>4. 内连接</h4><p>两表关联，保留两表中交集的记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id;<br></code></pre></td></tr></table></figure><h4 id="5-左表独有"><a href="#5-左表独有" class="headerlink" title="5. 左表独有"></a>5. 左表独有</h4><p>两表关联，查询左表独有的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id <span class="hljs-keyword">where</span> t2.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><h4 id="6-右表独有"><a href="#6-右表独有" class="headerlink" title="6. 右表独有"></a>6. 右表独有</h4><p>两表关联，查询右表独有的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id <span class="hljs-keyword">where</span> t1.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><h4 id="7-全连接"><a href="#7-全连接" class="headerlink" title="7. 全连接"></a>7. 全连接</h4><p>两表关联，查询它们的所有记录</p><p>oracle里面有full join，但是在mysql中没有full join，我们可以使用union来达到目的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id<br><span class="hljs-keyword">union</span> <br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id;<br></code></pre></td></tr></table></figure><h4 id="8-并集去交集"><a href="#8-并集去交集" class="headerlink" title="8. 并集去交集"></a>8. 并集去交集</h4><p>两表关联，取并集然后去交集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id <span class="hljs-keyword">where</span> t2.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">union</span> <br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id <span class="hljs-keyword">where</span> t1.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><h3 id="Union-查询"><a href="#Union-查询" class="headerlink" title="Union 查询"></a>Union 查询</h3><h4 id="1-union"><a href="#1-union" class="headerlink" title="1. union"></a>1. union</h4><p>去重合并结果集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns <span class="hljs-keyword">FROM</span> t1<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">SELECT</span> columns <span class="hljs-keyword">FROM</span> t2;<br></code></pre></td></tr></table></figure><h4 id="2-union-all"><a href="#2-union-all" class="headerlink" title="2. union all"></a>2. union all</h4><p>不去重合并结果集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> columns <span class="hljs-keyword">FROM</span> t1<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">SELECT</span> columns <span class="hljs-keyword">FROM</span> t2;<br></code></pre></td></tr></table></figure><h2 id="DDL（建库建表）"><a href="#DDL（建库建表）" class="headerlink" title="DDL（建库建表）"></a>DDL（建库建表）</h2><h3 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 若库不存在创建一个名为demo的库</span><br><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> demo<br><br><span class="hljs-comment">-- 更改库的字符集为utf-8</span><br><span class="hljs-keyword">ALTER</span> DATABASE demo <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf<span class="hljs-number">-8</span><br><br><span class="hljs-comment">-- 库的删除</span><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> demo<br></code></pre></td></tr></table></figure><h3 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例：创建表book</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> book(<br>id <span class="hljs-type">INT</span>,<br>bname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>price <span class="hljs-keyword">DOUBLE</span>,<br>author <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>publicDate DATETIME,<br>)<br><br><span class="hljs-comment">-- 表的修改</span><br><span class="hljs-comment">-- ALTER TABLE 表名 ADD|DROP|MODIFY|CHANGE COLUMN 列名 [列类型 约束]</span><br><span class="hljs-comment">-- 修改列名</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> item CHANGE <span class="hljs-keyword">COLUMN</span> publishDate pubDate DATETIME<br><span class="hljs-comment">-- 修改列的类型或约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> item MODIFY <span class="hljs-keyword">COLUMN</span> pubDate <span class="hljs-type">TIMESTAMP</span><br><span class="hljs-comment">-- 添加新列</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> item <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> annual <span class="hljs-keyword">DOUBLE</span>;<br><span class="hljs-comment">-- 删除列</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> item <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> annual;<br><span class="hljs-comment">-- 修改表名</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> item RENAME <span class="hljs-keyword">TO</span> items<br><span class="hljs-comment">-- 表的删除</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> item<br><span class="hljs-comment">-- 查看当前库的所有表</span><br><span class="hljs-keyword">SHOW</span> TABLES<br><span class="hljs-comment">-- 查看表的信息</span><br><span class="hljs-keyword">DESC</span> book<br></code></pre></td></tr></table></figure><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>复制表中的数据到新表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 仅仅复制表的结构</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> city_back <span class="hljs-keyword">like</span> city;<br><span class="hljs-comment">-- 复制表的结构和数据</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> city_back <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> city;<br><span class="hljs-comment">-- 将旧表的数据插入到新表中</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> city_back <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> city;<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看所有系统变量</span><br><span class="hljs-keyword">SHOW</span> VARIABLES<br><span class="hljs-comment">-- 查看所有全局变量</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES<br><span class="hljs-comment">-- 查看所有会话变量</span><br><span class="hljs-keyword">SHOW</span> SESSION VARIABLES<br><span class="hljs-comment">-- 查看某个系统变量的值</span><br><span class="hljs-keyword">SELECT</span> @@系统变量名<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@global</span>.autocommit <span class="hljs-comment">-- 举例</span><br><span class="hljs-comment">-- 为某个系统变量赋值</span><br><span class="hljs-keyword">SET</span> 系统变量名 <span class="hljs-operator">=</span> 值<br></code></pre></td></tr></table></figure><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><table><thead><tr><th>变量</th><th>作用域</th><th>定义和使用的位置</th></tr></thead><tbody><tr><td>用户变量</td><td>当前会话</td><td>会话中的任何地方</td></tr><tr><td>局部变量</td><td>BEGIN END</td><td>只能在BEGIN END中，且为第一句话</td></tr></tbody></table><p>用户变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 声明并初始化 三种写法</span><br><span class="hljs-keyword">SET</span> @用户变量名<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SET</span> @用户变量名:<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SELECT</span> @用户变量名:<span class="hljs-operator">=</span>值;<br><br><span class="hljs-comment">-- 赋值（更新用户变量的值）</span><br><span class="hljs-keyword">SET</span> @用户变量名<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SET</span> @用户变量名:<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SELECT</span> @用户变量名:<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SELECT</span> 字段 <span class="hljs-keyword">INTO</span> @变量名 <span class="hljs-keyword">FROM</span> 表;<br><br><span class="hljs-comment">-- 查看用户变量的值</span><br><span class="hljs-keyword">SELECT</span> @用户变量名;<br></code></pre></td></tr></table></figure><p>局部变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 声明</span><br><span class="hljs-keyword">DECLARE</span> 变量名 类型;<br><span class="hljs-keyword">DECLARE</span> 变量名 类型 <span class="hljs-keyword">DEFAULT</span> 值;<br><br><span class="hljs-comment">-- 赋值</span><br><span class="hljs-keyword">SET</span> 局部变量名<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SET</span> 局部变量名:<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SELECT</span> @局部变量名:<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SELECT</span> 字段 <span class="hljs-keyword">INTO</span> 局部变量名 <span class="hljs-keyword">FROM</span> 表;<br><br><span class="hljs-comment">-- 查看</span><br><span class="hljs-keyword">SELECT</span> 局部变量名<br></code></pre></td></tr></table></figure><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="IF函数"><a href="#IF函数" class="headerlink" title="IF函数"></a>IF函数</h3><p>语法：IF(表达式1，表达式2，表达式3)</p><p>解释：如果表达式1成立，则返回表达式2，否则返回表达式3</p><h3 id="CASE-结构"><a href="#CASE-结构" class="headerlink" title="CASE 结构"></a>CASE 结构</h3><p>特点：可以作为表达式，嵌套在其它语句中使用，也可以作为独立的语句使用</p><p>类似switch case语句，一般用于实现等值判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> 变量<span class="hljs-operator">|</span>表达式<span class="hljs-operator">|</span>字段<br><span class="hljs-keyword">WHEN</span> 要判断的值 <span class="hljs-keyword">THEN</span> 返回值<span class="hljs-number">1</span>或语句<span class="hljs-number">1</span><br><span class="hljs-keyword">WHEN</span> 要判断的值 <span class="hljs-keyword">THEN</span> 返回值<span class="hljs-number">2</span>或语句<span class="hljs-number">2</span><br>...<br><span class="hljs-keyword">ELSE</span> 返回值n或语句n<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>类型多重if语句，一般用于实现区间判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> <br><span class="hljs-keyword">WHEN</span> 要判断的条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 返回值<span class="hljs-number">1</span>或语句<span class="hljs-number">1</span><br><span class="hljs-keyword">WHEN</span> 要判断的条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 返回值<span class="hljs-number">2</span>或语句<span class="hljs-number">2</span><br>...<br><span class="hljs-keyword">ELSE</span> 返回值n或语句n<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><h3 id="IF结构"><a href="#IF结构" class="headerlink" title="IF结构"></a>IF结构</h3><p>应用在BEGIN END中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">IF 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 语句<span class="hljs-number">1</span>;<br>ELSEIF 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 语句<span class="hljs-number">2</span>;<br>...<br><span class="hljs-keyword">ELSE</span> 语句n;<br><span class="hljs-keyword">END</span> IF<br></code></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>分类：while、loop、repeat</p><p>循环控制：</p><ul><li>iterate 类似于 continue，结束本次循环，继续下一次</li><li>leave 类似于 break，结束当前所在循环</li></ul><p><strong>while语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">WHILE [<span class="hljs-keyword">Condition</span>] DO <br><span class="hljs-comment">-- do sth.</span><br><span class="hljs-keyword">END</span> WHILE;<br></code></pre></td></tr></table></figure><p><strong>loop语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 可以用来模拟简单的死循环</span><br>LOOP<br><span class="hljs-comment">-- do sth.</span><br><span class="hljs-keyword">END</span> LOOP;<br></code></pre></td></tr></table></figure><p><strong>repeat语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">REPEAT<br><span class="hljs-comment">-- do sth.</span><br>UNTIL [<span class="hljs-keyword">Condition</span>]<br><span class="hljs-keyword">END</span> REPEAT<br></code></pre></td></tr></table></figure><p><strong>循环定义名称</strong></p><p>可以为循环定义名称，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">[name]:WHILE [<span class="hljs-keyword">Condition</span>] DO <br><span class="hljs-comment">-- do sth.</span><br><span class="hljs-keyword">END</span> WHILE [name];<br></code></pre></td></tr></table></figure><p><strong>while案例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 向admin表批量插入count条记录</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> proc_test(<span class="hljs-keyword">IN</span> count <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>;<br>WHILE i <span class="hljs-operator">&lt;=</span> count DO<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> admin (username, passowrd) <span class="hljs-keyword">VALUES</span> (CONCAT(<span class="hljs-string">&#x27;Jack&#x27;</span>, i), <span class="hljs-string">&#x27;123456&#x27;</span>);<br><span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">END</span> WHILE;<br><span class="hljs-keyword">END</span>$<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>参数列表 包含两部分：参数名、参数类型</p><p>函数体肯定会有RETURN语句，否则会报错</p><p>使用 DELIMITER 设置结束标记</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER $<br><span class="hljs-comment">-- 创建函数</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> 函数名(参数列表) <span class="hljs-keyword">RETURNS</span> 返回类型<br><span class="hljs-keyword">BEGIN</span><br>函数体 <br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-comment">-- 调用语法</span><br><span class="hljs-keyword">SELECT</span> 函数名(参数列表)$<br></code></pre></td></tr></table></figure><p>无参有返回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER $<br><span class="hljs-comment">-- 返回公司员工的个数</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> fun_test() <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">INT</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> c <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">INTO</span> c<br><span class="hljs-keyword">FROM</span> tb_employee;<br><span class="hljs-keyword">RETURN</span> c;<br><span class="hljs-keyword">END</span> $<br><span class="hljs-comment">-- 调用</span><br><span class="hljs-keyword">SELECT</span> fun_test()$<br></code></pre></td></tr></table></figure><p>有参有返回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER $<br><span class="hljs-comment">-- 根据员工名，返回他的工资</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> fun_test(empName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)) <span class="hljs-keyword">RETURNS</span> <span class="hljs-keyword">DOUBLE</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@sal</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">-- 可使用局部变量和用户变量，这里使用用户变量</span><br><span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@sal</span><span class="hljs-comment">-- 赋值</span><br><span class="hljs-keyword">FROM</span> tb_employee<br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> empName;<br><span class="hljs-keyword">RETURN</span> <span class="hljs-variable">@sal</span>;<br><span class="hljs-keyword">END</span> $<br><span class="hljs-keyword">SELECT</span> fun_test(<span class="hljs-string">&#x27;张三&#x27;</span>)$<br></code></pre></td></tr></table></figure><p>查看和删除函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看函数</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> fun_test;<br><br><span class="hljs-comment">-- 删除函数</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> fun_test;<br></code></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>创建语法 参数列表有3部分：参数模式、参数名、参数类型</p><p>参数举例： IN stuname VARCHAR(20)</p><p>参数模式：</p><ul><li>IN 该参数可以作为输入，即需要调用方传过来值</li><li>OUT 该参数可以作为输出，即可作为返回值</li><li>INOUT 该参数既可以作为输入也可以作为输出</li></ul><p>如果存储过程体只有一句话，BEGIN END可以省略</p><p>存储过程体中每条SQL语句的结尾必须加分号</p><p>需要修改分隔符否则mysql遇到分号就退出了<code>DELIMITER $</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建语法</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> 存储过程名(参数列表)<br><span class="hljs-keyword">BEGIN</span><br>存储过程体<br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-comment">-- 调用语法</span><br><span class="hljs-keyword">CALL</span> 存储过程名(参数列表);<br></code></pre></td></tr></table></figure><p>案例（带IN模式的存储过程）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 账号密码相等返回成功，否则返回失败</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> proc_test(<span class="hljs-keyword">IN</span> username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>), <span class="hljs-keyword">IN</span> password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>))<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-keyword">result</span> <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>; # 声明并初始化<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">FROM</span> admin<br><span class="hljs-keyword">WHERE</span> admin.username <span class="hljs-operator">=</span> username<br><span class="hljs-keyword">AND</span> admin.password <span class="hljs-operator">=</span> password;<br><span class="hljs-keyword">SELECT</span> IF(<span class="hljs-keyword">result</span><span class="hljs-operator">&gt;</span><span class="hljs-number">0</span>,<span class="hljs-string">&#x27;成功&#x27;</span>,<span class="hljs-string">&#x27;失败&#x27;</span>);# 使用变量<br><span class="hljs-keyword">END</span> $<br><span class="hljs-comment">-- 调用存储过程</span><br><span class="hljs-keyword">CALL</span> proc_test(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>);<br></code></pre></td></tr></table></figure><p>案例（带OUT模式的存储过程）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 根据女生名称查询出对应的男生名称</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> proc_test(<span class="hljs-keyword">IN</span> girl <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>), <span class="hljs-keyword">OUT</span> boy <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>))<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> bo.boyname <span class="hljs-keyword">INTO</span> boy<br><span class="hljs-keyword">FROM</span> boys a<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> girls b <span class="hljs-keyword">ON</span> a.id <span class="hljs-operator">=</span> b.boyid<br><span class="hljs-keyword">WHERE</span> b.name <span class="hljs-operator">=</span> girl;<br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-comment">-- 调用存储过程</span><br><span class="hljs-keyword">CALL</span> proc_test(<span class="hljs-string">&#x27;小昭&#x27;</span>, <span class="hljs-variable">@bname</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@bname</span>;<br></code></pre></td></tr></table></figure><p>案例（带INOUT模式的存储过程）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 传入a，b两个值，最终a，b都将翻倍并返回</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> proc_test(<span class="hljs-keyword">INOUT</span> a <span class="hljs-type">INT</span>, <span class="hljs-keyword">INOUT</span> b <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SET</span> a <span class="hljs-operator">=</span> a <span class="hljs-operator">*</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">SET</span> b <span class="hljs-operator">=</span> b <span class="hljs-operator">*</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-comment">-- 调用存储过程，必须先定义用户变量</span><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">CALL</span> proc_test(<span class="hljs-variable">@a</span>, <span class="hljs-variable">@b</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@a</span>, <span class="hljs-variable">@b</span>;<br></code></pre></td></tr></table></figure><p>查看和删除存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看存储过程信息</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> proc_test<br><br><span class="hljs-comment">-- 删除存储过程</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> proc_test<br></code></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="六大约束"><a href="#六大约束" class="headerlink" title="六大约束"></a>六大约束</h3><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空</td></tr><tr><td>DEFAULT</td><td>非有默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键，唯一非空</td></tr><tr><td>UNIQUE</td><td>唯一可空</td></tr><tr><td>CHECK</td><td>检查（ Mysql中无效）</td></tr><tr><td>FOREIGN KEY</td><td>外键，限制两表关系</td></tr></tbody></table><p>约束添加的分类</p><ol><li>列级约束：除了外键约束，其它都支持</li><li>表级约束：除了非空、默认，其它都支持</li></ol><h3 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_stu(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>stuName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>gender <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">CHECK</span>(gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">OR</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span>),<br>seat <span class="hljs-type">INT</span> <span class="hljs-keyword">UNIQUE</span>,<br>age <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">18</span>,<br>marjorId <span class="hljs-type">INT</span>,<br><br><span class="hljs-keyword">CONSTRAINT</span> fk_stu_major <span class="hljs-keyword">FOREIGN</span> KEY(majorId) <span class="hljs-keyword">REFERENCES</span> major(id) # 创建外键<br>)<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_major(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>majorName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>)<br><br><span class="hljs-comment">-- 查看表中的索引</span><br><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> tb_stu<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/DataSource/mysql/10.SQL%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <url>/pumpkin/2021/10/18/DataSource/mysql/10.SQL%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="10-SQL执行原理"><a href="#10-SQL执行原理" class="headerlink" title="10.SQL执行原理"></a>10.SQL执行原理</h1><h2 id="SQL-Server组成部分"><a href="#SQL-Server组成部分" class="headerlink" title="SQL Server组成部分"></a>SQL Server组成部分</h2><p><img src="https://img-blog.csdnimg.cn/20190423191904900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUzNTQ3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1.关系引擎：主要作用是优化和执行查询。<br>包含三大组件：</p><p>（1）命令解析器：检查语法和转换查询树。</p><p>（2）查询执行器：优化查询。</p><p>（3）查询优化器：负责执行查询。</p><p>2.存储引擎：管理所有数据及涉及的IO<br>包含三大组件：</p><p>（1）事务管理器：通过锁来管理数据及维持事务的ACID属性。</p><p>（2）数据访问方法：处理对行、索引、页、行版本、空间分配等的I&#x2F;O请求。</p><p>（3）缓冲区管理器：管理SQL Server的主要内存消耗组件Buffer Pool。</p><p>3.Buffer Pool<br>包含SQL Server的所有缓存。如计划缓存和数据缓存。</p><p>4.事务日志<br>记录事务的所有更改。保证事务ACID属性的重要组件。</p><p>5.数据文件<br>数据库的物理存储文件。</p><p>6.SQL Server网络接口<br>建立在客户端和服务器之间的网络连接的协议层</p><h2 id="查询的底层原理"><a href="#查询的底层原理" class="headerlink" title="查询的底层原理"></a>查询的底层原理</h2><p><img src="https://img-blog.csdnimg.cn/2019042319215785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUzNTQ3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1.当客户端执行一条T-SQL语句给SQL Server服务器时，会首先到达服务器的网络接口，网络接口和客户端之间有协议层。</p><p>2.客户端和网络接口之间建立连接。使用称为“表格格式数据流”(TDS) 数据包的 Microsoft 通信格式来格式化通信数据。</p><p>3.客户端发送TDS包给协议层。协议层接收到TDS包后，解压并分析包里面包含了什么请求。</p><p>4.命令解析器解析T-SQL语句。命令解析器会做下面几件事情：</p><p>（1）检查语法。发现有语法错误就返回给客户端。下面的步骤不执行。</p><p>（2）检查缓冲池（Buffer Pool）中是否存在一个对应该T-SQL语句的执行计划缓存。</p><p>（3）如果找到已缓存的执行计划，就从执行计划缓存中直接读取，并传输给查询执行器执行。</p><p>（4）如果未找到执行计划缓存，则在查询执行器中进行优化并产生执行计划，存放到Buffer Pool中。</p><p>5.查询优化器优化SQL语句</p><p>当Buffer Pool中没有该SQL语句的执行计划时，就需要将SQL传到查询优化器，通过一定的算法，分析SQL语句，产生一个或多个候选执行计划。选出开销最小的计划作为最终执行计划。然后将执行计划传给查询执行器。</p><p>6.查询执行器执行查询</p><p>查询执行器把执行计划通过OLE DB接口传给存储引擎的数据访问方法。</p><p>7.数据访问方法生成执行代码</p><p>数据访问方法将执行计划生成SQL Server可操作数据的代码，不会实际执行这些代码，传送给缓冲区管理器来执行。</p><p>8.缓冲区管理器读取数据。</p><p>先在缓冲池的数据缓存中检查是否存在这些数据，如果存在，就把结果返回给存储引擎的数据访问方法；如果不存在，则从磁盘（数据文件）中读出数据并放入数据缓存中，然后将读出的数据返回给存储引擎的数据访问方法。</p><p>9.对于读取数据，将会申请共享锁，事务管理器分配共享锁给读操作。</p><p>10.存储引擎的数据访问方法将查询到的结果返回关系引擎的查询执行器。</p><p>11.查询执行器将结果返回给协议层。</p><p>12.协议层将数据封装成TDS包，然后协议层将TDS包传给客户端。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/Mq/RocketMQ/"/>
    <url>/pumpkin/2021/10/18/Mq/RocketMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><blockquote><p><a href="http://rocketmq.apache.org/">http://rocketmq.apache.org</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>下载最新的 binary release，修改配置（原因是默认配置消耗太多内存）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi runserver.sh<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;<br><br>vi runbroker.sh<br>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn128m&quot;<br></code></pre></td></tr></table></figure><p>启动&#x2F;关闭 RocketMQ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Start Name Server</span><br>nohup sh bin/mqnamesrv &amp;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Start Broker</span><br>nohup sh bin/mqbroker -n localhost:9876 &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Shutdown Name Server</span><br>sh bin/mqshutdown namesrv<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Shutdown Broker</span><br>sh bin/mqshutdown broker<br></code></pre></td></tr></table></figure><p>查看启动日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看 namesrv 的启动日志</span><br><span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/namesrv.log<br><span class="hljs-comment"># 查看 broker 的启动日志</span><br><span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/broker.log<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">消费端</span><br>export NAMESRV_ADDR=localhost:9876<br>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">服务端</span><br>export NAMESRV_ADDR=localhost:9876<br>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer<br></code></pre></td></tr></table></figure><h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><p>下载 rocketmq-externals：<a href="https://github.com/apache/rocketmq-externals">https://github.com/apache/rocketmq-externals</a></p><p>解压后修改 rocketmq-console 模块中的 application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">rocketmq.config.namesrvAddr</span>=<span class="hljs-string">localhost:9876</span><br></code></pre></td></tr></table></figure><p>在 rocketmq-console 目录下编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn clean package -Dmaven.test.skip=true<br></code></pre></td></tr></table></figure><p>运行编译完的 jar 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar rocketmq-console-ng-1.0.0.jar --server.port=12581<br></code></pre></td></tr></table></figure><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p><img src="https://img-blog.csdnimg.cn/20210301111718407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h4><ul><li>Broker 面向 Producer 和 Consumer 接受和发送消息</li><li>向 Nameserver 提交自己的信息</li><li>是消息中间件的消息存储、转发服务器。</li><li>每个Broker节点，在启动时，都会遍历NameServer列表，与每个NameServer建立长连接，注册自己的信息，之后定时上报。</li></ul><p><strong>Broker集群</strong></p><ul><li>Broker高可用，可以配成Master&#x2F;Slave结构，Master可写可读，Slave只可以读，Master将写入的数据同步给Slave。<ul><li>一个Master可以对应多个Slave，但是一个Slave只能对应一个Master</li><li>Master与Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定义BrokerId为0表示Master，非0表示Slave</li></ul></li><li>Master多机负载，可以部署多个broker<ul><li>每个Broker与nameserver集群中的所有节点建立长连接，定时注册Topic信息到所有nameserver。</li></ul></li></ul><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><p>消费者可能存在多个，一个消费者集群就代表一个 Group，消息投递到 Group 后只要某一个消费者消费了，就算成功消费，即消息的消费是以 Group 为单位的。</p><h4 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h4><ul><li>消息的生产者</li><li>通过集群中的其中一个节点（随机选择）建立长连接，获得Topic的路由信息，包括Topic下面有哪些Queue，这些Queue分布在哪些Broker上等</li><li>接下来向提供Topic服务的Master建立长连接，且定时向Master发送心跳</li></ul><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>消息的消费者，通过NameServer集群获得Topic的路由信息，连接到对应的Broker上消费消息。</p><p>注意，由于Master和Slave都可以读取消息，因此Consumer会与Master和Slave都建立连接。</p><h4 id="Nameserver"><a href="#Nameserver" class="headerlink" title="Nameserver"></a>Nameserver</h4><p>底层由netty实现，提供了路由管理、服务注册、服务发现的功能，是一个无状态节点</p><p><strong>nameserver是服务发现者</strong>，集群中各个角色（producer、broker、consumer等）都需要定时想nameserver上报自己的状态，以便互相发现彼此，超时不上报的话，nameserver会把它从列表中剔除</p><p><strong>nameserver可以部署多个</strong>，当多个nameserver存在的时候，其他角色同时向他们上报信息，以保证高可用，</p><p><strong>NameServer集群间互不通信</strong>，没有主备的概念</p><p><strong>nameserver内存式存储</strong>，nameserver中的broker、topic等信息默认不会持久化</p><p><strong>为什么不用zookeeper？</strong>：rocketmq希望为了提高性能，CAP定理，客户端负载均衡</p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>Topic是一个逻辑上的概念，实际上Message是在每个Broker上以Queue的形式记录。</p><p><img src="https://img-blog.csdnimg.cn/2021030118144581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Demo-Code"><a href="#Demo-Code" class="headerlink" title="Demo Code"></a>Demo Code</h2><blockquote><p>消息的发送和接收</p></blockquote><h3 id="同步发送接收消息"><a href="#同步发送接收消息" class="headerlink" title="同步发送接收消息"></a>同步发送接收消息</h3><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException, RemotingException, InterruptedException, MQBrokerException &#123;<br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;MyGroup&quot;</span>);<br>        <span class="hljs-comment">// Set nameServer address</span><br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.25.101:9876&quot;</span>);<br>        producer.start();<br>        producer.setSendMsgTimeout(<span class="hljs-number">6000</span>);<br>        <span class="hljs-comment">// Topic: The address to which message will be sent</span><br>        <span class="hljs-comment">// Body: The real message</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;myTopic&quot;</span>, <span class="hljs-string">&quot;myMessage&quot;</span>.getBytes());<br>        <span class="hljs-comment">// Synchronized send, it will blocking, slow but don&#x27;t lose message</span><br>        <span class="hljs-type">SendResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> producer.send(message);<br>        <span class="hljs-comment">// Get consumer&#x27;s fallback</span><br>        System.out.println(result);<br>        producer.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;MyConsumer&quot;</span>);<br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.25.101:9876&quot;</span>);<br>        <span class="hljs-comment">// Each consumer just focus one topic</span><br>        <span class="hljs-comment">// Topic: the address to which message will be sent</span><br>        <span class="hljs-comment">// Filter: * refers to not filter</span><br>        consumer.subscribe(<span class="hljs-string">&quot;myTopic&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> &#123;<br>                <span class="hljs-keyword">for</span> (MessageExt msg : msgs) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">msgStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody());<br>                    System.out.println(msgStr);<br>                &#125;<br>                <span class="hljs-comment">// This message will be consumed by one consumer in default situation, point to point.</span><br>                <span class="hljs-comment">// On the other hand, consumer can update status of message, ack</span><br>                <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br>        consumer.start();<br>        System.out.println(<span class="hljs-string">&quot;Consumer started.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生产者常用的发送模式"><a href="#生产者常用的发送模式" class="headerlink" title="生产者常用的发送模式"></a>生产者常用的发送模式</h3><ol><li>只发送消息，不考虑消息是否成功消费、</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;myTopic&quot;</span>, <span class="hljs-string">&quot;myOnewayMessage&quot;</span>.getBytes());<br>producer.sendOneway(message);<br></code></pre></td></tr></table></figure><ol start="2"><li>同步发送消息，可靠，阻塞</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;myTopic&quot;</span>, <span class="hljs-string">&quot;myMessage&quot;</span>.getBytes());<br><span class="hljs-type">SendResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> producer.send(message);<br></code></pre></td></tr></table></figure><ol start="3"><li>异步发送消息，可靠，不阻塞</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;myTopic&quot;</span>, <span class="hljs-string">&quot;myAsyncMessage&quot;</span>.getBytes());<br>producer.send(message, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendCallback</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(SendResult sendResult)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Send message success, sendResult:&quot;</span> + sendResult);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        <span class="hljs-comment">// You can catch this exception, do some compensation, retry maybe.</span><br>        System.out.println(<span class="hljs-string">&quot;Send message exception, e:&quot;</span> + e.getMessage());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="4"><li>发送带有 TAG、KEY 的消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;myTopic&quot;</span>, <span class="hljs-string">&quot;MyTag&quot;</span>, <span class="hljs-string">&quot;MyKey&quot;</span>, <span class="hljs-string">&quot;myMessage&quot;</span>.getBytes());<br><span class="hljs-type">SendResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> producer.send(message);<br></code></pre></td></tr></table></figure><h2 id="SQL-表达式过滤"><a href="#SQL-表达式过滤" class="headerlink" title="SQL 表达式过滤"></a>SQL 表达式过滤</h2><p>消费者将收到包含TAGA或TAGB或TAGB的消息. 但限制是一条消息只能有一个标签，而这对于复杂的情况可能无效。 在这种情况下，您可以使用SQL表达式筛选出消息.</p><p>在<code>broker.conf </code>中添加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">enablePropertyFilter=true<br></code></pre></td></tr></table></figure><p>启动 broker 加载指定配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">../bin/mqbroker -n 192.168.150.113:9876 -c broker.conf <br></code></pre></td></tr></table></figure><p>随后在集群配置中可以看到</p><p><img src="https://img-blog.csdnimg.cn/20210302171804846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MessageSelector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> MessageSelector.bySql(<span class="hljs-string">&quot;order &gt; 5&quot;</span>);<br>consumer.subscribe(<span class="hljs-string">&quot;myTopic&quot;</span>, selector);<br></code></pre></td></tr></table></figure><h2 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h2><ol><li><p>Half Message：预处理消息，当broker收到此类消息后，会存储到 RMQ_SYS_TRANS_HALF_TOPIC 的消息消费队列中</p></li><li><p>检查事务状态：Broker会开启一个定时任务，消费RMQ_SYS_TRANS_HALF_TOPIC队列中的消息，每次执行任务会向消息发送者确认事务执行状态（提交、回滚、未知），如果是未知，等待下一次回调。</p></li><li><p>超时：如果超过回查次数，默认回滚消息</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210303135132451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerTransaction</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        <span class="hljs-type">TransactionMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionMQProducer</span>(<span class="hljs-string">&quot;MyTransactionGroup&quot;</span>);<br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;192.168.25.101:9876&quot;</span>);<br>        producer.setSendMsgTimeout(<span class="hljs-number">6000</span>);<br>        producer.setTransactionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> LocalTransactionState <span class="hljs-title function_">executeLocalTransaction</span><span class="hljs-params">(Message msg, Object arg)</span> &#123;<br>                <span class="hljs-comment">// Execute local transaction</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;--- Execute ---&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;msg: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody()));<br>                    System.out.println(<span class="hljs-string">&quot;msg: &quot;</span> + msg.getTransactionId());<br>                    <span class="hljs-keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    <span class="hljs-keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> LocalTransactionState <span class="hljs-title function_">checkLocalTransaction</span><span class="hljs-params">(MessageExt msg)</span> &#123;<br>                <span class="hljs-comment">// When no response to half message, this method will be invoked.</span><br>                System.out.println(<span class="hljs-string">&quot;--- Check ---&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;msg: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.getBody()));<br>                System.out.println(<span class="hljs-string">&quot;msg: &quot;</span> + msg.getTransactionId());<br>                <span class="hljs-keyword">return</span> LocalTransactionState.UNKNOW;<br>            &#125;<br>        &#125;);<br>        producer.start();<br>        producer.sendMessageInTransaction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;myTopic&quot;</span>, <span class="hljs-string">&quot;Test Transaction Message&quot;</span>.getBytes()), <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本地事务执行状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 执行事务成功，确认提交</span><br>LocalTransactionState.COMMIT_MESSAGE;<br><span class="hljs-comment">// 回滚消息，broker端会删除半消息</span><br>LocalTransactionState.ROLLBACK_MESSAGE;<br><span class="hljs-comment">// 暂时为未知状态，等待broker回查</span><br>LocalTransactionState.UNKNOW;<br></code></pre></td></tr></table></figure><h2 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h2><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 异步发送时 重试次数，默认 2</span><br>producer.setRetryTimesWhenSendAsyncFailed(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 同步发送时 重试次数，默认 2</span><br>producer.setRetryTimesWhenSendFailed(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 是否向其他broker发送请求 默认false</span><br>producer.setRetryAnotherBrokerWhenNotStoreOK(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// set consume timeout (minute)</span><br>consumer.setConsumeTimeout(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -&gt; &#123;<br><span class="hljs-comment">// return status &#x27;RECONSUME_LATER&#x27;,it will retry to consume this message.</span><br>    <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>Broker投递</strong></p><p>只有在消息模式为集群模式（MessageModel.CLUSTERING）时，Broker才会自动进行重试，广播消息不重试</p><p>重投使用<code>messageDelayLevel</code></p><p>默认值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">messageDelayLevel</span> <span class="hljs-number">1</span>s <span class="hljs-number">5</span>s <span class="hljs-number">10</span>s <span class="hljs-number">30</span>s <span class="hljs-number">1</span>m <span class="hljs-number">2</span>m <span class="hljs-number">3</span>m <span class="hljs-number">4</span>m <span class="hljs-number">5</span>m <span class="hljs-number">6</span>m <span class="hljs-number">7</span>m <span class="hljs-number">8</span>m <span class="hljs-number">9</span>m <span class="hljs-number">10</span>m <span class="hljs-number">20</span>m <span class="hljs-number">30</span>m <span class="hljs-number">1</span>h <span class="hljs-number">2</span>h<br></code></pre></td></tr></table></figure><h2 id="消息重复消费"><a href="#消息重复消费" class="headerlink" title="消息重复消费"></a>消息重复消费</h2><p><strong>引起重复消费的原因</strong></p><p>ACK：正常情况下 Consumer 消费完消息之后会发送 ACK 通知 Broker，Broker 从队列中剔除这条消息，当 ACK 因为网络原因无法发送到 Broker，Broker 会认为该消息没有被消费，消息重投机制会把消息再次投递。</p><p>Group：在集群模式下，消息在 Broker 中会保证相同 Group 的 Consumer 消费一次，但针对不同 Group 的 Consumer 会推送多次。</p><p><strong>解决方案</strong></p><p>数据库：处理消息前，使用消息表主键带有约束字段中 insert</p><p>Map（单机）：putIfAbsent</p><p>Redis：分布式锁</p><h2 id="顺序消费"><a href="#顺序消费" class="headerlink" title="顺序消费"></a>顺序消费</h2><p><strong>生产者</strong></p><p>使用 MessageQueueSelector 的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageQueueSelector</span> &#123;<br>    MessageQueue <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-keyword">final</span> List&lt;MessageQueue&gt; mqs, <span class="hljs-keyword">final</span> Message msg, <span class="hljs-keyword">final</span> Object arg)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>SelectMessageQueueByHash：通过第三个参数判断发送到哪个队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Same arg message will send to same queue.</span><br>producer.send(message, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SelectMessageQueueByHash</span>(), <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// MessageListenerConcurrently: 并发消费，会开启多个线程</span><br>consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) <br>                                 -&gt; ConsumeConcurrentlyStatus.CONSUME_SUCCESS);<br><span class="hljs-comment">// MessageListenerOrderly: 顺序消费，一个队列开启一个线程</span><br>consumer.registerMessageListener((MessageListenerOrderly) (msgs, context) <br>                                 -&gt; ConsumeOrderlyStatus.SUCCESS);<br><span class="hljs-comment">// 设置最大线程数</span><br>consumer.setConsumeThreadMax(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 设置最小线程数</span><br>consumer.setConsumeThreadMin(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/Mq/RabbitMQ%E9%AB%98%E7%BA%A7/"/>
    <url>/pumpkin/2021/10/18/Mq/RabbitMQ%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ高级"><a href="#RabbitMQ高级" class="headerlink" title="RabbitMQ高级"></a>RabbitMQ高级</h1><h2 id="过期队列"><a href="#过期队列" class="headerlink" title="过期队列"></a>过期队列</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>过期时间TTL表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收，过了之后消息自动删除。</p><p>设置消息和队列的两种方式</p><ul><li>通过队列属性设置，队列中所有消息都有相同的过期时间</li><li>对消息单独设置，每条消息的TTL可以不同</li></ul><p>以上两种方法如果同时使用，则消息的过期时间以两者之间TTL较小的为准。消息在队列的生存时间一旦超过设置的TTL值，就称为dead message 被投递到死信队列，消费者无法再收到该消息。</p><h3 id="Spring-Boot-配置"><a href="#Spring-Boot-配置" class="headerlink" title="Spring Boot 配置"></a>Spring Boot 配置</h3><h4 id="xml-配置"><a href="#xml-配置" class="headerlink" title="xml 配置"></a>xml 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 定义过期队列及属性 不存在则自动创建 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rabbit:queue</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myTtlQueue&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my.ttl.queue&quot;</span> <span class="hljs-attr">auto-declare</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:queue-arguments</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 投递到该队列的消息如果没有消费将在6秒后被删除 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;x-message-ttl&quot;</span> <span class="hljs-attr">value-type</span>=<span class="hljs-string">&quot;long&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6000&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:queue-arguments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:queue</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 定义定向交换机，根据不同的路由key投递信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rabbit:direct-exchange</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDirExchange&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my.dir.exchange&quot;</span> <span class="hljs-attr">auto-declare</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:bindings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:binding</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;my.ttl.dlx&quot;</span> <span class="hljs-attr">queue</span>=<span class="hljs-string">&quot;my.ttl.queue&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:bindings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:direct-exchange</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>消息在6秒内未被消费则会过期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">amqpTemplate.convertAndSend(<span class="hljs-string">&quot;my.dir.exchange&quot;</span>, <span class="hljs-string">&quot;my.ttl.dlx&quot;</span>, <span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210103224630359.png" alt="在这里插入图片描述"></p><h3 id="单个消息配置过期时间"><a href="#单个消息配置过期时间" class="headerlink" title="单个消息配置过期时间"></a>单个消息配置过期时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MessageProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageProperties</span>();<br>messageProperties.setExpiration(<span class="hljs-string">&quot;5000&quot;</span>);<br><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;This message will expired in 5s&quot;</span>.getBytes(), messageProperties);<br>amqpTemplate.convertAndSend(<span class="hljs-string">&quot;sardine.exchange.direct&quot;</span>, <span class="hljs-string">&quot;demo.first&quot;</span>, message);<br></code></pre></td></tr></table></figure><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>DLX，全称为Dead Letter Exchange，可以称为死信交换机。当消息在一个队列中变成死信（dead message）之后，它能被重新发送到另一个交换机中，这个交换机就是DLX，绑定DLX的队列就称之为死信队列。</p><p>消息变成死信，可能的原因：</p><ul><li>消息被拒绝</li><li>消息过期</li><li>队列达到最大长度</li></ul><p>DLX也是一个正常的交换机，和一般的交换机没什么区别，它能在任何队列上被指定，实际上就是设置某一个队列的属性。当这个队列中存在死信时，Rabbitmq就会自动地将这个消息重新发布到设置的DLX上去，进而被路由到另一个队列，即死信队列。</p><p>要想使用死信队列，只需要在定义队列的时候设置队列参数 <code>x-dead-letter-exchange</code> 指定交换机即可。</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://img-blog.csdnimg.cn/20210103134303902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Spring-Boot-配置-1"><a href="#Spring-Boot-配置-1" class="headerlink" title="Spring Boot 配置"></a>Spring Boot 配置</h3><h4 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h4><p>消息发送到 <code>定向交换机</code> ，6秒后消息过期，转发到 <code>死信交换机</code>，死信交换机再根据路由键转发到 <code>死信队列</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 定义过期队列及属性 不存在则自动创建 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rabbit:queue</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myTtlQueue&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my.ttl.queue&quot;</span> <span class="hljs-attr">auto-declare</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:queue-arguments</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 投递到该队列的消息如果没有消费将在6秒后被删除 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;x-message-ttl&quot;</span> <span class="hljs-attr">value-type</span>=<span class="hljs-string">&quot;long&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6000&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置当消息过期后投递到对应的死信交换机 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;my.dlx.exchange&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:queue-arguments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:queue</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 定义定向交换机，根据不同的路由key投递信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rabbit:direct-exchange</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDirExchange&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my.dir.exchange&quot;</span> <span class="hljs-attr">auto-declare</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:bindings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:binding</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;my.ttl.dlx&quot;</span> <span class="hljs-attr">queue</span>=<span class="hljs-string">&quot;myTtlQueue&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:bindings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:direct-exchange</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 定义死信队列 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rabbit:queue</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDlxQueue&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my.dlx.queue&quot;</span> <span class="hljs-attr">auto-declare</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 定义死信交换机 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rabbit:direct-exchange</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDlxExchange&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my.dlx.exchange&quot;</span> <span class="hljs-attr">auto-declare</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:bindings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 过期的消息转移到my.dlx.queue队列 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:binding</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;my.ttl.dlx&quot;</span> <span class="hljs-attr">queue</span>=<span class="hljs-string">&quot;myDlxQueue&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:bindings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:direct-exchange</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>当消息过期后，会被移动到死信队列中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">amqpTemplate.convertAndSend(<span class="hljs-string">&quot;my.dir.exchange&quot;</span>, <span class="hljs-string">&quot;my.ttl.dlx&quot;</span>, <span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210103224657166.png" alt="在这里插入图片描述"></p><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p>延迟队列存储的对象是对应的延迟信息，所谓”延迟信息”是指消息被发送后，并不想让消费者立刻拿到消息，而是等待特定时间后，消费者才能拿到这个消息进行消费。</p><p>在RabbitMQ中延迟队列可以通过 <code>过期时间 + 死信队列</code>来实现</p><p>应用场景：电商中的支付场景，如果用户下单之后的几十分钟都没有支付成功，那个这个支付的订单则记为支付失败，要进行支付失败的异常处理（将库存加回去），这个时候可以通过延迟队列来实现。</p><p><img src="https://img-blog.csdnimg.cn/20210103134331250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h2><p>确认并保证消息送达，提供了两种方式：发布确认和事务（两者不可同时使用）。</p><p>发布确认的两种方式：消息发送成功确认，消息发送失败回调</p><p><strong>开启手动确认模式</strong></p><p>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">publisher-confirms:</span> <span class="hljs-literal">true</span>        <span class="hljs-comment"># 开启Confirm确认机制</span><br><span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span>         <span class="hljs-comment"># 开启Return确认机制</span><br><span class="hljs-attr">template:</span><br>  <span class="hljs-attr">mandatory:</span> <span class="hljs-literal">true</span>               <span class="hljs-comment"># 消费者在消息没有被路由到合适的队列下会被return监听，不会自动删除</span><br><span class="hljs-attr">listener:</span><br>  <span class="hljs-attr">simple:</span><br>    <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">manual</span>    <span class="hljs-comment"># 消费端手动ACK</span><br>    <span class="hljs-attr">retry:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>             <span class="hljs-comment"># 是否支持重试</span><br></code></pre></td></tr></table></figure><p>消息确认处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageConfirmCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;correlationData = &quot;</span> + correlationData);<br>        System.out.println(<span class="hljs-string">&quot;ack = &quot;</span> + ack);<br>        <span class="hljs-keyword">if</span> (!ack)&#123;<br>            log.error(<span class="hljs-string">&quot;消息处理失败:&#123;&#125;&quot;</span>, cause);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息返回处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageReturnCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ReturnCallback &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(Message message, <span class="hljs-type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;returned Message ===&gt; message=&#123;&#125;, replyCode=&#123;&#125; ,replyText=&#123;&#125; ,exchange=&#123;&#125; ,routingKey=&#123;&#125;&quot;</span>, message, replyCode, replyText, exchange, routingKey);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息发送方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SardineRabbitSender</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Resource</span><br>    MessageConfirmCallback messageConfirmCallback;<br><br>    <span class="hljs-meta">@Resource</span><br>    MessageReturnCallback messageReturnCallback;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String exchange, String routingKey, Object message)</span> &#123;<br>        rabbitTemplate.setConfirmCallback(messageConfirmCallback);<br>        rabbitTemplate.setReturnCallback(messageReturnCallback);<br>        rabbitTemplate.convertAndSend(exchange, routingKey, message, msg -&gt; &#123;<br>            msg.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);<br>            <span class="hljs-keyword">return</span> msg;<br>        &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(UUID.randomUUID().toString()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消息接收方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SardineRabbitReceiver</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(</span><br><span class="hljs-meta">            bindings = @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue(value = &quot;boot.queue&quot;),</span><br><span class="hljs-meta">                    exchange = @Exchange(value = &quot;boot.exchange&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">                    key = &quot;boot.*&quot;</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">deliveryTag</span> <span class="hljs-operator">=</span> message.getMessageProperties().getDeliveryTag();<br>        <span class="hljs-keyword">try</span> &#123;<br>            channel.basicAck(deliveryTag,<span class="hljs-literal">false</span>);<br>            System.out.println(<span class="hljs-string">&quot;收到消息: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;消息处理失败&quot;</span>, e);<br>            <span class="hljs-keyword">if</span> (message.getMessageProperties().getRedelivered())&#123;<br>                log.error(<span class="hljs-string">&quot;消息已重复处理失败，拒绝再次接收&quot;</span>);<br>                channel.basicReject(deliveryTag, <span class="hljs-literal">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                log.warn(<span class="hljs-string">&quot;消息即将再次返回队列处理&quot;</span>);<br>                <span class="hljs-comment">// 消息处理失败，重新入队</span><br>                channel.basicNack(deliveryTag, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sardineRabbitSender.send(<span class="hljs-string">&quot;boot.exchange&quot;</span>, <span class="hljs-string">&quot;boot.queue&quot;</span>,<span class="hljs-string">&quot;Hello Spring Boot&quot;</span>);<br></code></pre></td></tr></table></figure><p>测试结果（消息确认： <code>channel.basicAck(deliveryTag,false)</code>）</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile">correlationData = CorrelationData [id=57808143-1800-4e0c-8405-f6e566fa06f1]<br>ack = true<br><span class="hljs-section">收到消息: Hello Spring Boot</span><br></code></pre></td></tr></table></figure><p>测试结果（消息不确认：没有 <code>channel.basicAck(deliveryTag,false)</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">收到消息: Hello Spring <span class="hljs-type">Boot</span><br><span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> CorrelationData [id=0e4890f3-9b02-<span class="hljs-number">44e1</span>-8dfc-49b4463415c2]<br>ack = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="消息追踪"><a href="#消息追踪" class="headerlink" title="消息追踪"></a>消息追踪</h2><p>Docker环境下查看和启用rabbitmq消息追踪</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看rabbitmq所有插件</span><br>docker exec <span class="hljs-literal">-it</span> rabbitmq rabbitmq<span class="hljs-literal">-plugins</span> list<br><span class="hljs-comment"># 启用rabbitmq_tracing</span><br>docker exec <span class="hljs-literal">-it</span> rabbitmq rabbitmq<span class="hljs-literal">-plugins</span> enable rabbitmq_tracing<br><span class="hljs-comment"># 打开rabbitmq消息追踪</span><br>docker exec <span class="hljs-literal">-it</span> rabbitmq rabbitmqctl trace_on<br><span class="hljs-comment"># 设置消息追踪的VHost</span><br>docker exec <span class="hljs-literal">-it</span> rabbitmq rabbitmqctl trace_on <span class="hljs-literal">-p</span> sardine<br><br><span class="hljs-comment"># 关闭rabbitmq消息追踪</span><br>docker exec <span class="hljs-literal">-it</span> rabbitmq rabbitmqctl trace_off<br><span class="hljs-comment"># 只有administrator角色才能查看日志界面</span><br>docker exec <span class="hljs-literal">-it</span> rabbitmq rabbitmqctl set_user_tags admin administrator<br></code></pre></td></tr></table></figure><p>开启之后发现管理界面多了一个交换机 <code>amp.rabbitmq.trace</code></p><p><img src="https://img-blog.csdnimg.cn/2021010316423370.png" alt="在这里插入图片描述"></p><p>在admin界面中创建一个新的trace</p><p><img src="https://img-blog.csdnimg.cn/20210103164544972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>rabbitmq每发送一次消息都会往日志中写入，所以是比较消耗性能的，只在开发调试中使用</p><p>日志格式（TEXT）</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tex">Node:         rabbit@node1<br>Connection:   &lt;rabbit@node1.3.3552.0&gt;<br>Virtual host: /<br>User:         root<br>Channel:      1<br>Exchange:     exchange<br>Routing keys: [&lt;&lt;&quot;rk&quot;&gt;&gt;]<br>Routed queues: [&lt;&lt;&quot;queue&quot;&gt;&gt;]<br>Properties:   [&#123;&lt;&lt;&quot;delivery<span class="hljs-built_in">_</span>mode&quot;&gt;&gt;,signedint,1&#125;,&#123;&lt;&lt;&quot;headers&quot;&gt;&gt;,table,[]&#125;]<br>Payload: <br>trace test payload.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/Mq/RabbitMQ%E5%9F%BA%E7%A1%80/"/>
    <url>/pumpkin/2021/10/18/Mq/RabbitMQ%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ基础"><a href="#RabbitMQ基础" class="headerlink" title="RabbitMQ基础"></a>RabbitMQ基础</h1><h2 id="MQ种类"><a href="#MQ种类" class="headerlink" title="MQ种类"></a>MQ种类</h2><table><thead><tr><th align="left">特性</th><th align="left">RabbitMQ</th><th align="left">RocketMQ</th><th align="left">kafka</th></tr></thead><tbody><tr><td align="left">开发语言</td><td align="left">erlang</td><td align="left">java</td><td align="left">scala</td></tr><tr><td align="left">单机吞吐量</td><td align="left">万级</td><td align="left">10万级</td><td align="left">10万级</td></tr><tr><td align="left">时效性</td><td align="left">us级</td><td align="left">ms级</td><td align="left">ms级以内</td></tr><tr><td align="left">可用性</td><td align="left">高(主从架构)</td><td align="left">非常高(分布式架构)</td><td align="left">非常高(分布式架构)</td></tr><tr><td align="left">功能特性</td><td align="left">基于erlang开发，所以并发能力很强，性能极其好，延时很低;管理界面较丰富</td><td align="left">MQ功能比较完备，扩展性佳</td><td align="left">只支持主要的MQ功能，像一些消息查询，消息回溯等功能没有提供，毕竟是为大数据准备的，在大数据领域应用广。</td></tr></tbody></table><h2 id="RabbitMQ工作模型"><a href="#RabbitMQ工作模型" class="headerlink" title="RabbitMQ工作模型"></a>RabbitMQ工作模型</h2><p><img src="https://img-blog.csdnimg.cn/20210103225243278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>工作流程：</p><p>生产者发送消息给交换机，交换机根据路由规则将消息分发到各个队列中，消费者监听队列，当发现有消息的时候将消息取走。</p><p>Channel：信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP命令都是通过信道发送出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁TCP都是非常昂贵的开销，所以引入了信道的概念，以复用一条TCP连接。</p><p>VHost：虚拟主机，可以用其分组。提高资源利用率，避免命名的冲突。</p><p>Exchange：地址清单，帮助消息分发到各个队列。</p><p>Queue：队列，用于存储消息。</p><h2 id="RabbitMQ路由分发规则"><a href="#RabbitMQ路由分发规则" class="headerlink" title="RabbitMQ路由分发规则"></a>RabbitMQ路由分发规则</h2><h3 id="1-Direct"><a href="#1-Direct" class="headerlink" title="1. Direct"></a>1. Direct</h3><p>点对点消息模型，消息中的路由键（routing key）如果和Binding中的绑定键（binding key）一致，交换机就将消息发送到对应的队列中。它是完全匹配、单播的模式。</p><p><img src="https://img-blog.csdnimg.cn/2021010322530492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-Fanout"><a href="#2-Fanout" class="headerlink" title="2. Fanout"></a>2. Fanout</h3><p>每个发到fanout类型交换机的消息都会分到所有绑定的队列上去，fanout不处理路由键，它转发消息是最快的，广播模式。</p><p><img src="https://img-blog.csdnimg.cn/20210103225322591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-Topic"><a href="#3-Topic" class="headerlink" title="3.  Topic"></a>3.  Topic</h3><p>通过模式匹配分配消息的路由键属性，将路由键和某个模式匹配，可以识别两个通配符“#”、“*”，有选择性地进行广播。</p><ul><li># 匹配0个或多个单词</li><li>* 匹配一个单词</li></ul><p><img src="https://img-blog.csdnimg.cn/20210103225338676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="SpringBoot-使用RabbitMQ"><a href="#SpringBoot-使用RabbitMQ" class="headerlink" title="SpringBoot 使用RabbitMQ"></a>SpringBoot 使用RabbitMQ</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-配置队列、交换机、绑定关系"><a href="#2-配置队列、交换机、绑定关系" class="headerlink" title="2. 配置队列、交换机、绑定关系"></a>2. 配置队列、交换机、绑定关系</h3><h4 id="2-1-配置方式一"><a href="#2-1-配置方式一" class="headerlink" title="2.1 配置方式一"></a>2.1 配置方式一</h4><h5 id="2-1-1-队列交换机定义"><a href="#2-1-1-队列交换机定义" class="headerlink" title="2.1.1 队列交换机定义"></a>2.1.1 队列交换机定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMqConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">firstQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;sardine.queue.first&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">directExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;sardine.exchange.direct&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindFirst</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;firstQueue&quot;)</span> Queue queue, <span class="hljs-meta">@Qualifier(&quot;directExchange&quot;)</span> DirectExchange directExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(directExchange).with(<span class="hljs-string">&quot;demo.first&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-1-2-消费者"><a href="#2-1-2-消费者" class="headerlink" title="2.1.2 消费者"></a>2.1.2 消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RabbitListener(queues = &quot;sardine.queue.first&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstConsumer</span> &#123;<br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;rabbitmq receive:&quot;</span> + msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-1-3-生产者"><a href="#2-1-3-生产者" class="headerlink" title="2.1.3 生产者"></a>2.1.3 生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">amqpTemplate.convertAndSend(<span class="hljs-string">&quot;sardine.exchange.direct&quot;</span>, <span class="hljs-string">&quot;demo.first&quot;</span>, <span class="hljs-string">&quot;Hello World&quot;</span>);<br><span class="hljs-comment">// 测试结果: rabbitmq receive:Hello World</span><br></code></pre></td></tr></table></figure><h4 id="2-2-配置方式二"><a href="#2-2-配置方式二" class="headerlink" title="2.2 配置方式二"></a>2.2 配置方式二</h4><h5 id="2-2-1-Direct模式"><a href="#2-2-1-Direct模式" class="headerlink" title="2.2.1 Direct模式"></a>2.2.1 Direct模式</h5><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkConsumer</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive1</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message1 = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive2</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message2 = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">amqpTemplate.convertAndSend(<span class="hljs-string">&quot;work&quot;</span>, i);<br><span class="hljs-comment">// 测试结果: 平均分配到各个队列</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">message1 = 0</span><br><span class="hljs-comment">message2 = 1</span><br><span class="hljs-comment">message1 = 2</span><br><span class="hljs-comment">message2 = 3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="2-2-2-Fanout模式"><a href="#2-2-2-Fanout模式" class="headerlink" title="2.2.2 Fanout模式"></a>2.2.2 Fanout模式</h5><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FanoutConsumer</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    exchange = @Exchange(value = &quot;fanout.exchange&quot;, type = ExchangeTypes.FANOUT)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive1</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message1 = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    exchange = @Exchange(value = &quot;fanout.exchange&quot;, type = ExchangeTypes.FANOUT)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive2</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message2 = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">amqpTemplate.convertAndSend(<span class="hljs-string">&quot;fanout.exchange&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;Fanout message&quot;</span>);<br><span class="hljs-comment">// 测试结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">message1 = Fanout message</span><br><span class="hljs-comment">message2 = Fanout message</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="2-2-3-Topic模式"><a href="#2-2-3-Topic模式" class="headerlink" title="2.2.3 Topic模式"></a>2.2.3 Topic模式</h5><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TopicConsumer</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    exchange = @Exchange(name = &quot;topic.exchange&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">                    key = &#123;&quot;user.save&quot;, &quot;user.*&quot;&#125;</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive1</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message1 = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    exchange = @Exchange(name = &quot;topic.exchange&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">                    key = &#123;&quot;order.#&quot;, &quot;produce.#&quot;, &quot;user.*&quot;&#125;</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive2</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message2 = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">amqpTemplate.convertAndSend(<span class="hljs-string">&quot;topic.exchange&quot;</span>, <span class="hljs-string">&quot;user.keith&quot;</span>, <span class="hljs-string">&quot;Topic user message&quot;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试结果: 由于两个队列都有user.* 所以都会收到消息</span><br><span class="hljs-comment"> * message2 = Topic user message</span><br><span class="hljs-comment"> * message1 = Topic user message</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">amqpTemplate.convertAndSend(<span class="hljs-string">&quot;topic.exchange&quot;</span>, <span class="hljs-string">&quot;produce.add.save&quot;</span>, <span class="hljs-string">&quot;Topic produce message&quot;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试结果: 由于只有队列2有produce.# 所有只有队列2收到消息</span><br><span class="hljs-comment"> * message2 = Topic produce message</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/Mq/RabbitMQ%E5%BA%94%E7%94%A8/"/>
    <url>/pumpkin/2021/10/18/Mq/RabbitMQ%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ应用"><a href="#RabbitMQ应用" class="headerlink" title="RabbitMQ应用"></a>RabbitMQ应用</h1><h2 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h2><p>当生产者生产的速度长时间远远大于消费的速度时，就会造成消息堆积。</p><ul><li>消息堆积的影响<ul><li>可能导致新消息无法进入队列</li><li>可以导致旧消息无法丢失</li><li>消息等待的消费时间过长，超出了业务容忍范围</li></ul></li><li>产生堆积的情况<ul><li>生产者突然大量发布消息</li><li>消费者消费失败</li><li>消费者出现性能瓶颈</li></ul></li><li>解决办法<ul><li>排查消费者的性能瓶颈</li><li>增加消费者的多线程处理</li><li>部署多个消费者</li></ul></li></ul><p><strong>消息已经堆积如何解决</strong></p><p>消息队列堆积，想办法把消息转移到一个新的队列，增加服务器来慢慢消费。</p><h2 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h2><p>消息生产者发送消息成功，但是MQ没有收到消息，消息在从生产者传输到MQ的过程中丢失，一般是由于网络不稳定等原因。</p><p><strong>解决方案</strong></p><ol><li><p>采用RabbitMQ的消息确认机制，当消息成功被MQ接收到时，会给生产者发送一个确认消息表示接收成功。</p><p>RabbitMQ发送方消息确认模式有三种：普通确认模式，批量确认模式，异步监听确认模式。</p><p>异步监听确认模式：边发送消息边进行确认，不影响主线程任务进行。</p></li><li><p>RabbitMQ持久化交换机、队列、消息，确保MQ服务重启时能从磁盘恢复对应的交换机、队列和消息。</p><p>Spring整合后默认开启了交换机、队列、消息的持久化。</p></li></ol><h2 id="有序消费"><a href="#有序消费" class="headerlink" title="有序消费"></a>有序消费</h2><p><strong>场景1</strong></p><p>当RabbitMQ采用Work Queue模式，此时只会有一个Queue但是会有多个Consumer，同时多个Consumer直接是竞争关系，此时就会出现MQ消息乱序的问题。</p><p>解决方案：生产者根据 ID 计算出一个 Hash 值，然后对队列的个数取余，可以让相同 ID 的所有操作压到同一个队列，且每个队列都只有一个消费者，此时就不会出现乱序的情况。</p><p><img src="https://img-blog.csdnimg.cn/20210126162412781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>场景2</strong></p><p>当RabbitMQ采用简单队列模式的时候，如果消费者采用多线程处理消息，会出现消息乱序的问题。</p><p>解决方案：消费者拉取消息然后根据 ID 算出一个 Hash 然后把相同 ID 的数据压到同一个内存队列，让同一个线程去处理，保证有序。</p><p><img src="https://img-blog.csdnimg.cn/20210126162801750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="重复消费"><a href="#重复消费" class="headerlink" title="重复消费"></a>重复消费</h2><p>为了防止消息在消费端丢失，会采用手动确认MQ的方式来解决，但是会引出一个问题，消费者处理消息成功，回复MQ时由于网络不稳定等因素未成功，MQ认为消费者消费失败，会通过消息的重发导致重复消费。</p><p>解决方案</p><p>使用redis的setnx命令存储消息id，每次消费前先查询该消息id是否存在，如果存在证明已经消费过则不再进行消费。</p><blockquote><p>setnx(key,value)如果key不存在则插入成功且返回1，如果key存在则不操作且返回0</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/10/18/Mq/Kafka/"/>
    <url>/pumpkin/2021/10/18/Mq/Kafka/</url>
    
    <content type="html"><![CDATA[<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><p>Kafka配置文件 server.properties</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">broker.id=0<br>listeners=PLAINTEXT://node01:9092<br>log.dirs=/var/kafka_data<br>zookeeper.connect=node02:2181,node03:2181,node04:2181/kafka<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Ohters/WebPack/"/>
    <url>/pumpkin/2021/09/02/Ohters/WebPack/</url>
    
    <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h2 id="1-npm的基本使用"><a href="#1-npm的基本使用" class="headerlink" title="1. npm的基本使用"></a>1. npm的基本使用</h2><p><strong>npm初始化</strong> </p><p>npm init -y</p><p><strong>npm安装jquery</strong></p><p>npm i jquery -S</p><p>-S： –save（保存）</p><p>包名会被注册在package.json的dependencies里面，在生产环境下这个包的依赖依然存在。</p><p>-D：–dev（开发）</p><p>包名会被注册在package.json的devDependencies里面，仅在开发环境下存在的包。</p><h2 id="2-Webpack的基本使用"><a href="#2-Webpack的基本使用" class="headerlink" title="2 Webpack的基本使用"></a>2 Webpack的基本使用</h2><h3 id="2-1-在项目中安装和配置Webpack"><a href="#2-1-在项目中安装和配置Webpack" class="headerlink" title="2.1 在项目中安装和配置Webpack"></a>2.1 在项目中安装和配置Webpack</h3><ol><li>安装webpack相关的包</li></ol><p>  npm i webpack webpack-cli -D</p><ol start="2"><li><p>在项目的根目录中，创建 webpack.config.js 配置文件</p></li><li><p>在 webpack 配置文件中，初始化如下基本配置</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-comment">// mode 用来指定构建模式</span><br> <span class="hljs-comment">// &#x27;development&#x27; 不压缩与混淆，速度快</span><br> <span class="hljs-comment">// &#x27;production&#x27;  压缩与混淆，速度慢</span><br> <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>在package.json配置文件中 scripts 节点下，新增 dev 脚本</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 该节点下的脚本可以通过 npm run 运行</span><br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br> <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>终端运行 npm run dev，启动 webpack 进行打包</li></ol><h3 id="2-2-WebPack打包配置"><a href="#2-2-WebPack打包配置" class="headerlink" title="2.2 WebPack打包配置"></a>2.2 WebPack打包配置</h3><p>webpack的4.x版本中默认约定</p><p>打包的入口文件为 src &gt; index.js</p><p>打包的输出文件为 dist &gt; main.js</p><p>如果要修改打包的入口与出口，可以在 webpack.config.js 中新增如下配置信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)    <span class="hljs-comment">// 导入node.js中专门操作的模块</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-comment">// 打包入口文件的路径，__dirname表示当前目录绝对路径</span><br>    <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./src/index.js&#x27;</span>),<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-comment">// 输出文件的存放路径</span><br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-comment">// 输出文件的名称</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-WebPack自动打包"><a href="#2-3-WebPack自动打包" class="headerlink" title="2.3 WebPack自动打包"></a>2.3 WebPack自动打包</h3><ol><li><p>安装自动打包工具</p><p>npm i webpack-dev-server -D</p></li><li><p>修改package.json</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>修改引入的sciprt路径为  &#x2F;bundle.js (该配置文件存在于内存中)</p></li><li><p>运行 npm run dev</p></li></ol><h3 id="2-4-WebPack加载器"><a href="#2-4-WebPack加载器" class="headerlink" title="2.4 WebPack加载器"></a>2.4 WebPack加载器</h3><p><strong>1 通过 loader 打包非 js 模块</strong></p><p>webPack 默认只能打包 .js 后缀名结尾的模块，其它非 .js 后缀名结尾的模块需要调用 loader 才可以正常打包。</p><p>如: less-loader sass-loader url-loader</p><p><strong>2 打包处理 css文件</strong></p><ol><li><p>运行 npm i style-loader css-loader -D 命令，安装处理 css 文件的 loader</p></li><li><p>在 webpack.config.js 的 module &gt; rules 数组中， 添加规则如下</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>        <span class="hljs-comment">// test表示匹配文件的类型，use表示要调用的loader</span><br>        &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]&#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/redis/redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <url>/pumpkin/2021/09/02/DataSource/redis/redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h1><h2 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1. RDB"></a>1. RDB</h2><p>默认的持久化方式，快照，是指在指定的时间间隔内将内存中的数据集快照写入磁盘，全量更新</p><p>这种方式是就是将内存中数据以快照的方式写入到二进制文件中，默认的文件名为dump.rdb</p><p>优势：</p><ol><li><p>RDB文件紧凑，全量备份，非常适合用于进行备份和灾难恢复。</p></li><li><p>生成RDB文件的时候，redis主进程会fork一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。</p></li><li><p>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</p></li></ol><p>fork：指的是子进程和父进程指向了同一个内存空间，但父子进程数据是隔离的，所以快照备份的是快照时间点的那部分数据。</p><p>fork实现了copy on write，也就是说父进程修改的时候会复制一份到子进程，本质上是子进程修改了指针指向</p><p><img src="https://img-blog.csdnimg.cn/20210127185350887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>劣势：</p><p>由于进行快照持久化时，会开启一个子进程专门负责快照持久化，子进程会拥有父进程的内存数据，所以在快照持久化期间修改的数据不会被保存，可能丢失数据</p><p>不支持拉链，只有一个 dump.rdb</p><p>配置文件说明</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 900秒内1条记录更新则备份</span><br><span class="hljs-attribute">save</span> <span class="hljs-number">900</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">save</span> <span class="hljs-number">300</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">save</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span><br><span class="hljs-comment"># 当启用了RDB且最后一次后台保存数据失败，redis是否停止接收数据</span><br><span class="hljs-attribute">stop</span>-writes-<span class="hljs-literal">on</span>-bgsave-error yes<br><span class="hljs-comment"># 对于存储到磁盘中的快照，可以设置是否进行压缩存储</span><br><span class="hljs-attribute">rdbcompression</span> yes<br><span class="hljs-comment"># redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗</span><br><span class="hljs-attribute">rdbchecksum</span> yes<br><span class="hljs-comment"># 设置快照的文件名</span><br><span class="hljs-attribute">dbfilename</span> dump.rdb<br></code></pre></td></tr></table></figure><h2 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2. AOF"></a>2. AOF</h2><p>redis会将每一个收到的写命令都通过write函数追加到文件中，通俗的理解就是日志记录。</p><p>持久化文件会变的越来越大，为了压缩aof的持久化文件。redis提供了bgrewriteaof命令。将内存中的数据以命令的方式保存到临时文件中，同时会fork出一条新进程来将文件重写。</p><p><strong>优点</strong></p><p>（1）AOF可以更好的保护数据不丢失，一般AOF会每隔1秒，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据。（2）AOF日志文件没有任何磁盘寻址的开销，写入性能非常高，文件不容易破损。</p><p>（3）AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。</p><p>（4）AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝AOF文件，将最后一条flushall命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据</p><p><strong>缺点</strong></p><p>（1）对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大</p><p>（2）AOF开启后，支持的写QPS会比RDB支持的写QPS低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高的</p><p>（3）以前AOF发生过bug，就是通过AOF记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。</p><p>配置文件说明</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 是否开启AOF，yes 是， no 否</span><br><span class="hljs-attribute">appendonly</span> <span class="hljs-literal">yes</span><br><br><span class="hljs-comment"># 持久化策略</span><br><span class="hljs-comment"># 1. always: 同步持久化，每次发生数据变更会立即记录到磁盘，性能较差但完整性较好</span><br><span class="hljs-comment"># 2. everysec: 出厂默认推荐，异步操作，每秒记录，如果一秒宕机，有数据丢失</span><br><span class="hljs-comment"># 3. no</span><br>appendfsync everysec<br><br><span class="hljs-comment"># AOF文件持续增长过大时，会fork出一条新进程来讲文件重写</span><br><span class="hljs-literal">no</span>-appendfsync-<span class="hljs-literal">on</span>-rewrite <span class="hljs-literal">no</span> <span class="hljs-comment"># 重写时是否可以运用appendfsync，用no即可，保证数据的安全性</span><br>auto-aof-rewrite-percentage <span class="hljs-number">100</span><br>auto-aof-rewrite-min-size 64mb<br></code></pre></td></tr></table></figure><p>修复AOF文件</p><ul><li>redis-check-aof –fix appendonly.aof</li></ul><p><strong>设计一个方案让 AOF 足够小</strong></p><p>hdfs + fsimage + edits.log 让日志只记录增量合并的过程</p><p>4.0以前：重写，删除抵消的命令、合并重复的命令，最终也是一个纯指令的日志文件</p><p>4.0以后：重写，将增量以指令的方式 Append 到 RDB，AOF是是一个混合体，利用了RDB的和AOF的全量</p><p>写操作会触发IO：no、always、每秒</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/redis/redis%E5%B8%B8%E8%A7%81%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <url>/pumpkin/2021/09/02/DataSource/redis/redis%E5%B8%B8%E8%A7%81%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="redis常见缓存问题"><a href="#redis常见缓存问题" class="headerlink" title="redis常见缓存问题"></a>redis常见缓存问题</h1><p><strong>缓存与数据库双写不一致</strong></p><p>现象1：先修改数据库，再删除缓存，如果缓存删除失败，缓存中是旧数据，就会出现数据不一致。</p><p>解决1：先删除缓存，再修改数据库，如果修改数据库失败了，数据库是旧数据，缓存为空，数据一致。</p><p>现象2：在更新一个库存的时候，同时在读取这个库存，此时数据库修改还未完成，旧的数据就会落到缓存中。</p><p>解决2：将数据库与缓存的更新和读取进行异步串行化。</p><p><strong>缓存雪崩</strong></p><p>现象：key集中过期导致短时间内大量请求落到数据库。</p><p>解决方案：过期时间使用固定时间+随机值模式，稀释集中到期的key的数量</p><p><strong>缓存穿透</strong></p><p>现象：查询一个一定不存在的数据，缓存不会命中</p><p>解决：空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p><p><strong>缓存击穿</strong></p><p>现象：超高热点的key过期导致短时间内大量请求落到数据库。</p><p>解决：分布式锁</p><p><strong>缓存内存超出设置的最大值会发生什么</strong></p><p>OOM command not allowed when used memory</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/redis/redis%E5%9F%BA%E7%A1%80/"/>
    <url>/pumpkin/2021/09/02/DataSource/redis/redis%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>栈：同向命令，如 lpush + lpop，rpush + rpop</p><p>队列：反向命令：如 lpush + rpop，rpush + lpop</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看list命令</span><br>help @list<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出指定 key 的 start 到 end 个元素</span><br>LRANGE KEY START END<br><span class="hljs-meta prompt_"># </span><span class="language-bash">例：取出 k1 的所有元素</span><br>LRANGE k1 0 -1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">实现一个简单的阻塞队列</span><br>BLPOP k1 0 # 客户端1阻塞<br>LPUSH k1 1 2 3 # 客户端2压入数据客户端1取消阻塞<br></code></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">HSET sean name zzl<br>HMSET sean age 18 address bj<br>hget sean name<br>hmget sean name age<br>hkeys sean<br></code></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">向<span class="hljs-built_in">set</span>里加入数据并去重</span><br>sadd kset 1 1 2 3 4 5 6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">随机取出3个元素，去重</span><br>srandmember kset 3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">随机取出3个元素，可以有重复</span><br>srandmember kset -3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">弹出一个元素</span><br>spop kset<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取两个集合的交集</span><br>sinter a b<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取两个集合的并集</span><br>sunion a b<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取a集合对于b集合的差集</span><br>sdiff a b<br></code></pre></td></tr></table></figure><h3 id="Sorted-Set"><a href="#Sorted-Set" class="headerlink" title="Sorted Set"></a>Sorted Set</h3><h2 id="redis管道"><a href="#redis管道" class="headerlink" title="redis管道"></a>redis管道</h2><p>可以将多个操作合并成一次请求，降低通信的成本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 开启socket连接使用redis</span><br>nc localhost <span class="hljs-number">6379</span><br><span class="hljs-built_in">set</span> k1 v1<br><span class="hljs-comment"># 批量操作redis</span><br><span class="hljs-built_in">echo</span> <span class="hljs-literal">-e</span> <span class="hljs-string">&quot;set k2 2\n incr k2\n get k2&quot;</span> | nc localhost <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><h2 id="消息订阅"><a href="#消息订阅" class="headerlink" title="消息订阅"></a>消息订阅</h2><p>在redis中的A端开启消息的发布<code>publish</code></p><p>在redis中的B端使用<code>subscribe</code>可实时监听消息</p><p><strong>服务端</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>&gt; publish my hello<br>(integer) <span class="hljs-number">0</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>&gt; publish my world<br>(integer) <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>消费端</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>&gt; subscribe my<br>Reading messages... (press Ctrl<span class="hljs-literal">-C</span> to quit)<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;subscribe&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;my&quot;</span><br><span class="hljs-number">3</span>) (integer) <span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;message&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;my&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;world&quot;</span><br></code></pre></td></tr></table></figure><p><strong>使用场景：实时聊天</strong></p><p>客户端A发布消息到redis</p><ol><li><p>客户端B订阅消息，收消息</p></li><li><p>redis zset服务订阅消息，维护近期的热点消息，时间作为分值，消息作为元素，剔除早期的数据</p></li><li><p>数据库服务订阅消息，维护全量消息数据</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210110094824260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="redisBloom（布隆过滤器）"><a href="#redisBloom（布隆过滤器）" class="headerlink" title="redisBloom（布隆过滤器）"></a>redisBloom（布隆过滤器）</h2><p>布隆过滤器：解决缓存穿透</p><ol><li>将可查询到的数据通过映射函数向布隆过滤器里标记</li><li>如果用户请求的数据你有，就会放行到DB，如果你没有，也有小概率被放行</li><li>可能会误标记：商品3 映射到了商品1和商品2标记的位置</li><li>但是一定概率会大量减少穿透，而且成本低</li><li>数据库增加了元素，也需要向布隆过滤器里增加</li></ol><p><img src="https://img-blog.csdnimg.cn/20210110163932551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>布隆过滤器的3种实现</p><p><img src="https://img-blog.csdnimg.cn/20210110164709746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>安装布隆过滤器</p><p><img src="https://img-blog.csdnimg.cn/20210110164739616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="redis-encoding"><a href="#redis-encoding" class="headerlink" title="redis encoding"></a>redis encoding</h2><p><strong>判断这个key中value的编码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">object encoding key<br></code></pre></td></tr></table></figure><p>二进制安全：redis只取字节流</p><p>如果进行了 incr 操作，那么 redis 会将 value 取出转换成数值类型再进行 incr</p><p><strong>编码集格式化</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli --raw<br></code></pre></td></tr></table></figure><h2 id="Sorted-Set-1"><a href="#Sorted-Set-1" class="headerlink" title="Sorted Set"></a>Sorted Set</h2><blockquote><p>skip list</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加元素到zset</span><br>zadd kzset 8 apple 2 banana 3 orange<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看zset的元素，带分值</span><br>zrange kzset 0 -1 WITHSCORES<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出分值3-8之间的元素</span><br>zrangbyscore kzset 3 8<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取出对应元素的分值</span><br>zscore kzset apple<br><span class="hljs-meta prompt_"># </span><span class="language-bash">得到对应元素的排名</span><br>zrank kzset apple<br><span class="hljs-meta prompt_"># </span><span class="language-bash">增加对应元素分值+</span> <br>zincrby kzset 2.5 banana<br><span class="hljs-meta prompt_"># </span><span class="language-bash">并集 第一个集合权重1 第二个集合权重0.5</span><br>zunionstore unkey 2 k1 k2 weights 1 0.5<br></code></pre></td></tr></table></figure><h2 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h2><p>1字节 &#x3D; 8位 即 1字节 &#x3D; 0000 0000</p><p>将k1偏移量为1的位置上设置为1，即 0100 0000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">setbit k1 1 1<br>strlen k1 # 长度是1<br></code></pre></td></tr></table></figure><p>将k1偏移量为9的位置上设置为1，即 0000 0000 0100 0000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">setbit k2 9 1<br>strlen k2 # 长度是2<br></code></pre></td></tr></table></figure><p><strong>bitpos</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bitpos key bit start end<br></code></pre></td></tr></table></figure><p>从第一个字节中找出1的第一次出现位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">bitpos k1 1 0 0<br>(integer) 1<br></code></pre></td></tr></table></figure><p>从第二个字节中找出1的第一次出现位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">bitpos k2 1 1 1<br>(integer) 9<br></code></pre></td></tr></table></figure><p><strong>bitcount</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">BITCOUNT key [start] [end]<br></code></pre></td></tr></table></figure><p><code>start</code> 和 <code>end</code> 都可以使用负数值：比如 <code>-1</code> 表示最后一个位，而 <code>-2</code> 表示倒数第二个位，以此类推。</p><p>返回前两个字节中1的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bitcount k1 0 1<br></code></pre></td></tr></table></figure><p><strong>bitop</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">按位与 有0则0</span><br>bitop and ka k1 k2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">按位或 有1则1</span><br>bitop or ko k1 k2<br></code></pre></td></tr></table></figure><p><strong>应用场景</strong></p><ol><li>有用户系统，统计用户登录天数，且窗口随机</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">setbit sean 1 1# 第1天登录<br>setbit sean 7 1# 第7天登录<br>setbit sean 364 1# 第364天登录<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看长度，即46个字节即可保存一个用户一年的登录天数</span><br>strlen sean<br>(integer) 46<br><span class="hljs-meta prompt_"># </span><span class="language-bash">反向索引找到最后一次的登录时间</span><br>bitcount sean -2 -1<br></code></pre></td></tr></table></figure><ol start="2"><li>统计某几天的活跃用户数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">2020-6-18 号用户数1个</span><br>setbit 20200618 1 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2020-6-18 号用户数2个</span><br>setbit 202006191 1<br>setbit 202006197 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">按位或运算</span><br>bitop or destkey 20190618 20190619<br><span class="hljs-meta prompt_"># </span><span class="language-bash">统计人数</span><br>bitcount destkey 0 -1<br></code></pre></td></tr></table></figure><p>位图可以这样表示：user1登录了一天，user2登录了两天，user3没登录</p><table><thead><tr><th>key</th><th>user1</th><th>user2</th><th>user3</th></tr></thead><tbody><tr><td>20200618</td><td>0</td><td>1</td><td>0</td></tr><tr><td>20200619</td><td>1</td><td>1</td><td>0</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/redis/redis%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/"/>
    <url>/pumpkin/2021/09/02/DataSource/redis/redis%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="redis命令速查"><a href="#redis命令速查" class="headerlink" title="redis命令速查"></a>redis命令速查</h1><p><img src="https://img-blog.csdnimg.cn/20200203083421315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/pumpkin/2021/09/02/DataSource/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="redis分布式锁"><a href="#redis分布式锁" class="headerlink" title="redis分布式锁"></a>redis分布式锁</h1><p><a href="https://juejin.cn/post/6844904106461495303">https://juejin.cn/post/6844904106461495303</a></p><h2 id="1-实现方式"><a href="#1-实现方式" class="headerlink" title="1. 实现方式"></a>1. 实现方式</h2><p>redis与zookeeper的区别：redis是ap不保证一致性，zk是cp不保证高可用</p><p>redis分布式锁流程：抢锁 - 执行业务 - 删锁</p><p>使用redis作分布式锁需要注意的问题：</p><ol><li>锁需要设置过期时间，以便异常情况下未能成功删锁</li><li>对于加锁和解锁需要保证操作的原子性</li><li>删锁时使用uuid作为value判断value是否一致，防止删除别人的锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;buy&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">buyGoods</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, uuid, <span class="hljs-number">10L</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">null</span> || !flag) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;抢锁失败&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 执行业务逻辑</span><br>        <span class="hljs-keyword">return</span> doBuyGoods();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> RedisUtils.getJedis();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1]\n&quot;</span> +<br>                <span class="hljs-string">&quot;then\n&quot;</span> +<br>                <span class="hljs-string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1])\n&quot;</span> +<br>                <span class="hljs-string">&quot;else\n&quot;</span> +<br>                <span class="hljs-string">&quot;    return 0\n&quot;</span> +<br>                <span class="hljs-string">&quot;end&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> jedis.eval(script, Collections.singletonList(REDIS_LOCK), Collections.singletonList(uuid));<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(o.toString()))&#123;<br>                System.out.println(<span class="hljs-string">&quot;delete redis lock ok&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;delete redis lock error&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>)&#123;<br>                jedis.close();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-redisson"><a href="#2-redisson" class="headerlink" title="2. redisson"></a>2. redisson</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Redisson <span class="hljs-title function_">redisson</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis//127.0.0.1:6379&quot;</span>).setDatabase(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> (Redisson) Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> Redisson redisson;<br><br><span class="hljs-meta">@GetMapping(&quot;buy&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">buyGoods</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redisson.getLock(<span class="hljs-string">&quot;REDIS_LOCK&quot;</span>);<br>    lock.lock();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK, uuid, <span class="hljs-number">10L</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">null</span> || !flag) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;抢锁失败&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 执行业务逻辑</span><br>        <span class="hljs-keyword">return</span> doBuyGoods();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (lock.isLocked() &amp;&amp; lock.isHeldByCurrentThread())<br>            lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-redisson-看门狗"><a href="#3-redisson-看门狗" class="headerlink" title="3. redisson 看门狗"></a>3. redisson 看门狗</h2><p>用于解决锁过期，业务却还没执行完的场景</p><p>原理：他是一个后台线程（定时任务），会每隔10秒检查一下，如果客户端还持有锁key，那么就会不断的延长锁key的生存时间。如果服务挂掉了，定时任务自然也就跑不下去了。</p><p><strong>指定 redisson 锁的过期时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">lock.lock(<span class="hljs-number">10</span>,TimeUnit.SECONDS)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/redis/redis%E4%BA%8B%E5%8A%A1/"/>
    <url>/pumpkin/2021/09/02/DataSource/redis/redis%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>redis事务不保证原子性，redis同一个事务中如果有一条命令执行失败，其它命令仍然会被执行，不会回滚。</p><p>谁的事务先到达（EXEC）就执行谁的事务</p><p>常用命令</p><table><thead><tr><th>命令</th><th>序号</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>DISCARD</td><td>取消事务，放弃执行事务块内的所有命令</td></tr><tr><td>2</td><td>EXEC</td><td>执行事务块内的命令</td></tr><tr><td>3</td><td>MULTI</td><td>标记一个事务的开始</td></tr><tr><td>4</td><td>WATCH key…</td><td>监视一个或多个key，如果事务执行前这些key被其它命令改动，那么事务将被打断</td></tr><tr><td>5</td><td>UNWATCH</td><td>取消对所有Key的监视</td></tr></tbody></table><h2 id="2-命令演示"><a href="#2-命令演示" class="headerlink" title="2.命令演示"></a>2.命令演示</h2><p>初始化数据，并使用watch监视name</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; set name a<br>OK<br></code></pre></td></tr></table></figure><p>客户端A开watch监视name</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; watch name<br>OK<br><span class="hljs-number">127.0.0.1:6379</span>&gt; multi<br>OK<br><span class="hljs-number">127.0.0.1:6379</span>&gt; set name aa<br>QUEUED<br></code></pre></td></tr></table></figure><p>此时客户端B抢先提交了</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; multi<br>OK<br><span class="hljs-number">127.0.0.1:6379</span>&gt; set name bb<br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>&gt; exec<br><span class="hljs-number">1</span>) OK<br></code></pre></td></tr></table></figure><p>那么客户端A提交会失败</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; exec<br>(nil)<br></code></pre></td></tr></table></figure><h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3.代码演示"></a>3.代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    stringRedisTemplate.watch(REDIS_LOCK);<br>    <span class="hljs-keyword">if</span> (uuid.equals(stringRedisTemplate.opsForValue().get(REDIS_LOCK)))&#123;<br>        stringRedisTemplate.setEnableTransactionSupport(<span class="hljs-literal">true</span>);<br>        stringRedisTemplate.multi();<br>        stringRedisTemplate.delete(REDIS_LOCK);<br>        List&lt;Object&gt; exec = stringRedisTemplate.exec();<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(exec)) <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    stringRedisTemplate.unwatch();<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/redis/redis%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4/"/>
    <url>/pumpkin/2021/09/02/DataSource/redis/redis%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="redis主从哨兵集群"><a href="#redis主从哨兵集群" class="headerlink" title="redis主从哨兵集群"></a>redis主从哨兵集群</h1><h2 id="1-主从模式"><a href="#1-主从模式" class="headerlink" title="1. 主从模式"></a>1. 主从模式</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>简介：主从复制即将master中的数据及时有效地复制到slave中</p><p>特征：一个master可以有多个slave，一个slave只对应一个master。</p><p>职责：master写数据，同步数据到salve，slave读数据</p><h3 id="1-2-示意图"><a href="#1-2-示意图" class="headerlink" title="1.2 示意图"></a>1.2 示意图</h3><p><img src="https://img-blog.csdnimg.cn/20200203094442305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-3-工作流程"><a href="#1-3-工作流程" class="headerlink" title="1.3 工作流程"></a>1.3 工作流程</h3><ol><li>建立连接</li></ol><p><img src="https://img-blog.csdnimg.cn/20200203131319126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>同步数据</li></ol><p><img src="https://img-blog.csdnimg.cn/20200203131306330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-4-主从配置"><a href="#1-4-主从配置" class="headerlink" title="1.4 主从配置"></a>1.4 主从配置</h3><h4 id="1-4-1-配置方式"><a href="#1-4-1-配置方式" class="headerlink" title="1.4.1 配置方式"></a>1.4.1 配置方式</h4><p>方式1：客户端发送命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">slaveof &lt;master-ip&gt; &lt;master-port&gt;<br></code></pre></td></tr></table></figure><p>方式2：启动时添加参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-server -slaveof &lt;master-ip&gt; &lt;master-port&gt;<br></code></pre></td></tr></table></figure><p>方式3：修改配置文件<code>redis.conf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">slaveof &lt;master-ip&gt; &lt;master-port&gt;<br></code></pre></td></tr></table></figure><h4 id="1-4-2-相关命令"><a href="#1-4-2-相关命令" class="headerlink" title="1.4.2 相关命令"></a>1.4.2 相关命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看所有信息</span><br>info<br><br><span class="hljs-comment"># 查看主从信息</span><br>info replication <br><br><span class="hljs-comment"># 断开连接</span><br>slaveof no one<br></code></pre></td></tr></table></figure><h3 id="1-5-注意事项"><a href="#1-5-注意事项" class="headerlink" title="1.5 注意事项"></a>1.5 注意事项</h3><ol><li>复制缓冲区大小设置不合理会导致数据溢出使主从数据不一致，主从数据不一致会导致全量复制，所以必须将复制缓冲区设置一个合理的大小。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 复制缓冲区默认为1mb</span><br>repl-blocking-size 1mb<br></code></pre></td></tr></table></figure><ol start="2"><li>master单机内存占用建议使用50%-70%，留下30%-50%用于执行bgsave命令和创建缓冲区。</li><li>slave最好只对外开放读功能，不开放写功能</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">slave-serve-stale-data <span class="hljs-built_in">yes</span>|no<br></code></pre></td></tr></table></figure><h2 id="2-哨兵模式"><a href="#2-哨兵模式" class="headerlink" title="2. 哨兵模式"></a>2. 哨兵模式</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>哨兵（sentinel）是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。哨兵也是一台redis服务器，只是不提供数据服务，通常哨兵的配置数量为单数。</p><ol><li>监控：不断的检查master和slave是否正常运行，master存活检测、master与slave运行情况检测</li><li>通知：当被监控的服务器出现故障时，向其他客户端发送通知</li><li>自动故障转移：断开master和slave连接，选取一个slave作master，将其他slave连接到新master，并告知客户端新的服务器地址</li></ol><h3 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">指定端口 26379</span><br>port 26379<br><span class="hljs-meta prompt_"># </span><span class="language-bash">监控主节点，名称为mymaster，至少需要两个哨兵同意才会进行故障转移</span><br>sentinel monitor mymaster 127.0.0.1 6379 2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">30秒未响应判断死亡</span><br>sentinel down-after-milliseconds mymaster 30000<br></code></pre></td></tr></table></figure><p>启动哨兵服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server ./26379.conf --sentinel<br></code></pre></td></tr></table></figure><p>查看哨兵的通信，在master节点输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PSUBSCRIBE *<br></code></pre></td></tr></table></figure><p>可以看到以下输出，哨兵在询问master是否存活</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">3) &quot;__sentinel__:hello&quot;<br>4) &quot;127.0.0.1,26379,36f7e5a15c4bda4ea9394a8b90c5c2c307123b25,0,mymaster,127.0.0.1,6379,0&quot;<br>1) &quot;pmessage&quot;<br></code></pre></td></tr></table></figure><h3 id="2-3-整合-Spring-Boot"><a href="#2-3-整合-Spring-Boot" class="headerlink" title="2.3 整合 Spring Boot"></a>2.3 整合 Spring Boot</h3><ol><li>pom依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">master:</span> <span class="hljs-string">mymaster</span><br>      <span class="hljs-attr">nodes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:26379</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:26380</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:26381</span><br></code></pre></td></tr></table></figure><h2 id="3-集群模式"><a href="#3-集群模式" class="headerlink" title="3. 集群模式"></a>3. 集群模式</h2><h3 id="3-1-示意图"><a href="#3-1-示意图" class="headerlink" title="3.1 示意图"></a>3.1 示意图</h3><p>各个数据库相互通信，保存各个库中槽的编号数据</p><ul><li><p>一次命中，直接返回</p></li><li><p>一次未命中，告知具体位置</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200203150519604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-2-集群配置"><a href="#3-2-集群配置" class="headerlink" title="3.2 集群配置"></a>3.2 集群配置</h3><p>准备三个redis服务，6379 6380 6381</p><h3 id="3-3-命令启动集群"><a href="#3-3-命令启动集群" class="headerlink" title="3.3 命令启动集群"></a>3.3 命令启动集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">主机正常启动</span><br>redis-server ./6379.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从机追随主机启动</span><br>redis-server ./6380.conf --replicaof 127.0.0.1 6379<br>redis-server ./6381.conf --replicaof 127.0.0.1 6379<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果没有哨兵模式，主机6379挂了，人工将从机6380切换为主机，并让6381追随它</span><br>127.0.0.1:6380&gt; replicaof no one<br>127.0.0.1:6381&gt; replicaof 127.0.0.1 6380<br></code></pre></td></tr></table></figure><h3 id="3-4-配置文件启动集群"><a href="#3-4-配置文件启动集群" class="headerlink" title="3.4 配置文件启动集群"></a>3.4 配置文件启动集群</h3><ol><li>修改redis.conf</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开启集群</span><br>cluster-enabled yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置集群配置文件，每个服务器要不一样</span><br>cluster-config-file node-6379.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置下线时间</span><br>cluster-node-timeoout 10000<br></code></pre></td></tr></table></figure><ol start="2"><li>依次启动集群服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server redis-6379.conf<br></code></pre></td></tr></table></figure><ol start="3"><li><p>将redis服务连接起来</p><blockquote><p>需要执行src目录下的redis-trib.rb，且需要ruby环境<br>下列命名表示1个master有1个slave，且一共有6个服务器</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis-trib.rb create --replicas 1 \<br>127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 \<br>127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/mysql/3.%E9%94%81/"/>
    <url>/pumpkin/2021/09/02/DataSource/mysql/3.%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="3-锁"><a href="#3-锁" class="headerlink" title="3.锁"></a>3.锁</h1><blockquote><p>Mysql有三种锁：表锁(偏读)、行锁(偏写)、页锁</p></blockquote><h2 id="锁概述"><a href="#锁概述" class="headerlink" title="锁概述"></a>锁概述</h2><p>不同的存储引擎支持 不同的锁机制</p><p>MyISAM 和 MEMORY 存储引擎采用的是表级锁（table-level locking）</p><p>InnoDB 存储引擎既支持行级锁（row-level locking），也支持表级锁，默认情况下是采用行级锁</p><p>锁的的是索引</p><ul><li><p>表级锁： 开销小，加锁快；不会出现死锁(因为 MyISAM 会一次性获得 SQL 所需的全部锁)。锁定粒度大，发生锁冲突的概率最高，并发度最低。 </p></li><li><p>行级锁： 开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。 </p></li><li><p>页锁：开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间， 并发度一般。</p></li></ul><h2 id="查看锁命令"><a href="#查看锁命令" class="headerlink" title="查看锁命令"></a>查看锁命令</h2><h3 id="1-查看锁"><a href="#1-查看锁" class="headerlink" title="1. 查看锁"></a>1. 查看锁</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">open</span> tables;<br></code></pre></td></tr></table></figure><p>In_use为0表示没有被锁<br><img src="https://img-blog.csdnimg.cn/20200201080542825.png" alt="在这里插入图片描述"></p><h3 id="2-分析表锁定"><a href="#2-分析表锁定" class="headerlink" title="2. 分析表锁定"></a>2. 分析表锁定</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%table%&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>Table_locks_immediate：产生表级锁定的次数（锁的查询次数）。</li><li>Table_locks_waited：出现表级锁定争用而发生等待的次数，此值高说明存在严重表级锁争用情况。<h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><h3 id="1-读锁（共享锁）"><a href="#1-读锁（共享锁）" class="headerlink" title="1. 读锁（共享锁）"></a>1. 读锁（共享锁）</h3>Session 1 为Table增加读锁之后：</li><li>Session 1 只能读锁定表，不能读其他表，写锁定表报错。</li><li>Session 2 可以读任何表，写锁定表阻塞。<h3 id="2-写锁（独占锁）"><a href="#2-写锁（独占锁）" class="headerlink" title="2. 写锁（独占锁）"></a>2. 写锁（独占锁）</h3>Session 1 为Table增加写锁之后：</li><li>Session 1 可以做锁定表进行任何操作</li><li>Session 2 无法对锁定表进行任何操作<h3 id="3-相关命令"><a href="#3-相关命令" class="headerlink" title="3. 相关命令"></a>3. 相关命令</h3><strong>加读锁</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">lock <span class="hljs-keyword">table</span> 表名<span class="hljs-number">1</span> read, 表名<span class="hljs-number">2</span> read;<br></code></pre></td></tr></table></figure><strong>加写锁</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">lock <span class="hljs-keyword">table</span> 表名<span class="hljs-number">1</span> read, 表名<span class="hljs-number">2</span> read;<br></code></pre></td></tr></table></figure><strong>解锁</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">unlock tables;<br></code></pre></td></tr></table></figure><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><h3 id="1-开启事务即开启了行锁"><a href="#1-开启事务即开启了行锁" class="headerlink" title="1. 开启事务即开启了行锁"></a>1. 开启事务即开启了行锁</h3>提交事务之前，其它会话查询到的都是未提交的数据，如果更新了同一行，会被阻塞，直到这个事务被提交。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">update</span> dept <span class="hljs-keyword">set</span> dname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;开发部2&#x27;</span> <span class="hljs-keyword">where</span> deptno <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><h3 id="2-悲观锁"><a href="#2-悲观锁" class="headerlink" title="2. 悲观锁"></a>2. 悲观锁</h3>当查询deptno&#x3D;1的数据的时候，加<code>for update</code>语句，此时其它会话修改这条记录就会被阻塞。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> deptno <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3. 乐观锁"></a>3. 乐观锁</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> t_goods   <br><span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">2</span>,version<span class="hljs-operator">=</span>version<span class="hljs-operator">+</span><span class="hljs-number">1</span>  <br><span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>#&#123;id&#125; <span class="hljs-keyword">and</span> version<span class="hljs-operator">=</span>#&#123;version&#125;;  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/mysql/2.%E4%BA%8B%E5%8A%A1/"/>
    <url>/pumpkin/2021/09/02/DataSource/mysql/2.%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="2-事务"><a href="#2-事务" class="headerlink" title="2.事务"></a>2.事务</h1><h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><p>原子性（atomicity）：一个事务要么全部提交成功，要么全部失败回滚</p><p>一致性（consistency）：一个事务在执行之前和执行之后，数据库都必须处于一致性状态</p><p>隔离性（isolation）：一个事务的执行不能不被其他事务干扰</p><p>持久性（durability）：一旦事务提交，那么它对数据库中的对应数据的状态的变更就会永久保存到数据库中</p><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><h3 id="开启-x2F-关闭自动提交"><a href="#开启-x2F-关闭自动提交" class="headerlink" title="开启&#x2F;关闭自动提交"></a>开启&#x2F;关闭自动提交</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看自动提交</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%autocommit%&#x27;</span><br><span class="hljs-comment">-- 关闭自动提交，只针对当前的会话有效</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="使用事务"><a href="#使用事务" class="headerlink" title="使用事务"></a>使用事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-comment">-- 插入数据</span><br><span class="hljs-keyword">INSERT</span> tb_user <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">22</span>);<br><span class="hljs-keyword">INSERT</span> tb_user <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">ROLLBACK</span>;<br></code></pre></td></tr></table></figure><h3 id="保存点"><a href="#保存点" class="headerlink" title="保存点"></a>保存点</h3><p>保存点就是可以回滚到指定的之前设置的保存点。当开启事务之后操作了很多<code>SQL</code>，可以设置个保存点。当再执行的<code>SQL</code>有问题不需要的时候就可以回滚到之前设置的保存点，不用把当前事务整个回滚掉。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 设置保存点</span><br><span class="hljs-keyword">SAVEPOINT</span> 保存点名称;<br><span class="hljs-comment">-- 回滚到指定保存点</span><br><span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">to</span> 保存点名称;<br><span class="hljs-comment">-- 删除保存点</span><br><span class="hljs-keyword">RELEASE</span> <span class="hljs-keyword">SAVEPOINT</span> 保存点名称;<br></code></pre></td></tr></table></figure><h3 id="查看隔离级别"><a href="#查看隔离级别" class="headerlink" title="查看隔离级别"></a>查看隔离级别</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改隔离级别</span><br><span class="hljs-keyword">set</span> session transaction isolation level 事务隔离级别;<br><span class="hljs-comment">-- 查看隔离级别</span><br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@transaction</span>_isolation;<br></code></pre></td></tr></table></figure><h2 id="事务并发性问题"><a href="#事务并发性问题" class="headerlink" title="事务并发性问题"></a>事务并发性问题</h2><p>对于同时运行多个事务，这些事务访问<strong>数据库中相同的数据</strong>时，如果没有采取必要的隔离机制，就会导致各种并发问题：</p><ul><li>脏读：事务A读到了事务B已修改但尚未提交的数据，此时事务B回滚，A读取数据无效，不符合一致性。</li><li>不可重复读：事务A读到了事务B已提交的修改数据，不符合隔离性。</li><li>幻读：事务A读到了事务B提交的新增数据，不符合隔离性。</li></ul><h2 id="Mysql提供的4种隔离级别"><a href="#Mysql提供的4种隔离级别" class="headerlink" title="Mysql提供的4种隔离级别"></a>Mysql提供的4种隔离级别</h2><p>Mysql 默认隔离级别是 可重复读 (REPEATABLE READ)</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交 READ UNCOMMITTED</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交 READ COMMITTED</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读 REPEATABLE READ</td><td>否</td><td>否</td><td>是</td></tr><tr><td>可序列化 SERIALIZABLE</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><h2 id="MVCC-多版本并发控制"><a href="#MVCC-多版本并发控制" class="headerlink" title="MVCC 多版本并发控制"></a>MVCC 多版本并发控制</h2><p>MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。</p><ul><li><p>当前读<br>像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</p></li><li><p>快照读<br>像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</p></li></ul><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="Undo-Log"><a href="#Undo-Log" class="headerlink" title="Undo Log"></a>Undo Log</h4><p>每行记录除了我们自定义的字段外，还有数据库隐式定义的DB_TRX_ID,DB_ROLL_PTR,DB_ROW_ID等字段</p><ul><li>DB_ROW_ID：隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</li><li>DB_TRX_ID：最近 修改&#x2F;插入 事务ID，记录创建这条记录&#x2F;最后一次修改该记录的事务ID</li><li>DB_ROLL_PTR：回滚指针，指向这条记录的上一个版本（存储于rollback segment里）</li></ul><p>每次事务提交都会有将其加入 undo log 中，undo log会成为一条记录版本线性表</p><ul><li>在事务2修改该行数据时，数据库也先为该行加锁</li><li>然后把该行数据拷贝到undo log中，作为旧记录，发现该行记录已经有undo log了，那么最新的旧数据作为链表的表头，插在该行记录的undo log最前面</li><li>修改该行age为30岁，并且修改隐藏字段的事务ID为当前事务2的ID, 那就是2，回滚指针指向刚刚拷贝到undo log的副本记录</li><li>事务提交，释放锁</li></ul><p><img src="https://img-blog.csdnimg.cn/20210125144344982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Read-View"><a href="#Read-View" class="headerlink" title="Read View"></a>Read View</h4><p>Read View 就是事务进行快照读操作的时候生产的读视图，在该事务执行的快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的ID (当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大)</p><p>Read View 遵循一个可见性算法，主要是将要被修改的数据的最新记录中的DB_TRX_ID（当前事务ID）取出来，与系统当前其他活跃事务的ID去对比，如果 DB_TRX_ID 跟 Read View 的属性做了某些比较，不符合可见性，那就通过 DB_ROLL_PTR 回滚指针去取出 Undo Log 中的 DB_TRX_ID 再比较，即遍历链表的DB_TRX_ID（从链首到链尾，即从最近的一次修改查起），直到找到满足特定条件的DB_TRX_ID, 那么这个DB_TRX_ID所在的旧记录就是当前事务能看见的最新老版本</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DataSource/Mongodb/"/>
    <url>/pumpkin/2021/09/02/DataSource/Mongodb/</url>
    
    <content type="html"><![CDATA[<h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h1><h2 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载</span><br>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-4.2.8.tgz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>tar xf mongodb-linux-x86_64-ubuntu1604-4.2.8.tgz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置安装路径</span><br>export PATH=/usr/local/mongodb4/bin:$PATH<br></code></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>下载地址 <a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p>配置完环境变量后，创建data文件夹，执行以下命名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mongod --dbpath E:\Software\MongoDB\data<br></code></pre></td></tr></table></figure><h3 id="Studio-3T"><a href="#Studio-3T" class="headerlink" title="Studio 3T"></a>Studio 3T</h3><p>下载地址 <a href="https://studio3t.com/download/">https://studio3t.com/download/</a></p><p>破解：重置试用日期</p><p>新建文件 studio3T.bat 到 C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</p><p>运行启动即可</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tex">@echo off<br>ECHO 重置Studio 3T的使用日期......<br>REG DELETE &quot;HKEY<span class="hljs-built_in">_</span>CURRENT<span class="hljs-built_in">_</span>USER<span class="hljs-keyword">\Software</span><span class="hljs-keyword">\JavaSoft</span><span class="hljs-keyword">\Prefs</span><span class="hljs-keyword">\3</span>t<span class="hljs-keyword">\mongochef</span><span class="hljs-keyword">\enterprise</span>&quot; /f<br>RMDIR /s /q <span class="hljs-comment">%USERPROFILE%\.3T\studio-3t\soduz3vqhnnja46uvu3szq--</span><br>RMDIR /s /q <span class="hljs-comment">%USERPROFILE%\.3T\studio-3t\Lwm3TdTxgYJkXBgVk4s3</span><br>RMDIR /s /q <span class="hljs-comment">%USERPROFILE%\AppData\Local\t3\dataman\mongodb\app\AppRunner</span><br>RMDIR /s /q C:<span class="hljs-keyword">\Users</span><span class="hljs-keyword">\Public</span><span class="hljs-keyword">\t</span>3<span class="hljs-keyword">\dataman</span><span class="hljs-keyword">\mongodb</span><span class="hljs-keyword">\app</span><span class="hljs-keyword">\AppRunner</span><br>RMDIR /s /q <span class="hljs-comment">%USERPROFILE%\AppData\Local\Temp\t3\dataman\mongodb\app\AppRunner</span><br>RMDIR /s /q <span class="hljs-comment">%USERPROFILE%\AppData\Local\ftuwWNWoJl-STeZhVGHKkQ--</span><br>RMDIR /s /q <span class="hljs-comment">%USERPROFILE%\AppData\Local\Temp\ftuwWNWoJl-STeZhVGHKkQ--</span><br>RMDIR /s /q <span class="hljs-comment">%USERPROFILE%\.cache\ftuwWNWoJl-STeZhVGHKkQ--</span><br>ECHO 重置完成, 按任意键退出......<br>pause&gt;nul<br>EXIT<br></code></pre></td></tr></table></figure><h2 id="mongodb基本操作"><a href="#mongodb基本操作" class="headerlink" title="mongodb基本操作"></a>mongodb基本操作</h2><h3 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1. 数据库操作"></a>1. 数据库操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- databaseName: 数据库名称</span><br><br><span class="hljs-comment">-- 创建数据库</span><br>use <span class="hljs-operator">&lt;</span>databaseName<span class="hljs-operator">&gt;</span><br><span class="hljs-comment">-- 删除数据库</span><br>db.dropDatabase()<br></code></pre></td></tr></table></figure><h3 id="2-集合操作"><a href="#2-集合操作" class="headerlink" title="2. 集合操作"></a>2. 集合操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- collectionName: 集合名称</span><br><span class="hljs-comment">-- options: 可选参数, 指定有关内存大小及索引的选项</span><br><br><span class="hljs-comment">-- 创建集合</span><br>db.createCollection(<span class="hljs-operator">&lt;</span>collectionName<span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>options<span class="hljs-operator">&gt;</span>)<br><span class="hljs-comment">-- 删除集合</span><br>db.<span class="hljs-operator">&lt;</span>collectionName<span class="hljs-operator">&gt;</span>.<span class="hljs-keyword">drop</span>()<br></code></pre></td></tr></table></figure><h3 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3. 文档操作"></a>3. 文档操作</h3><p>查询文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- query ：可选，使用查询操作符指定查询条件</span><br><span class="hljs-comment">-- projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</span><br><br>db.collection.find(<span class="hljs-operator">&lt;</span>query<span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>projection<span class="hljs-operator">&gt;</span>)<br>db.collection.find().pretty()<br><br><span class="hljs-comment">-- and 查询</span><br>db.col.find(<br>    &#123;<br>    k1:v1, k2:v2<br>    &#125;<br>).pretty()<br><br><span class="hljs-comment">-- or 查询</span><br>db.col.find(<br>   &#123;$<span class="hljs-keyword">or</span>: [&#123;k1: v1&#125;, &#123;k2:v2&#125;]&#125;<br>).pretty()<br><br><span class="hljs-comment">-- or and 结合查询</span><br>db.col.find(<br>   &#123;ka1:va1, ka2:va2&#125;,<br>   &#123;$<span class="hljs-keyword">or</span>: [&#123;ko1: vo1&#125;, &#123;ko2:vo2&#125;]&#125;<br>).pretty()<br><br></code></pre></td></tr></table></figure><p>插入文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- collectionName: 集合名称</span><br><br><span class="hljs-comment">-- 可传数组或对象</span><br>db.<span class="hljs-operator">&lt;</span>collectionName<span class="hljs-operator">&gt;</span>.<span class="hljs-keyword">insert</span>(<span class="hljs-operator">&lt;</span>document<span class="hljs-operator">&gt;</span>)<br><span class="hljs-comment">-- 只能传对象</span><br>db.<span class="hljs-operator">&lt;</span>collectionName<span class="hljs-operator">&gt;</span>.insertOne(<span class="hljs-operator">&lt;</span>document<span class="hljs-operator">&gt;</span>)<br><span class="hljs-comment">-- 只能传数组</span><br>db.<span class="hljs-operator">&lt;</span>collectionName<span class="hljs-operator">&gt;</span>.insertMany(<span class="hljs-operator">&lt;</span>document<span class="hljs-operator">&gt;</span>)<br><br>db.<span class="hljs-operator">&lt;</span>collectionName<span class="hljs-operator">&gt;</span>.save(<span class="hljs-operator">&lt;</span>document<span class="hljs-operator">&gt;</span>)<br></code></pre></td></tr></table></figure><p>更新文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- query: 查询条件</span><br><span class="hljs-comment">-- update: update的对象和一些更新的操作符</span><br><span class="hljs-comment">-- upsert(Boolean): 可选，如果不存在update的记录，是否插入新数据，默认false</span><br><span class="hljs-comment">-- multi(Boolean): 可选，只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新，默认false</span><br><span class="hljs-comment">-- writeConcern :可选，抛出异常的级别</span><br><br><span class="hljs-comment">-- 更新操作符</span><br><span class="hljs-comment">-- $set: 修改文档中的指定属性</span><br><span class="hljs-comment">-- $unset: 删除文档中的指定属性</span><br><br><span class="hljs-comment">-- update默认只修改一个</span><br>db.collection.update(<br>   <span class="hljs-operator">&lt;</span>query<span class="hljs-operator">&gt;</span>,<br>   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">update</span><span class="hljs-operator">&gt;</span>,<br>   &#123;<br>     upsert: <span class="hljs-operator">&lt;</span>upsert<span class="hljs-operator">&gt;</span>,<br>     multi: <span class="hljs-operator">&lt;</span>multi<span class="hljs-operator">&gt;</span>,<br>     writeConcern: <span class="hljs-operator">&lt;</span>writeConcern<span class="hljs-operator">&gt;</span><br>   &#125;<br>)<br><br><span class="hljs-comment">-- example</span><br><span class="hljs-comment">-- 修改第一个文档</span><br>db.inventory.updateOne(<br>&#123;item: &quot;paper&quot;&#125;,<br>    &#123;<br>    $<span class="hljs-keyword">set</span>: &#123;status: &quot;P&quot;&#125;<br>    &#125;<br>)<br><br><span class="hljs-comment">-- 修改所有符合条件的文档</span><br>db.inventory.updatMany(<br>&#123;item: &quot;paper&quot;&#125;,<br>    &#123;<br>    $<span class="hljs-keyword">set</span>: &#123;status: &quot;P&quot;&#125;<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><p>删除文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- query: 查询条件</span><br><span class="hljs-comment">-- justOne: 可选，如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</span><br><span class="hljs-comment">-- writeConcern :可选，抛出异常的级别。</span><br><br>db.collection.remove(<br>   <span class="hljs-operator">&lt;</span>query<span class="hljs-operator">&gt;</span>,<br>   &#123;<br>     justOne: <span class="hljs-operator">&lt;</span>justOne<span class="hljs-operator">&gt;</span>,<br>     writeConcern: <span class="hljs-operator">&lt;</span>writeConcern<span class="hljs-operator">&gt;</span><br>   &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="SpringBoot整合Mongodb"><a href="#SpringBoot整合Mongodb" class="headerlink" title="SpringBoot整合Mongodb"></a>SpringBoot整合Mongodb</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Boot Mongodb --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.data.mongodb.uri</span>=<span class="hljs-string">mongodb://name:pass@localhost:27017/test</span><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SardineUserTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MongoTemplate mongoTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;Jerry&quot;</span>).setAge(<span class="hljs-string">&quot;22&quot;</span>);<br>        mongoTemplate.insert(student);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> Query.query(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).is(<span class="hljs-string">&quot;Jerry&quot;</span>));<br>        mongoTemplate.updateFirst(query, Update.update(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>), Student.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> Query.query(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).is(<span class="hljs-string">&quot;Jerry&quot;</span>));<br>        List&lt;Student&gt; students = mongoTemplate.find(query, Student.class);<br>        System.out.println(students);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findPage</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> Query.query(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).is(<span class="hljs-string">&quot;Jerry&quot;</span>));<br>        query.with(PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// page从0开始</span><br>        query.with(Sort.by(Sort.Direction.ASC, <span class="hljs-string">&quot;age&quot;</span>));<br>        List&lt;Student&gt; students = mongoTemplate.find(query, Student.class);<br>        System.out.println(students);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/README/"/>
    <url>/pumpkin/2021/09/02/Java/Design/README/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式是一种能够更好的实现程序的拓展性的思想</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p><strong>单一职责原则</strong> - Single Responsibility Principle</p><p>一个类应该只有一个发生变化的原因</p><p><strong>开闭原则</strong> - Open Closed Principle</p><p>一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭</p><p><strong>里氏替换原则</strong> - Liskov Substitution Principle</p><p>所有引用基类的地方必须能透明地使用其子类的对象</p><p><strong>迪米特法则</strong> - Law of Demeter</p><p>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><p><strong>接口隔离原则</strong> - Interface Segregation Principle</p><p>客户端不应该依赖它不需要的接口。类间的依赖关系应该建立在最小的接口上。</p><p><strong>依赖倒置原则</strong> - Dependence Inversion Principle</p><p>上层模块不应该依赖底层模块，它们都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>创建型模式（5种）</p><ol><li>工厂方法模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li><li>单例模式</li></ol><p>结构型模式（7种）</p><ol><li>适配器模式</li><li>桥接模式</li><li>组合模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ol><p>行为型模式（10种）</p><ol><li>责任链模式</li><li>命令模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>模板方法模式</li><li>访问者模式</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>将一个类的接口转换成另一个种接口，让原本接口不兼容的类可以兼容。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：手机充电需要5V电压，所以需要将220V电压转换为5V电压</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdapterDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Voltage220</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output220</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-number">220</span>;<br>            System.out.println(<span class="hljs-string">&quot;电压 = &quot;</span> + src);<br>            <span class="hljs-keyword">return</span> src;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Voltage5</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-title function_">output5</span><span class="hljs-params">()</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoltageAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Voltage5</span> &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Voltage220 voltage220;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">VoltageAdapter</span><span class="hljs-params">()</span>&#123;<br>            voltage220 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Voltage220</span>();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output5</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> voltage220.output220();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">dst</span> <span class="hljs-operator">=</span> src / <span class="hljs-number">44</span>;<br>            <span class="hljs-keyword">return</span> dst;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charging</span><span class="hljs-params">(Voltage5 voltage5)</span>&#123;<br>            <span class="hljs-keyword">if</span> (voltage5.output5() == <span class="hljs-number">5</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;电压为5V，可以充电&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (voltage5.output5() &gt; <span class="hljs-number">5</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;电压大于5V，无法充电&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        phone.charging(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoltageAdapter</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>如果我们的集合元素是用不同的方式实现的，有数组，还有 java 的集合类，或者还有其他方式，当客户端要遍<br>历这些集合元素的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputerCollegeIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br>    <span class="hljs-comment">// 计算机学院是以数组的方式存放系的</span><br>    <span class="hljs-keyword">private</span> Department[] departments;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pos;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ComputerCollegeIterator</span><span class="hljs-params">(Department[] departments)</span>&#123;<br>        <span class="hljs-built_in">this</span>.departments = departments;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (pos &gt;= departments.length || departments[pos] == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departments[pos];<br>        pos += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> department;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoCollegeIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&#123;<br>    <span class="hljs-comment">// 信息工程学院是以List的方式存放系的</span><br>    <span class="hljs-keyword">private</span> List&lt;Department&gt; departmentList;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> index;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfoCollegeIterator</span><span class="hljs-params">(List&lt;Department&gt; departmentList)</span>&#123;<br>        <span class="hljs-built_in">this</span>.departmentList = departmentList;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &gt;= departmentList.size() - <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        index += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> departmentList.get(index);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">College</span>&#123;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(String name, String desc)</span>;<br><br>    Iterator <span class="hljs-title function_">newIterator</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputerCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">College</span>&#123;<br><br>    Department[] departments;<br>    <span class="hljs-type">int</span> count;  <span class="hljs-comment">// 保存当前数组的对象个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ComputerCollege</span><span class="hljs-params">()</span>&#123;<br>        departments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>[<span class="hljs-number">5</span>];<br>        addDepartment(<span class="hljs-string">&quot;Java专业&quot;</span>, <span class="hljs-string">&quot;Java专业&quot;</span>);<br>        addDepartment(<span class="hljs-string">&quot;Php专业&quot;</span>, <span class="hljs-string">&quot;Php专业&quot;</span>);<br>        addDepartment(<span class="hljs-string">&quot;大数据专业&quot;</span>, <span class="hljs-string">&quot;大数据专业&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;计算机学院&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(name, desc);<br>        departments[count] = department;<br>        count += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">newIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputerCollegeIterator</span>(departments);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">College</span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;Department&gt; departmentList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InfoCollege</span><span class="hljs-params">()</span>&#123;<br>        departmentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        addDepartment(<span class="hljs-string">&quot;信息安全&quot;</span>, <span class="hljs-string">&quot;信息安全&quot;</span>);<br>        addDepartment(<span class="hljs-string">&quot;网络安全&quot;</span>, <span class="hljs-string">&quot;网络安全&quot;</span>);<br>        addDepartment(<span class="hljs-string">&quot;服务器安全&quot;</span>, <span class="hljs-string">&quot;服务器安全&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;信息工程学院&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(name, desc);<br>        departmentList.add(department);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">newIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InfoCollegeIterator</span>(departmentList);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Output</span>&#123;<br>    List&lt;College&gt; collegeList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Output</span><span class="hljs-params">(List&lt;College&gt; collegeList)</span>&#123;<br>        <span class="hljs-built_in">this</span>.collegeList = collegeList;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollege</span><span class="hljs-params">()</span>&#123;<br>        Iterator&lt;College&gt; iterator = collegeList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            <span class="hljs-type">College</span> <span class="hljs-variable">college</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;--- &quot;</span> + college.getName() + <span class="hljs-string">&quot; ---&quot;</span>);<br>            printDepartment(college.newIterator());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printDepartment</span><span class="hljs-params">(Iterator iterator)</span>&#123;<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> (Department) iterator.next();<br>            System.out.println(department.getName());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;College&gt; collegeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-type">ComputerCollege</span> <span class="hljs-variable">computerCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputerCollege</span>();<br>        <span class="hljs-type">InfoCollege</span> <span class="hljs-variable">infoCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InfoCollege</span>();<br><br>        collegeList.add(computerCollege);<br>        collegeList.add(infoCollege);<br><br>        <span class="hljs-type">Output</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Output</span>(collegeList);<br>        output.printCollege();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>责任链模式通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>实现过滤器，将一串1-9的数字进行掩码过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Msg</span> &#123;<br>    <span class="hljs-keyword">private</span> String content;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Msg msg)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> FilterChain <span class="hljs-title function_">add</span><span class="hljs-params">(Filter filter)</span>&#123;<br>        filters.add(filter);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Msg msg)</span>&#123;<br>        <span class="hljs-keyword">for</span> (Filter filter : filters) &#123;<br>            <span class="hljs-keyword">if</span> (!filter.doFilter(msg))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OneFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Msg msg)</span> &#123;<br>        msg.setContent(msg.getContent().replace(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TwoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Msg msg)</span> &#123;<br>        msg.setContent(msg.getContent().replace(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Msg msg)</span> &#123;<br>        msg.setContent(msg.getContent().replace(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>));<br>        <span class="hljs-comment">// 当该过滤器返回false以后，后面的过滤器就都不执行了</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FourFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(Msg msg)</span> &#123;<br>        msg.setContent(msg.getContent().replace(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Msg</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Msg</span>();<br>        msg.setContent(<span class="hljs-string">&quot;123456789&quot;</span>);<br>        <span class="hljs-type">FilterChain</span> <span class="hljs-variable">fc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChain</span>();<br>        <span class="hljs-type">FilterChain</span> <span class="hljs-variable">fc2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterChain</span>();<br>        fc.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OneFilter</span>()).add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TwoFilter</span>());<br>        fc2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreeFilter</span>()).add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FourFilter</span>());<br>        fc.add(fc2);<br>        fc.doFilter(msg)<br>        System.out.println(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>封装了一些作用于某种数据结构的各元素的操作，可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>数据看板的建设：校长和家长需要观察学生的数据看板，校长关注班级，家长关注排名。视角不同，访问结果输出不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Student student)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生：被访问对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;     <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">public</span> String identity; <span class="hljs-comment">// 身份：重点班、普通班</span><br>    <span class="hljs-keyword">public</span> String clazz;    <span class="hljs-comment">// 班级</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String identity, String clazz)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.identity = identity;<br>        <span class="hljs-built_in">this</span>.clazz = clazz;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ranking</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 父母：访问者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Student student)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学生姓名:&quot;</span> + student.name + <span class="hljs-string">&quot;,排名:&quot;</span> + student.ranking());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 校长：访问者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Principal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Student student)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学生姓名:&quot;</span> + student.name + <span class="hljs-string">&quot;,班级:&quot;</span> + student.clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据看板</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataView</span> &#123;<br>    List&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DataView</span><span class="hljs-params">()</span> &#123;<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;谢⻜机&quot;</span>, <span class="hljs-string">&quot;重点班&quot;</span>, <span class="hljs-string">&quot;⼀年⼀班&quot;</span>));<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;windy&quot;</span>, <span class="hljs-string">&quot;重点班&quot;</span>, <span class="hljs-string">&quot;⼀年⼀班&quot;</span>));<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;⼤⽑&quot;</span>, <span class="hljs-string">&quot;普通班&quot;</span>, <span class="hljs-string">&quot;⼆年三班&quot;</span>));<br>        students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Shing&quot;</span>, <span class="hljs-string">&quot;普通班&quot;</span>, <span class="hljs-string">&quot;三年四班&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Student student : students) &#123;<br>            <span class="hljs-comment">// 根据不同的访问者来执行不同的逻辑</span><br>            student.accept(visitor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">DataView</span> <span class="hljs-variable">dataView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>();<br>        System.out.println(<span class="hljs-string">&quot;家⻓视⻆访问：&quot;</span>);<br>        dataView.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>());<br>        System.out.println(<span class="hljs-string">&quot;\n校⻓视⻆访问：&quot;</span>);<br>        dataView.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Principal</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>对象之间多对一依赖的一种设计方案，被依赖的对象为 Subject，依赖的对象为 Observer，Subject，通知 Observer 变化。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：孩子醒来哭，父亲，母亲，狗都会做出各自的反应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionOnWakeup</span><span class="hljs-params">(WakeupEvent event)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dad</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Dad feed...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionOnWakeup</span><span class="hljs-params">(WakeupEvent event)</span> &#123;<br>        feed();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mon</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hug</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Mon feed...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionOnWakeup</span><span class="hljs-params">(WakeupEvent event)</span> &#123;<br>        hug();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wang</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog wang...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionOnWakeup</span><span class="hljs-params">(WakeupEvent event)</span> &#123;<br>        wang();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">cry</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    &#123;<br>        observers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dad</span>());<br>        observers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Mon</span>());<br>        observers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wakeup</span><span class="hljs-params">()</span>&#123;<br>        cry = <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">WakeupEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WakeupEvent</span>(System.currentTimeMillis(), <span class="hljs-string">&quot;bed&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            o.actionOnWakeup(event);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getSource</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WakeupEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Event</span>&lt;Child&gt;&#123;<br>    <span class="hljs-type">long</span> timestamp;<br>    String location;<br>    Child source;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WakeupEvent</span><span class="hljs-params">(<span class="hljs-type">long</span> timestamp, String location)</span>&#123;<br>        <span class="hljs-built_in">this</span>.timestamp = timestamp;<br>        <span class="hljs-built_in">this</span>.location = location;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Child <span class="hljs-title function_">getSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>().wakeup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>动态的将新功能附加到对象上</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：星巴克点咖啡，点一杯咖啡和若干配料，并计算总价</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Goods</span> &#123;<br>    <span class="hljs-keyword">private</span> String description;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0f</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span>;   <span class="hljs-comment">// 价格</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDescription</span><span class="hljs-params">(String description)</span> &#123;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">float</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Goods</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getPrice();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ingredient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Goods</span> &#123;<br>    <span class="hljs-keyword">private</span> Goods goods;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Ingredient</span><span class="hljs-params">(Goods goods)</span> &#123;<br>        <span class="hljs-built_in">this</span>.goods = goods;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getPrice() + goods.cost();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDescription</span><span class="hljs-params">(String description)</span> &#123;<br>        <span class="hljs-built_in">super</span>.setDescription(goods.getDescription() + <span class="hljs-string">&quot;, &quot;</span> + description);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Decaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Coffee</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Decaf</span><span class="hljs-params">()</span>&#123;<br>        setDescription(<span class="hljs-string">&quot;脱因咖啡&quot;</span>);<br>        setPrice(<span class="hljs-number">10.0f</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Milk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Ingredient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Milk</span><span class="hljs-params">(Goods goods)</span> &#123;<br>        <span class="hljs-built_in">super</span>(goods);<br>        setDescription(<span class="hljs-string">&quot;牛奶&quot;</span>);<br>        setPrice(<span class="hljs-number">2.0f</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chocolate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Ingredient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chocolate</span><span class="hljs-params">(Goods goods)</span> &#123;<br>        <span class="hljs-built_in">super</span>(goods);<br>        setDescription(<span class="hljs-string">&quot;巧克力&quot;</span>);<br>        setPrice(<span class="hljs-number">3.0f</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 点一份Long Black</span><br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Decaf</span>();<br>        <span class="hljs-comment">// 加一份牛奶</span><br>        order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Milk</span>(order);<br>        <span class="hljs-comment">// 加两份巧克力</span><br>        order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chocolate</span>(order);<br>        order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chocolate</span>(order);<br>        System.out.println(<span class="hljs-string">&quot;订单: &quot;</span> + order.getDescription());<br>        System.out.println(<span class="hljs-string">&quot;总费用: &quot;</span> + order.cost());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>创建了对象组的树形结构，将对象组合成树状结构以表示”整体-部分”的层次关系。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：大学下面有多个学院，学院下有多个部门，大学可以操作学院，学院可以操作部门。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Organization</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Organization</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Organization organization)</span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Organization organization)</span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">University</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Organization</span>&#123;<br>    List&lt;Organization&gt; organizations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">University</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Organization organization)</span> &#123;<br>        organizations.add(organization);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Organization organization)</span> &#123;<br>        organizations.remove(organization);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;---------------&quot;</span> + getName() + <span class="hljs-string">&quot;--------------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Organization organization : organizations) &#123;<br>            organization.print();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">College</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Organization</span>&#123;<br>    List&lt;Organization&gt; organizations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">College</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Organization organization)</span> &#123;<br>        organizations.add(organization);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Organization organization)</span> &#123;<br>        organizations.remove(organization);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;-------&quot;</span> + getName() + <span class="hljs-string">&quot;------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Organization organization : organizations) &#123;<br>            organization.print();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Organization</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;--&quot;</span> + getName() + <span class="hljs-string">&quot;--&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 大学</span><br>        <span class="hljs-type">Organization</span> <span class="hljs-variable">university</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">University</span>(<span class="hljs-string">&quot;清华大学&quot;</span>);<br>        <span class="hljs-comment">// 学院</span><br>        <span class="hljs-type">Organization</span> <span class="hljs-variable">computerCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">College</span>(<span class="hljs-string">&quot;计算机学院&quot;</span>);<br>        <span class="hljs-type">Organization</span> <span class="hljs-variable">infoCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">College</span>(<span class="hljs-string">&quot;信息工程学院&quot;</span>);<br>        <span class="hljs-comment">// 将部门加入学院</span><br>        computerCollege.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;人事部&quot;</span>));<br>        computerCollege.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;后勤部&quot;</span>));<br>        infoCollege.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;学工办&quot;</span>));<br>        infoCollege.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;信息中心&quot;</span>));<br>        <span class="hljs-comment">// 将学院加入学校</span><br>        university.add(computerCollege);<br>        university.add(infoCollege);<br>        <span class="hljs-comment">// 输出</span><br>        university.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>定义了一组算法，将每个算法都封装起来，并且使它们之间可以互换。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：人们可以选择支付方式，现金支付和微信支付，我们可以传入不同的实现类来改变其支付行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 支付接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Payment</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/* 现金支付实现 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CashPayment</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Payment</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The pay method is cash&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 微信支付实现 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatPayment</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Payment</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;The pay method is wechat&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 调用者 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    Payment payment;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPayment</span><span class="hljs-params">(Payment payment)</span> &#123;<br>        <span class="hljs-built_in">this</span>.payment = payment;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">()</span>&#123;<br>        payment.pay();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setPayment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CashPayment</span>());<br>        person.pay();<br>        person.setPayment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeChatPayment</span>());<br>        person.pay();<br>        <span class="hljs-comment">// 也可以通过lambda表达式来自定义实现</span><br>        person.setPayment(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;The pay method is alipay&quot;</span>);<br>        &#125;);<br>        person.pay();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>[]: </p><h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：一次抽奖有以下几种状态：不能抽奖，能抽奖，抽中发放奖品，奖品发完。那么每次抽奖都会有几率改变状态，图示如下。<br><img src="https://img-blog.csdnimg.cn/20200213145634795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CannotRaffleState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br>    RaffleActivity activity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CannotRaffleState</span><span class="hljs-params">(RaffleActivity activity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activity = activity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;扣除50积分成功，您可以抽奖了&quot;</span>);<br>        activity.setState(activity.getCanRaffleState());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;扣了积分才能抽奖哦&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;当前状态不能发放奖品&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CanRaffleState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br>    RaffleActivity activity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CanRaffleState</span><span class="hljs-params">(RaffleActivity activity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activity = activity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;已经扣取过了积分&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;正在抽奖，请稍等&quot;</span>);<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>)&#123;<br>            activity.setState(activity.getDispenseState());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;很遗憾没有抽中奖品&quot;</span>);<br>            <span class="hljs-comment">// 改变状态为不能抽奖</span><br>            activity.setState(activity.getNoRaffleState());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;没中奖，不能发放奖品&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DispenseState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br>    RaffleActivity activity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DispenseState</span><span class="hljs-params">(RaffleActivity activity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activity = activity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不能扣除积分&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不能抽奖&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (activity.getCount() &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;恭喜中奖了&quot;</span>);<br>            activity.setState(activity.getNoRaffleState());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;很遗憾，奖品发送完了&quot;</span>);<br>            activity.setState(activity.getDispenseOutState());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DispenseOutState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br>    RaffleActivity activity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DispenseOutState</span><span class="hljs-params">(RaffleActivity activity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activity = activity;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;奖品发送完了，请下次参加&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;奖品发送完了，请下次参加&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispensePrize</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;奖品发送完了，请下次参加&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RaffleActivity</span> &#123;<br>    <span class="hljs-comment">// state 表示活动当前的状态，是变化的</span><br>    <span class="hljs-type">State</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 奖品的数量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 4个属性，表示4种状态</span><br>    <span class="hljs-type">State</span> <span class="hljs-variable">noRaffleState</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CannotRaffleState</span>(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-type">State</span> <span class="hljs-variable">canRaffleState</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CanRaffleState</span>(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-type">State</span> <span class="hljs-variable">dispenseState</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispenseState</span>(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-type">State</span> <span class="hljs-variable">dispenseOutState</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispenseOutState</span>(<span class="hljs-built_in">this</span>);<br><br>    <span class="hljs-comment">// 初始化当前的状态为不能抽奖状态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RaffleActivity</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = getNoRaffleState();<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductMoney</span><span class="hljs-params">()</span> &#123;<br>        state.deductMoney();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raffle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (state.raffle()) &#123;<br>            state.dispensePrize();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 每领取一次奖品，数量减一</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curCount</span> <span class="hljs-operator">=</span> count;<br>        count--;<br>        <span class="hljs-keyword">return</span> curCount;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RaffleActivity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RaffleActivity</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;--- 第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;次抽奖 ---&quot;</span>);<br>            activity.deductMoney();<br>            activity.raffle();<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：制作豆浆的流程 <strong>添加配料 -&gt; 打浆 -&gt; 打包</strong>，通过添加不同的配料，可以制作出不同口味的豆浆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoyBeanMilk</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMaterial</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">make</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (needMaterial())&#123;<br>            addMaterial();<br>        &#125;<br>        beat();<br>        box();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;打浆&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">box</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打包&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">// 钩子函数</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">needMaterial</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedBeanSoyBeanMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoyBeanMilk</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMaterial</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;加入上好的红豆作为配料&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PeanutSoyBeanMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoyBeanMilk</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMaterial</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;加入上好的花生作为配料&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PureSoyBeanMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoyBeanMilk</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMaterial</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">needMaterial</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;----- 制作红豆豆浆 -----&quot;</span>);<br>        <span class="hljs-type">SoyBeanMilk</span> <span class="hljs-variable">redBeanSoyBeanMilk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedBeanSoyBeanMilk</span>();<br>        redBeanSoyBeanMilk.make();<br><br>        System.out.println(<span class="hljs-string">&quot;----- 制作花生豆浆 -----&quot;</span>);<br>        <span class="hljs-type">SoyBeanMilk</span> <span class="hljs-variable">peanutSoyBeanMilk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PeanutSoyBeanMilk</span>();<br>        peanutSoyBeanMilk.make();<br><br>        System.out.println(<span class="hljs-string">&quot;----- 制作纯豆浆 -----&quot;</span>);<br>        <span class="hljs-type">SoyBeanMilk</span> <span class="hljs-variable">pureSoyBeanMilk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PureSoyBeanMilk</span>();<br>        pureSoyBeanMilk.make();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-源码应用场景"><a href="#3-源码应用场景" class="headerlink" title="3. 源码应用场景"></a>3. 源码应用场景</h2><p>ClassLoader#findClass</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：有品牌Vivo、小米，有类型折叠式、滑盖式，一个手机3个操作：打开、关闭、打电话。<br>每个品牌的每种类型操作是不同的，这个时候可以用到桥接模式来解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Brand</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vivo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Brand</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Vivo open&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Vivo close&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Vivo call&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">XiaoMi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Brand</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Xiaomi open&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Xiaomi close&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Xiaomi call&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">private</span> Brand brand;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Phone</span><span class="hljs-params">(Brand brand)</span>&#123;<br>        <span class="hljs-built_in">this</span>.brand = brand;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.brand.open();<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.brand.close();<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.brand.call();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FoldedPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FoldedPhone</span><span class="hljs-params">(Brand brand)</span> &#123;<br>        <span class="hljs-built_in">super</span>(brand);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.open();<br>        System.out.println(<span class="hljs-string">&quot;折叠样式手机&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.close();<br>        System.out.println(<span class="hljs-string">&quot;折叠样式手机&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.call();<br>        System.out.println(<span class="hljs-string">&quot;折叠样式手机&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SlidePhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SlidePhone</span><span class="hljs-params">(Brand brand)</span> &#123;<br>        <span class="hljs-built_in">super</span>(brand);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.open();<br>        System.out.println(<span class="hljs-string">&quot;滑盖式手机&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.close();<br>        System.out.println(<span class="hljs-string">&quot;滑盖式手机&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.call();<br>        System.out.println(<span class="hljs-string">&quot;滑盖式手机&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoldedPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vivo</span>()).open();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SlidePhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vivo</span>()).close();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoldedPhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMi</span>()).call();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SlidePhone</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMi</span>()).open();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>“工厂方法模式”只生产一种产品，”抽象工厂模式”可以生产多种产品</p><h2 id="2-图示"><a href="#2-图示" class="headerlink" title="2. 图示"></a>2. 图示</h2><p><img src="https://img-blog.csdnimg.cn/20201221182905631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><p>场景：定制鼠标和键盘，有戴尔和惠普两个工厂，需要不同的鼠标只需要实例化不同的工厂即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 鼠标 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouse</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/* 惠普鼠标 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HpMouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mouse</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is Hp mouse&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 戴尔鼠标 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DellMouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mouse</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is Dell mouse&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 键盘 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Keyboard</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/* 惠普键盘 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HpKeyboard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Keyboard</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is Hp keyboard&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 戴尔键盘 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DellKeyboard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Keyboard</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is Dell keyboard&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 抽象PC工厂 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PcFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Mouse <span class="hljs-title function_">createMouse</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Keyboard <span class="hljs-title function_">createKeyboard</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/* 惠普PC工厂 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HpFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PcFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mouse <span class="hljs-title function_">createMouse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HpMouse</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Keyboard <span class="hljs-title function_">createKeyboard</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HpKeyboard</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 戴尔PC工厂 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DellFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PcFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mouse <span class="hljs-title function_">createMouse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DellMouse</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Keyboard <span class="hljs-title function_">createKeyboard</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DellKeyboard</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 测试类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PcFactory</span> <span class="hljs-variable">pcFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HpFactory</span>();<br>        pcFactory.createKeyboard().print();<br>        pcFactory.createMouse().print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Builder b)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = b.name;<br>        <span class="hljs-built_in">this</span>.age = b.age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Builder <span class="hljs-title function_">builder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Builder</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> Integer age;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">name</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">age</span><span class="hljs-params">(Integer age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> User <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-built_in">this</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.builder().name(<span class="hljs-string">&quot;Jerry&quot;</span>).age(<span class="hljs-number">18</span>).build();<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>“简单工厂模式”是由一个工厂对象决定创建出哪一种产品类的实例，但是违反了开闭原则。</p><p>“工厂方法模式”是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。</p><p>定义⼀个创建对象的接口，让其子类自己决定实例化哪⼀个工厂类，工厂模式使其创建过程延迟到子类进行。</p><h2 id="2-图示"><a href="#2-图示" class="headerlink" title="2. 图示"></a>2. 图示</h2><p><img src="https://img-blog.csdnimg.cn/20201221172306524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><p>场景：定制鼠标，有戴尔和惠普两个工厂，需要不同的鼠标只需要实例化不同的工厂即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 抽象鼠标类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouse</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/* 惠普鼠标 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HpMouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mouse</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is Hp mouse&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*戴尔鼠标 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DellMouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mouse</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is Dell mouse&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 抽象鼠标工厂 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MouseFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Mouse <span class="hljs-title function_">createMouse</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/* 戴尔鼠标工厂 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DellMouseFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MouseFactory</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mouse <span class="hljs-title function_">createMouse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DellMouse</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 惠普鼠标工厂 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HpMouseFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MouseFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mouse <span class="hljs-title function_">createMouse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HpMouse</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 测试类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 当我们需要不同的鼠标时，只需要new不同的工厂即可</span><br>        <span class="hljs-type">MouseFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DellMouseFactory</span>();<br>        factory.createMouse().print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>为子系统中一组接口提供一个一致的接口，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：电脑开启需要一次开启Cpu、内存、磁盘。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cpu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cpu start&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cpu shutdown&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Memory start&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Memory shutdown&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Disk</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Disk start&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Disk shutdown&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span>&#123;<br>    <span class="hljs-keyword">private</span> Cpu cpu;<br>    <span class="hljs-keyword">private</span> Memory memory;<br>    <span class="hljs-keyword">private</span> Disk disk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Computer</span><span class="hljs-params">()</span>&#123;<br>        cpu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cpu</span>();<br>        memory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memory</span>();<br>        disk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Disk</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        cpu.start();<br>        memory.start();<br>        disk.start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span>&#123;<br>        cpu.shutdown();<br>        memory.shutdown();<br>        disk.shutdown();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>        computer.start();<br>        computer.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：游戏角色有血量和魔法，在大战 Boss 前保存自身的状态(血量和魔法)，当大战 Boss 后血量和魔法下降，从备忘录对象恢复到大战前的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 守护者对象，保存游戏角色的状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span> &#123;<br><span class="hljs-keyword">private</span> Memento memento;<br><br><span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">getMemento</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> memento;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br><span class="hljs-built_in">this</span>.memento = memento;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hp;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Memento</span><span class="hljs-params">(<span class="hljs-type">int</span> hp, <span class="hljs-type">int</span> mp)</span> &#123;<br><span class="hljs-built_in">this</span>.hp = hp;<br><span class="hljs-built_in">this</span>.mp = mp;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hp;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> mp;<br><br><span class="hljs-keyword">public</span> Memento <span class="hljs-title function_">createMemento</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memento</span>(hp, mp);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recoverGameRoleFromMemento</span><span class="hljs-params">(Memento memento)</span> &#123;<br><span class="hljs-built_in">this</span>.hp = memento.getHp();<br><span class="hljs-built_in">this</span>.mp = memento.getMp();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;当前血量:&quot;</span> + <span class="hljs-built_in">this</span>.hp + <span class="hljs-string">&quot;,当前魔法:&quot;</span> + <span class="hljs-built_in">this</span>.mp);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">GameRole</span> <span class="hljs-variable">gameRole</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GameRole</span>();<br>gameRole.setHp(<span class="hljs-number">100</span>);<br>gameRole.setMp(<span class="hljs-number">100</span>);<br><br>System.out.println(<span class="hljs-string">&quot;--- 战斗Boss前状态 ---&quot;</span>);<br>gameRole.display();<br><br><span class="hljs-type">Caretaker</span> <span class="hljs-variable">caretaker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Caretaker</span>();<br>caretaker.setMemento(gameRole.createMemento());<br><br>System.out.println(<span class="hljs-string">&quot;--- 战斗Boss后状态 ---&quot;</span>);<br>gameRole.setHp(<span class="hljs-number">30</span>);<br>gameRole.setMp(<span class="hljs-number">30</span>);<br>gameRole.display();<br><br>System.out.println(<span class="hljs-string">&quot;--- 战斗结束 状态恢复 ---&quot;</span>);<br>gameRole.recoverGameRoleFromMemento(caretaker.getMemento());<br>gameRole.display();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>我们需要向某些对象发送请求，但不知道请求的接受者是谁，也不知道请求的操作是哪个。<br>只需在程序运行时指定具体请求接受者即可。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：使用遥控器控制电灯，遥控器有开、关、撤销 三个功能，而遥控器无需实现电灯的内部逻辑，通过组合的方式使电灯接收者实现，而电灯的接收者是通过客户端自己指定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LightOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span>&#123;<br>    <span class="hljs-keyword">private</span> LightReceiver light;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LightOnCommand</span><span class="hljs-params">(LightReceiver light)</span>&#123;<br>        <span class="hljs-built_in">this</span>.light = light;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        light.on();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br>        light.off();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LightOffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span>&#123;<br>    <span class="hljs-keyword">private</span> LightReceiver light;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LightOffCommand</span><span class="hljs-params">(LightReceiver light)</span>&#123;<br>        <span class="hljs-built_in">this</span>.light = light;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        light.off();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br>        light.on();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NoCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LightReceiver</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;电灯打开了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;电灯关闭了&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteController</span>&#123;<br>    Command[] onCommands;<br>    Command[] offCommands;<br>    Command undoCommand;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RemoteController</span><span class="hljs-params">()</span>&#123;<br>        onCommands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>[<span class="hljs-number">5</span>];<br>        offCommands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>            onCommands[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoCommand</span>();<br>            offCommands[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoCommand</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCommand</span><span class="hljs-params">(<span class="hljs-type">int</span> idx, Command onCommand, Command offCommand)</span>&#123;<br>        onCommands[idx] = onCommand;<br>        offCommands[idx] = offCommand;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onButtonIsPushed</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span>&#123;<br>        onCommands[idx].execute();<br>        undoCommand = onCommands[idx];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offButtonIsPushed</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span>&#123;<br>        offCommands[idx].execute();<br>        undoCommand = offCommands[idx];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">undoButtonIsPushed</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span>&#123;<br>        undoCommand.undo();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LightReceiver</span> <span class="hljs-variable">lightReceiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightReceiver</span>();<br>        <span class="hljs-type">LightOnCommand</span> <span class="hljs-variable">lightOnCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightOnCommand</span>(lightReceiver);<br>        <span class="hljs-type">LightOffCommand</span> <span class="hljs-variable">lightOffCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightOffCommand</span>(lightReceiver);<br>        <span class="hljs-type">RemoteController</span> <span class="hljs-variable">remoteController</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteController</span>();<br>        remoteController.setCommand(<span class="hljs-number">0</span>, lightOnCommand, lightOffCommand);<br><br>        System.out.println(<span class="hljs-string">&quot;---- 按下开灯按钮 ----&quot;</span>);<br>        remoteController.onButtonIsPushed(<span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;---- 按下关灯按钮 ----&quot;</span>);<br>        remoteController.offButtonIsPushed(<span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;---- 按下撤销按钮 ----&quot;</span>);<br>        remoteController.undoButtonIsPushed(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能</p><p>Object类提供clone()方法，可以将对象复制一份，需要实现Cloneable接口，克隆分为深克隆和浅克隆</p><ul><li><p>浅克隆：克隆的是源对象的对象的地址，当源对象的对象中的值发生改变，相应克隆的类也将发生改变</p></li><li><p>深克隆：在重写clone()方法的时候对类内部的对象进行克隆</p></li></ul><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><h3 id="2-1-浅克隆"><a href="#2-1-浅克隆" class="headerlink" title="2.1 浅克隆"></a>2.1 浅克隆</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShallowClone</span> &#123;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Location</span> &#123;<br>        <span class="hljs-keyword">private</span> Integer x;<br>        <span class="hljs-keyword">private</span> Integer y;<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> Integer age;<br>        <span class="hljs-keyword">private</span> String color;<br>        <span class="hljs-keyword">private</span> Location loc;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> Sheep <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>            <span class="hljs-keyword">return</span> (Sheep) <span class="hljs-built_in">super</span>.clone();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">Sheep</span> <span class="hljs-variable">sheep1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;白色&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Location</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br>        <span class="hljs-type">Sheep</span> <span class="hljs-variable">sheep2</span> <span class="hljs-operator">=</span> sheep1.clone();<br>        System.out.println(sheep1.getLoc() == sheep2.getLoc());<br>        sheep1.getLoc().setX(<span class="hljs-number">0</span>);<br>        System.out.println(sheep1);<br>        System.out.println(sheep2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-深克隆"><a href="#2-2-深克隆" class="headerlink" title="2.2 深克隆"></a>2.2 深克隆</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepClone</span> &#123;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Location</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>        <span class="hljs-keyword">private</span> Integer x;<br>        <span class="hljs-keyword">private</span> Integer y;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> Location <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>            <span class="hljs-keyword">return</span> (Location) <span class="hljs-built_in">super</span>.clone();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> Integer age;<br>        <span class="hljs-keyword">private</span> String color;<br>        <span class="hljs-keyword">private</span> Location loc;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> Sheep <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>            <span class="hljs-type">Sheep</span> <span class="hljs-variable">sheep</span> <span class="hljs-operator">=</span> (Sheep) <span class="hljs-built_in">super</span>.clone();<br>            <span class="hljs-built_in">this</span>.setLoc(loc.clone());<br>            <span class="hljs-keyword">return</span> sheep;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">Sheep</span> <span class="hljs-variable">sheep1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;白色&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Location</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br>        <span class="hljs-type">Sheep</span> <span class="hljs-variable">sheep2</span> <span class="hljs-operator">=</span> sheep1.clone();<br>        System.out.println(sheep1.getLoc() == sheep2.getLoc());<br>        sheep1.getLoc().setX(<span class="hljs-number">0</span>);<br>        System.out.println(sheep1);<br>        System.out.println(sheep2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton1</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton1</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton1</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    INSTANCE<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2. 懒汉式"></a>2. 懒汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class Singleton&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span>(Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="1-代理类的作用"><a href="#1-代理类的作用" class="headerlink" title="1. 代理类的作用"></a>1. 代理类的作用</h2><p>为对象提供一个替身，以控制对这个对象的访问，即通过代理对象访问目标对象。<br>被代理的对象可以是远程对象，创建开销大的对象，需要安全控制的对象。<br>三种代理模式：静态代理、动态代理、Cglib代理。<br>Spring中的Aop底层就是动态代理。</p><h2 id="2-静态代理和动态代理"><a href="#2-静态代理和动态代理" class="headerlink" title="2. 静态代理和动态代理"></a>2. 静态代理和动态代理</h2><ul><li>静态代理：由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。</li><li>动态代理：在程序运行时，运用反射机制动态创建而成。<h2 id="3-静态代理实现"><a href="#3-静态代理实现" class="headerlink" title="3. 静态代理实现"></a>3. 静态代理实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ClothFactory</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">produceCloth</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 代理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyClothFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClothFactory</span>&#123;<br>    <span class="hljs-keyword">private</span> ClothFactory factory;   <span class="hljs-comment">// 用被代理对象进行实例化</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyClothFactory</span><span class="hljs-params">(ClothFactory factory)</span>&#123;<br>        <span class="hljs-built_in">this</span>.factory = factory;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produceCloth</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;代理工厂做一些准备工作&quot;</span>);<br>        factory.produceCloth();<br>        System.out.println(<span class="hljs-string">&quot;代理工厂做一些收尾工作&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 被代理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NikeClothFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClothFactory</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produceCloth</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;耐克工厂生产一批运动服&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStaticProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建被代理类的对象</span><br>        <span class="hljs-type">NikeClothFactory</span> <span class="hljs-variable">nike</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NikeClothFactory</span>();<br>        <span class="hljs-comment">// 创建代理类的对象</span><br>        <span class="hljs-type">ProxyClothFactory</span> <span class="hljs-variable">proxyClothFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyClothFactory</span>(nike);<br>        proxyClothFactory.produceCloth();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>输出结果：可以通过调用代理类的生产方法，在主业务逻辑的前后加入了代理逻辑。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">代理工厂做一些准备工作<br>耐克工厂生产一批运动服<br>代理工厂做一些收尾工作<br></code></pre></td></tr></table></figure><h2 id="4-动态代理实现"><a href="#4-动态代理实现" class="headerlink" title="4. 动态代理实现"></a>4. 动态代理实现</h2>使用了Lambda表达式可以极大地简化代码逻辑<br>核心方法：<code>Proxy.newProxyInstance(loader, interfaces, handler)</code><br>loader：被代理类的类加载器。<br>interfaces：被代理类实现的接口。<br>handler：方法调用处理器，通过<code>InvocationHandler </code>获取。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Human</span>&#123;<br>    String <span class="hljs-title function_">getBelief</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(String food)</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperMan</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Human</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBelief</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I believe I can fly&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(String food)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我喜欢吃&quot;</span> + food);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SuperMan</span> <span class="hljs-variable">superMan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperMan</span>();<br>        <span class="hljs-comment">// 定义handler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (proxy, method, args1) -&gt; method.invoke(superMan, args1);<br>        <span class="hljs-comment">// 获取代理类对象</span><br>        <span class="hljs-type">Human</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> (Human) Proxy.newProxyInstance(superMan.getClass().getClassLoader(), superMan.getClass().getInterfaces(), handler);<br>        <span class="hljs-comment">// 下列方法是代理对象执行的</span><br>        System.out.println(proxyInstance.getBelief());<br>        proxyInstance.eat(<span class="hljs-string">&quot;苹果&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>输出结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">I believe I can fly<br>我喜欢吃苹果<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>运用共享技术有效地支持大量细粒度的对象</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：不通过new的方式在地图上创建多个树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String data;<br>&#125;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<br>    <span class="hljs-keyword">private</span> Tree tree;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeNode</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Tree tree)</span> &#123;<br>        System.out.println(tree.getName() + <span class="hljs-string">&quot;\t被创建，描述:&quot;</span> + tree.getData());<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>        <span class="hljs-built_in">this</span>.tree = tree;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Tree&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Tree <span class="hljs-title function_">getTree</span><span class="hljs-params">(String name, String data)</span> &#123;<br>        <span class="hljs-keyword">if</span> (map.containsKey(name)) &#123;<br>            <span class="hljs-keyword">return</span> map.get(name);<br>        &#125;<br>        <span class="hljs-type">Tree</span> <span class="hljs-variable">tree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tree</span>(name, data);<br>        map.put(name, tree);<br>        <span class="hljs-keyword">return</span> tree;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>, TreeFactory.getTree(<span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-string">&quot;description of xxx&quot;</span>));<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>, TreeFactory.getTree(<span class="hljs-string">&quot;yyy&quot;</span>, <span class="hljs-string">&quot;description of yyy&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/DesignPattern/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/pumpkin/2021/09/02/Java/Design/DesignPattern/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>用一个 中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：当闹铃响起时，电视开始播放；当电视关闭时，闹铃关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Colleague&gt; colleagueMap;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; interMap;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mediator</span><span class="hljs-params">()</span> &#123;<br>        colleagueMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        interMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String name, Colleague colleague)</span> &#123;<br>        colleagueMap.put(name, colleague);<br>        <span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> Alarm) &#123;<br>            interMap.put(<span class="hljs-string">&quot;Alarm&quot;</span>, name);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleague <span class="hljs-keyword">instanceof</span> Tv) &#123;<br>            interMap.put(<span class="hljs-string">&quot;Tv&quot;</span>, name);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange, String name)</span> &#123;<br>        <span class="hljs-keyword">if</span> (colleagueMap.get(name) <span class="hljs-keyword">instanceof</span> Alarm) &#123;<br>            action(stateChange);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colleagueMap.get(name) <span class="hljs-keyword">instanceof</span> Tv) &#123;<br>            action(stateChange);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">action</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span> &#123;<br>        <span class="hljs-keyword">if</span> (stateChange == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">Alarm</span> <span class="hljs-variable">alarm</span> <span class="hljs-operator">=</span> (Alarm) colleagueMap.get(interMap.get(<span class="hljs-string">&quot;Alarm&quot;</span>));<br>            <span class="hljs-type">Tv</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> (Tv) colleagueMap.get(interMap.get(<span class="hljs-string">&quot;Tv&quot;</span>));<br>            alarm.start();<br>            tv.start();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stateChange == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">Alarm</span> <span class="hljs-variable">alarm</span> <span class="hljs-operator">=</span> (Alarm) colleagueMap.get(interMap.get(<span class="hljs-string">&quot;Alarm&quot;</span>));<br>            <span class="hljs-type">Tv</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> (Tv) colleagueMap.get(interMap.get(<span class="hljs-string">&quot;Tv&quot;</span>));<br>            alarm.stop();<br>            tv.stop();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">private</span> Mediator mediator;<br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Colleague</span><span class="hljs-params">(Mediator mediator, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mediator = mediator;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Mediator <span class="hljs-title function_">getMediator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.mediator;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alarm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Alarm</span><span class="hljs-params">(Mediator mediator, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(mediator, name);<br>        mediator.register(name, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span> &#123;<br>        <span class="hljs-built_in">this</span>.getMediator().getMessage(stateChange, name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;闹钟响了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;闹钟停了&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tv</span><span class="hljs-params">(Mediator mediator, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(mediator, name);<br>        mediator.register(name, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> stateChange)</span> &#123;<br>        <span class="hljs-built_in">this</span>.getMediator().getMessage(stateChange, name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;电视开了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;电视关了&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Mediator</span> <span class="hljs-variable">mediator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mediator</span>();<br>        <span class="hljs-type">Alarm</span> <span class="hljs-variable">alarm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Alarm</span>(mediator, <span class="hljs-string">&quot;Alarm&quot;</span>);<br>        <span class="hljs-type">Tv</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tv</span>(mediator, <span class="hljs-string">&quot;Tv&quot;</span>);<br>        alarm.sendMessage(<span class="hljs-number">0</span>);<br>        tv.sendMessage(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/Algorithm/README/"/>
    <url>/pumpkin/2021/09/02/Java/Design/Algorithm/README/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="线性-x2F-非线性结构"><a href="#线性-x2F-非线性结构" class="headerlink" title="线性&#x2F;非线性结构"></a>线性&#x2F;非线性结构</h2><p><strong>线性结构</strong>：元素之间存在一对一的线性关系，常见的有：数组、队列、链表、栈</p><p>线性结构有两种不同的存储结构：</p><ul><li>顺序表：存储的元素是连续的<ul><li>优点：支持随机存取，存储密度高</li><li>缺点：大片连续空间分配不方便，改变容量不方便</li></ul></li><li>链表：存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息<ul><li>优点：离散的小空间分配方便，改变容量方便</li><li>缺点：不可随机存取，存储密度低</li></ul></li></ul><p><strong>非线性结构</strong>：二维数组，多维数组，广义表，树结构，图结构</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/Algorithm/8.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/pumpkin/2021/09/02/Java/Design/Algorithm/8.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="排序算法分类"><a href="#排序算法分类" class="headerlink" title="排序算法分类"></a>排序算法分类</h2><ul><li><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li><li><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210207105306939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMzMwNDMxNjgtMTg2NzgxNzg2OS5wbmc?x-oss-process=image/format,png" alt="img"></p><p><strong>术语说明</strong></p><ul><li>稳定：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面；</li><li>不稳定：如果a原本在b的前面，而a&#x3D;b，排序之后a可能会出现在b的后面；</li><li>内排序：所有排序操作都在内存中完成；</li><li>外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li>时间复杂度： 一个算法执行所耗费的时间。</li><li>空间复杂度：运行完一个程序所需内存的大小。</li></ul><p><strong>图片名词解释</strong></p><ul><li>n: 数据规模</li><li>k: “桶”的个数</li><li>In-place: 占用常数内存，不占用额外内存</li><li>Out-place: 占用额外内存</li></ul><h2 id="十种排序算法"><a href="#十种排序算法" class="headerlink" title="十种排序算法"></a>十种排序算法</h2><h3 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 </p><h4 id="1-1-算法描述"><a href="#1-1-算法描述" class="headerlink" title="1.1 算法描述"></a>1.1 算法描述</h4><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ul><h4 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105442865.gif" alt="在这里插入图片描述"></p><h4 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] bubbleSort(<span class="hljs-type">int</span>[] array) &#123;<br>    <span class="hljs-keyword">if</span> (array.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> array;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length - <span class="hljs-number">1</span> - i; j++)<br>            <span class="hljs-keyword">if</span> (array[j + <span class="hljs-number">1</span>] &lt; array[j]) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[j + <span class="hljs-number">1</span>];<br>                array[j + <span class="hljs-number">1</span>] = array[j];<br>                array[j] = temp;<br>            &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h3><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 </p><h4 id="2-1-算法描述"><a href="#2-1-算法描述" class="headerlink" title="2.1 算法描述"></a>2.1 算法描述</h4><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ul><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i&#x3D;1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ul><h4 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105727587.gif" alt="在这里插入图片描述"></p><h4 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] selectionSort(<span class="hljs-type">int</span>[] array) &#123;<br>    <span class="hljs-keyword">if</span> (array.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> array;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &lt; array.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (array[j] &lt; array[minIndex]) <span class="hljs-comment">//找到最小的数</span><br>                minIndex = j; <span class="hljs-comment">//将最小数的索引保存</span><br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[minIndex];<br>        array[minIndex] = array[i];<br>        array[i] = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-算法分析"><a href="#2-4-算法分析" class="headerlink" title="2.4 算法分析"></a>2.4 算法分析</h4><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><h3 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h4 id="3-1-算法描述"><a href="#3-1-算法描述" class="headerlink" title="3.1 算法描述"></a>3.1 算法描述</h4><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul><h4 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105758399.gif" alt="在这里插入图片描述"></p><h4 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] insertionSort(<span class="hljs-type">int</span>[] array) &#123;<br>    <span class="hljs-keyword">if</span> (array.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> array;<br>    <span class="hljs-type">int</span> current;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>        current = array[i + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">preIndex</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">while</span> (preIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; current &lt; array[preIndex]) &#123;<br>            array[preIndex + <span class="hljs-number">1</span>] = array[preIndex];<br>            preIndex--;<br>        &#125;<br>        array[preIndex + <span class="hljs-number">1</span>] = current;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-算法分析"><a href="#3-4-算法分析" class="headerlink" title="3.4 算法分析"></a>3.4 算法分析</h4><p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h3 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p><h4 id="4-1-算法描述"><a href="#4-1-算法描述" class="headerlink" title="4.1 算法描述"></a>4.1 算法描述</h4><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk&#x3D;1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h4 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105815955.gif" alt="在这里插入图片描述"></p><h4 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] shellSort(<span class="hljs-type">int</span>[] array) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> array.length;<br>    <span class="hljs-type">int</span> temp, gap = len / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span> (gap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; len; i++) &#123;<br>            temp = array[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">preIndex</span> <span class="hljs-operator">=</span> i - gap;<br>            <span class="hljs-keyword">while</span> (preIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; array[preIndex] &gt; temp) &#123;<br>                array[preIndex + gap] = array[preIndex];<br>                preIndex -= gap;<br>            &#125;<br>            array[preIndex + gap] = temp;<br>        &#125;<br>        gap /= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-算法分析"><a href="#4-4-算法分析" class="headerlink" title="4.4 算法分析"></a>4.4 算法分析</h4><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。　</p><h3 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h3><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2路归并。 </p><h4 id="5-1-算法描述"><a href="#5-1-算法描述" class="headerlink" title="5.1 算法描述"></a>5.1 算法描述</h4><ul><li>把长度为n的输入序列分成两个长度为n&#x2F;2的子序列</li><li>对这两个子序列分别采用归并排序</li><li>将两个排序好的子序列合并成一个最终的排序序列</li></ul><h4 id="5-2-动图演示"><a href="#5-2-动图演示" class="headerlink" title="5.2 动图演示"></a>5.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105842366.gif" alt="在这里插入图片描述"></p><h4 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] MergeSort(<span class="hljs-type">int</span>[] array) &#123;<br>    <span class="hljs-keyword">if</span> (array.length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> array;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> array.length / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span>[] left = Arrays.copyOfRange(array, <span class="hljs-number">0</span>, mid);<br>    <span class="hljs-type">int</span>[] right = Arrays.copyOfRange(array, mid, array.length);<br>    <span class="hljs-keyword">return</span> merge(MergeSort(left), MergeSort(right));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] merge(<span class="hljs-type">int</span>[] left, <span class="hljs-type">int</span>[] right) &#123;<br>    <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[left.length + right.length];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; index &lt; result.length; index++) &#123;<br>        <span class="hljs-keyword">if</span> (i &gt;= left.length)<br>            result[index] = right[j++];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j &gt;= right.length)<br>            result[index] = left[i++];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (left[i] &gt; right[j])<br>            result[index] = right[j++];<br>        <span class="hljs-keyword">else</span><br>            result[index] = left[i++];<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-4-算法分析"><a href="#5-4-算法分析" class="headerlink" title="5.4 算法分析"></a>5.4 算法分析</h4><p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p><h3 id="6-快速排序（Quick-Sort）"><a href="#6-快速排序（Quick-Sort）" class="headerlink" title="6. 快速排序（Quick Sort）"></a>6. 快速排序（Quick Sort）</h3><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h4 id="6-1-算法描述"><a href="#6-1-算法描述" class="headerlink" title="6.1 算法描述"></a>6.1 算法描述</h4><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序</li></ul><h4 id="6-2-动图演示"><a href="#6-2-动图演示" class="headerlink" title="6.2 动图演示"></a>6.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105900736.gif" alt="在这里插入图片描述"></p><h4 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3 代码实现"></a>6.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] QuickSort(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end) &#123;<br>    <span class="hljs-keyword">if</span> (array.length &lt; <span class="hljs-number">1</span> || start &lt; <span class="hljs-number">0</span> || end &gt;= array.length || start &gt; end) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">smallIndex</span> <span class="hljs-operator">=</span> partition(array, start, end);<br>    <span class="hljs-keyword">if</span> (smallIndex &gt; start)<br>        QuickSort(array, start, smallIndex - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (smallIndex &lt; end)<br>        QuickSort(array, smallIndex + <span class="hljs-number">1</span>, end);<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (start + Math.random() * (end - start + <span class="hljs-number">1</span>));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">smallIndex</span> <span class="hljs-operator">=</span> start - <span class="hljs-number">1</span>;<br>    swap(array, pivot, end);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end; i++)<br>        <span class="hljs-keyword">if</span> (array[i] &lt;= array[end]) &#123;<br>            smallIndex++;<br>            <span class="hljs-keyword">if</span> (i &gt; smallIndex)<br>                swap(array, i, smallIndex);<br>        &#125;<br>    <span class="hljs-keyword">return</span> smallIndex;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[i];<br>    array[i] = array[j];<br>    array[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h3><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><h4 id="7-1-算法描述"><a href="#7-1-算法描述" class="headerlink" title="7.1 算法描述"></a>7.1 算法描述</h4><ul><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;&#x3D;R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul><h4 id="7-2-动图演示"><a href="#7-2-动图演示" class="headerlink" title="7.2 动图演示"></a>7.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105917305.gif" alt="在这里插入图片描述"></p><h4 id="7-3-代码实现"><a href="#7-3-代码实现" class="headerlink" title="7.3 代码实现"></a>7.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 声明全局变量，用于记录数组array的长度 */</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> len;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] HeapSort(<span class="hljs-type">int</span>[] array) &#123;<br>    len = array.length;<br>    <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> array;<br>    <span class="hljs-comment">// 构建一个最大堆</span><br>    buildMaxHeap(array);<br>    <span class="hljs-comment">// 循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span><br>    <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>) &#123;<br>        swap(array, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br>        len--;<br>        adjustHeap(array, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-comment">/* 建立最大堆 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildMaxHeap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span> &#123;<br>    <span class="hljs-comment">//从最后一个非叶子节点开始向上构造最大堆</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (len / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        adjustHeap(array, i);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 调整使之成为最大堆 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjustHeap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxIndex</span> <span class="hljs-operator">=</span> i;<br>    <span class="hljs-comment">// 如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span><br>    <span class="hljs-keyword">if</span> (i * <span class="hljs-number">2</span> &lt; len &amp;&amp; array[i * <span class="hljs-number">2</span>] &gt; array[maxIndex])<br>        maxIndex = i * <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span><br>    <span class="hljs-keyword">if</span> (i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt; len &amp;&amp; array[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &gt; array[maxIndex])<br>        maxIndex = i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span><br>    <span class="hljs-keyword">if</span> (maxIndex != i) &#123;<br>        swap(array, maxIndex, i);<br>        adjustHeap(array, maxIndex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-计数排序（Counting-Sort）"><a href="#8-计数排序（Counting-Sort）" class="headerlink" title="8. 计数排序（Counting Sort）"></a>8. 计数排序（Counting Sort）</h3><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><h4 id="8-1-算法描述"><a href="#8-1-算法描述" class="headerlink" title="8.1 算法描述"></a>8.1 算法描述</h4><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li></ul><h4 id="8-2-动图演示"><a href="#8-2-动图演示" class="headerlink" title="8.2 动图演示"></a>8.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105945567.gif" alt="在这里插入图片描述"></p><h4 id="8-3-代码实现"><a href="#8-3-代码实现" class="headerlink" title="8.3 代码实现"></a>8.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] countingSort(<span class="hljs-type">int</span>[] array) &#123;<br>    <span class="hljs-keyword">if</span> (array.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> array;<br>    <span class="hljs-type">int</span> bias, min = array[<span class="hljs-number">0</span>], max = array[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (array[i] &gt; max)<br>            max = array[i];<br>        <span class="hljs-keyword">if</span> (array[i] &lt; min)<br>            min = array[i];<br>    &#125;<br>    bias = <span class="hljs-number">0</span> - min;<br>    <span class="hljs-type">int</span>[] bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max - min + <span class="hljs-number">1</span>];<br>    Arrays.fill(bucket, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>        bucket[array[i] + bias]++;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (index &lt; array.length) &#123;<br>        <span class="hljs-keyword">if</span> (bucket[i] != <span class="hljs-number">0</span>) &#123;<br>            array[index] = i - bias;<br>            bucket[i]--;<br>            index++;<br>        &#125; <span class="hljs-keyword">else</span><br>            i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-4-算法分析"><a href="#8-4-算法分析" class="headerlink" title="8.4 算法分析"></a>8.4 算法分析</h4><p>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p><h3 id="9-桶排序（Bucket-Sort）"><a href="#9-桶排序（Bucket-Sort）" class="headerlink" title="9. 桶排序（Bucket Sort）"></a>9. 桶排序（Bucket Sort）</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p><h4 id="9-1-算法描述"><a href="#9-1-算法描述" class="headerlink" title="9.1 算法描述"></a>9.1 算法描述</h4><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。</li></ul><h4 id="9-2-图片演示"><a href="#9-2-图片演示" class="headerlink" title="9.2 图片演示"></a>9.2 图片演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207110011683.gif" alt="在这里插入图片描述"></p><h4 id="9-3-代码实现"><a href="#9-3-代码实现" class="headerlink" title="9.3 代码实现"></a>9.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">BucketSort</span><span class="hljs-params">(ArrayList&lt;Integer&gt; array, <span class="hljs-type">int</span> bucketSize)</span> &#123;<br>    <span class="hljs-keyword">if</span> (array == <span class="hljs-literal">null</span> || array.size() &lt; <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> array;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> array.get(<span class="hljs-number">0</span>), min = array.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 找到最大值最小值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (array.get(i) &gt; max)<br>            max = array.get(i);<br>        <span class="hljs-keyword">if</span> (array.get(i) &lt; min)<br>            min = array.get(i);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">bucketCount</span> <span class="hljs-operator">=</span> (max - min) / bucketSize + <span class="hljs-number">1</span>;<br>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(bucketCount);<br>    ArrayList&lt;Integer&gt; resultArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketCount; i++) &#123;<br>        bucketArr.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;());<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.size(); i++) &#123;<br>        bucketArr.get((array.get(i) - min) / bucketSize).add(array.get(i));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketCount; i++) &#123;<br>        <span class="hljs-keyword">if</span> (bucketSize == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 如果带排序数组中有重复数字时  感谢 @见风任然是风 朋友指出错误</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; bucketArr.get(i).size(); j++)<br>                resultArr.add(bucketArr.get(i).get(j));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (bucketCount == <span class="hljs-number">1</span>)<br>                bucketSize--;<br>            ArrayList&lt;Integer&gt; temp = BucketSort(bucketArr.get(i), bucketSize);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; temp.size(); j++)<br>                resultArr.add(temp.get(j));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultArr;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-4-算法分析"><a href="#9-4-算法分析" class="headerlink" title="9.4 算法分析"></a>9.4 算法分析</h4><p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。 </p><h3 id="10-基数排序（Radix-Sort）"><a href="#10-基数排序（Radix-Sort）" class="headerlink" title="10. 基数排序（Radix Sort）"></a>10. 基数排序（Radix Sort）</h3><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p><h4 id="10-1-算法描述"><a href="#10-1-算法描述" class="headerlink" title="10.1 算法描述"></a>10.1 算法描述</h4><ul><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ul><h4 id="10-2-动图演示"><a href="#10-2-动图演示" class="headerlink" title="10.2 动图演示"></a>10.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/2021020711004592.gif" alt="在这里插入图片描述"></p><h4 id="10-3-代码实现"><a href="#10-3-代码实现" class="headerlink" title="10.3 代码实现"></a>10.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] RadixSort(<span class="hljs-type">int</span>[] array) &#123;<br>    <span class="hljs-keyword">if</span> (array == <span class="hljs-literal">null</span> || array.length &lt; <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> array;<br>    <span class="hljs-comment">// 先算出最大数的位数；</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>        max = Math.max(max, array[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxDigit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (max != <span class="hljs-number">0</span>) &#123;<br>        max /= <span class="hljs-number">10</span>;<br>        maxDigit++;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>, div = <span class="hljs-number">1</span>;<br>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ArrayList&lt;Integer&gt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        bucketList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; maxDigit; i++, mod *= <span class="hljs-number">10</span>, div *= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length; j++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (array[j] % mod) / div;<br>            bucketList.get(num).add(array[j]);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; bucketList.size(); j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; bucketList.get(j).size(); k++)<br>                array[index++] = bucketList.get(j).get(k);<br>            bucketList.get(j).clear();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-4-算法分析"><a href="#10-4-算法分析" class="headerlink" title="10.4 算法分析"></a>10.4 算法分析</h4><p>基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。</p><p>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="外排序"><a href="#外排序" class="headerlink" title="外排序"></a>外排序</h3><p>传统的排序算法一般指内排序算法，针对的是数据可以一次全部载入内存中的情况。但是面对海量数据，即数据不可能一次全部载入内存，需要用到外排序的方法。外排序采用分块的方法（分而治之），首先将数据分块，对块内数据按选择一种高效的内排序策略进行排序。然后采用归并排序的思想对于所有的块进行排序，得到所有数据的一个有序序列。</p><p>例如，考虑一个1G文件，可用内存100M的排序方法。首先将文件分成10个100M，并依次载入内存中进行排序，最后结果存入硬盘。得到的是10个分别排序的文件。接着从每个文件载入9M的数据到输入缓存区，输出缓存区大小为10M。对输入缓存区的数据进行归并排序，输出缓存区写满之后写在硬盘上，缓存区清空继续写接下来的数据。对于输入缓存区，当一个块的9M数据全部使用完，载入该块接下来的9M数据，一直到所有的9个块的所有数据都已经被载入到内存中被处理过。最后我们得到的是一个1G的排序好的存在硬盘上的文件。</p><p><strong>1TB数据使用32GB内存如何排序</strong> </p><ol><li>把磁盘上的1TB数据分割为40块（chunks），每份25GB。（注意，要留一些系统空间！） </li><li>顺序将每份25GB数据读入内存，使用quick sort算法排序。 </li><li>把排序好的数据（也是25GB）存放回磁盘。 </li><li>循环40次，现在，所有的40个块都已经各自排序了。（剩下的工作就是如何把它们合并排序！） </li><li>从40个块中分别读取25G&#x2F;40&#x3D;0.625G入内存（40 input buffers）。 </li><li>执行40路合并，并将合并结果临时存储于2GB 基于内存的输出缓冲区中。当缓冲区写满2GB时，写入硬盘上最终文件，并清空输出缓冲区；当40个输入缓冲区中任何一个处理完毕时，写入该缓冲区所对应的块中的下一个0.625GB，直到全部处理完成。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/Algorithm/7.%E9%80%92%E5%BD%92/"/>
    <url>/pumpkin/2021/09/02/Java/Design/Algorithm/7.%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>递归调用规则：</p><ol><li>当程序执行到一个方法时，就会开辟一个独立的空间（栈）</li><li>每个空间的数据（局部变量）是独立的</li><li>如果方法中使用的是引用类型的变量，就会共享该引用类型的数据</li><li>递归必须向退出递归的条件逼近，否则就是无限递归</li><li>当一个方法执行完毕，或者return，就会返回，遵守谁调用，就将结果返回给谁，同时方法执行完毕或返回时，该方法也就执行完毕</li></ol><p>通过递归解决阶乘问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">factorial</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> factorial(n - <span class="hljs-number">1</span>) * n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过递归解决迷宫问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用递归解决迷宫问题: 求最短路径</span><br><span class="hljs-comment"> * 策略: 下 右 上 左</span><br><span class="hljs-comment"> * map[1][1]: 起点</span><br><span class="hljs-comment"> * map[6][6]: 终点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Maze</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NOT_WALKED</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WALL</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WALKED</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEAD_WAY</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[][] map = initMaze();<br>        walk(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        printMap(map);<br>        System.out.println(<span class="hljs-string">&quot;-------------------------&quot;</span>);<br>        printMap(map);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] initMaze()&#123;<br>        <span class="hljs-type">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            map[<span class="hljs-number">0</span>][i] = WALL;<br>            map[<span class="hljs-number">7</span>][i] = WALL;<br>            map[i][<span class="hljs-number">0</span>] = WALL;<br>            map[i][<span class="hljs-number">7</span>] = WALL;<br>        &#125;<br><br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = WALL;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = WALL;<br>        map[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = WALL;<br><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">walk</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>] == WALKED)&#123;    <span class="hljs-comment">// 表示已经到终点了</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (map[i][j] == NOT_WALKED)&#123;   <span class="hljs-comment">// 如果可以走</span><br>            map[i][j] = WALKED;         <span class="hljs-comment">// 设置为走过</span><br>            <span class="hljs-keyword">if</span> (walk(map, i + <span class="hljs-number">1</span>, j))&#123;           <span class="hljs-comment">// 下</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(walk(map, i, j + <span class="hljs-number">1</span>))&#123;     <span class="hljs-comment">// 右</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>             &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (walk(map, i - <span class="hljs-number">1</span>, j))&#123;   <span class="hljs-comment">// 上</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (walk(map, i, j - <span class="hljs-number">1</span>))&#123;    <span class="hljs-comment">// 左</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map[i][j] = DEAD_WAY;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMap</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)&#123;<br>                System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/Algorithm/6.%E4%B8%B2/"/>
    <url>/pumpkin/2021/09/02/Java/Design/Algorithm/6.%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><h2 id="字符串模式匹配"><a href="#字符串模式匹配" class="headerlink" title="字符串模式匹配"></a>字符串模式匹配</h2><h3 id="暴力匹配"><a href="#暴力匹配" class="headerlink" title="暴力匹配"></a>暴力匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(String str, String subStr)</span> &#123;<br>    <span class="hljs-type">char</span>[] s = str.toCharArray();<br>    <span class="hljs-type">char</span>[] t = subStr.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; s.length &amp;&amp; j &lt; t.length) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == t[j]) &#123;<br>            i++;<br>            j++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = i - (j - <span class="hljs-number">1</span>);<span class="hljs-comment">// 每次比对失败回溯到开始节点+1的位置</span><br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (j == t.length)<br>        <span class="hljs-keyword">return</span> (i - j);     <span class="hljs-comment">//主串中存在该模式返回下标号</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;          <span class="hljs-comment">//主串中不存在该模式</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><blockquote><p>用于字符串子串的查找，通过消除回溯来提高匹配效率</p></blockquote><p>对于每模式串 t 的每个元素 t[i]，都存在一个实数 k ，使得模式串 t 开头的 k 个字符依次与 t[i] 前面的 k 个字符相同，如果这样的 k 有多个，则取最大的一个。</p><p>如果 j &#x3D; k 时才发现匹配失败，说明 1 ~ k - 1 都匹配成功</p><p><img src="https://img-blog.csdnimg.cn/2021020420593768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(String s, String t)</span>&#123;<br>    <span class="hljs-type">char</span>[] s_arr = s.toCharArray();<br>    <span class="hljs-type">char</span>[] t_arr = t.toCharArray();<br>    <span class="hljs-type">int</span>[] next = getNextArray(t_arr);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i&lt;s_arr.length &amp;&amp; j&lt;t_arr.length)&#123;<br>        <span class="hljs-keyword">if</span>(j == -<span class="hljs-number">1</span> || s_arr[i]==t_arr[j])&#123;<br>            i++;<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            j = next[j];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j == t_arr.length)<br>        <span class="hljs-keyword">return</span> i-j;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getNextArray(<span class="hljs-type">char</span>[] t) &#123;<br>    <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[t.length];<br>    next[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<br>    next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt; t.length; j++) &#123;<br>        k=next[j-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span> (k!=-<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (t[j - <span class="hljs-number">1</span>] == t[k]) &#123;<br>                next[j] = k + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                k = next[k];<br>            &#125;<br>            next[j] = <span class="hljs-number">0</span>;  <span class="hljs-comment">//当k==-1而跳出循环时，next[j] = 0，否则next[j]会在break之前被赋值</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/Algorithm/5.%E6%A0%91/"/>
    <url>/pumpkin/2021/09/02/Java/Design/Algorithm/5.%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><strong>二叉树的遍历方式</strong></p><p>前序遍历：先访问根节点，再遍历左子树，最后遍历右子树。时间复杂度 O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(Node n)</span>&#123;<br>    <span class="hljs-keyword">if</span> (n != <span class="hljs-literal">null</span>)&#123;<br>        visit(n);<br>        preOrder(n.left);<br>        preOrder(n.right)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>中序遍历：先遍历左子树，再访问根节点，最后遍历右子树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">InOrder</span><span class="hljs-params">(Node n)</span>&#123;<br>    <span class="hljs-keyword">if</span> (n != <span class="hljs-literal">null</span>)&#123;<br>        InOrder(n.left);<br>        visit(n);<br>        InOrder(n.right)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后序遍历：从左到后从叶子节点遍历左右子树，最后访问根节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">(Node n)</span>&#123;<br>    <span class="hljs-keyword">if</span> (n != <span class="hljs-literal">null</span>)&#123;<br>        postOrder(n.left);<br>        postOrder(n.right)<br>        visit(n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>层次遍历：从根节点一层一层的从左到右遍历整个二叉树树</p><p>算法思想：</p><ol><li>初始将根入队并访问根节点</li><li>若有左子树，则将左子树的根入队</li><li>若有右子树，则将右子树的根入队</li><li>然后出队，访问该节点</li><li>反复这个过程直到队列空为止</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(BiTreeNode t)</span> &#123;<br><span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">return</span>;<br>Queue&lt;BiTreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;();<br>BiTreeNode curr;<br>queue.add(t);<br><span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>curr = queue.remove();<br>System.out.println(curr.value);<br><span class="hljs-keyword">if</span> (curr.left != <span class="hljs-literal">null</span>)<br>queue.add(curr.left);<br><span class="hljs-keyword">if</span> (curr.right != <span class="hljs-literal">null</span>)<br>queue.add(curr.right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>中序遍历转换为非递归算法</strong></p><ol><li>初始时依次扫描根节点的所有左侧节点并将它们一一进栈</li><li>出栈一个节点，访问它</li><li>扫描该节点的右孩子节点并将其进栈</li><li>依次扫描右孩子节点的所有左侧节点并一一进栈</li><li>反复该过程直到栈空为止</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">InOrder</span><span class="hljs-params">(Node n)</span>&#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> n;<br>    <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>        <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">null</span>)&#123;<br>            stack.push(p);<br>            p = p.left;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            visit(stack.pop());<br>       p = p.right;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用遍历构造二叉树</strong></p><p>先序 &#x2F; 后序遍历序列 + 中序遍历序列可以确定一棵二叉树</p><p>先序遍历序列 + 后序遍历序列不能确定一棵二叉树</p><p>原因：中序遍历序列可以确定左右子树，先序 &#x2F; 后序 遍历序列可以确定根节点</p><ol><li>在先序序列中，第一个节点是根节点</li><li>根节点将中序遍历序列划分为两部分</li><li>然后在先序序列中确定两部分的节点，并且两部分的第一个节点分别为左子树的根和右子树的根</li><li>在子树中重复递归该过程，便能唯一确定一棵二叉树</li></ol><p><img src="https://img-blog.csdnimg.cn/20210204231919982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><p>根据先序、中序、后序遍历的顺序，实现线索二叉树</p><p>前驱、后继结点：如先序序列 124536，2的前驱结点为1，后继结点为4</p><p>最常用的是中序线索二叉树，因为找前驱结点非常方便</p><ul><li><p>若无左子树，则将左指针指向其前驱结点</p></li><li><p>若无右子树，则将右指针指向其后继结点</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210206204518750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>线索二叉树的结点结构</p><p>这种结点结构构成的二叉链表作为二叉树的存储结构，称为线索链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-keyword">public</span> Object data;<span class="hljs-comment">// 数据</span><br>    <span class="hljs-keyword">public</span> Node leftChild;<span class="hljs-comment">// 左孩子</span><br>    <span class="hljs-keyword">public</span> Node rightChild;<span class="hljs-comment">// 右孩子</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> leftTag;<span class="hljs-comment">// 左标志位</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> rightTag;<span class="hljs-comment">// 右标志位</span><br>&#125;<br></code></pre></td></tr></table></figure><p>中序线索二叉树线索化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 传入线索二叉树的根结点 */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createInThread</span><span class="hljs-params">(Node n)</span>&#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (n != <span class="hljs-literal">null</span>)&#123;<br>        InThread(n, pre);<br>        <span class="hljs-comment">// 将最后两个根结点的右孩子置为空，右标志位置为1</span><br>        pre.rightChild = <span class="hljs-literal">null</span>;<br>        pre.rightTag = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">inThread</span><span class="hljs-params">(Node p, Node pre)</span>&#123;<br><span class="hljs-keyword">if</span> (p != <span class="hljs-literal">null</span>)&#123;<br>        InThread(p.leftChild, pre);<br>        <span class="hljs-keyword">if</span> (p.leftChild == <span class="hljs-literal">null</span>)&#123;<br>            p.leftChild = pre;<br>            p.leftTag = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pre != <span class="hljs-literal">null</span> &amp;&amp; pre.rightChild == <span class="hljs-literal">null</span>)&#123;<br>        pre.rightChild = p;<br>        pre.rightTag = <span class="hljs-number">1</span>;<br>    &#125;<br>    pre = p;<br>    InThread(p.rightChild, pre);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><blockquote><p>BST，也称二叉查找树</p></blockquote><ul><li><p>若左子树非空，则左子树上所有结点关键字均小于根结点的关键字</p></li><li><p>若右子树非空，则右子树上所有结点关键字均大于根结点的关键字</p></li><li><p>左右子树本身也分别是一棵二叉排序树</p></li></ul><p><strong>二叉排序树案例</strong></p><p>左子树结点值 &lt; 根结点值 &lt; 右子树结点值</p><p>二叉排序树中序遍历序列是一个递增的有序序列</p><p><img src="https://img-blog.csdnimg.cn/20210206213633852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><blockquote><p>AVL 树，任意结点的平衡因子绝对值不超过1</p><p>平衡因子 &#x3D; 左子树高度 - 右子树高度</p></blockquote><p>计算高度为 h 的最小平衡二叉树的结点数 N(h)</p><p>N(h) &#x3D; N(h-1) + N(h-2) + 1</p><p>N(0) &#x3D; 0</p><p>N(1) &#x3D; 1</p><p><strong>LL平衡旋转</strong></p><p>当插入结点不满足平衡时，平衡二叉树会对其进行调整，调整方式：</p><p>右旋：将 A 的左孩子 B 代替 A，将 A 结点称为 B 的右子树根结点，而 B 的原右子树则作为 A 的左子树</p><p>左旋：将 A 的右孩子 B 代替 A，将 A 结点称为 B 的左子树根结点，而 B 的原左子树则作为 A 的右子树</p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><blockquote><p>也称最优二叉树，含有 n 个带权叶子结点带权路径长度最小的二叉树</p></blockquote><p>路径长度：路径上所经历边的个数</p><p>结点的权：结点被赋予的数值</p><p>树的带权路径长度：WPL，树中所有叶结点的带权路径长度之和</p><p><img src="https://img-blog.csdnimg.cn/20210206215016264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>最长子树不超过最短子树的两倍，损失部分查询性能提升插入性能，可能导致树的高度过高</p><p>左旋：逆时针旋转，父节点被右孩子取代，而自己成功自己的左孩子</p><p>右旋：顺时针旋转，父节点被左孩子取代，而自己成为自己的右孩子</p><p><img src="https://img-blog.csdnimg.cn/20200209094426919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><blockquote><p>横向存储更多数据</p></blockquote><ul><li>所有键值分布在整棵树中</li><li>搜索有可能在非叶子结点结束，在关键字全集内做一次查找,性能逼近二分查找</li><li>每个节点最多拥有m个子树</li><li>根节点最少有两个子树</li><li>分支节点至少拥有m&#x2F;2颗子树（除根节点和叶子节点外都是分支节点）</li><li>所有叶子节点都在同一层、每个节点最多可以有m-1个key，并且以升序排列</li></ul><p><img src="https://img-blog.csdnimg.cn/20210123104042810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><blockquote><p>B树变种</p></blockquote><ul><li>非叶子节点不存储data，值存储索引（冗余），可以放更多的索引。</li><li>叶子节点包含所有索引字段。</li><li>叶子节点用指针连接，提高访问的性能。</li></ul><p><img src="https://img-blog.csdnimg.cn/2021020710474436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/Algorithm/4.%E6%A0%88/"/>
    <url>/pumpkin/2021/09/02/Java/Design/Algorithm/4.%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>线性表的一种，限制仅在线性表的一端进行插入和删除操作</p><p>其中允许插入和删除的一端称为栈顶（top），不允许插入和删除的一端称为栈底（bottom）</p><h2 id="栈的基本操作和代码实现"><a href="#栈的基本操作和代码实现" class="headerlink" title="栈的基本操作和代码实现"></a>栈的基本操作和代码实现</h2><p>基本操作：初始化、判断是否为空、求栈深、读取栈顶元素、出栈&#x2F;入栈、栈置空等。</p><p>抽象出栈的基本操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStack</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Object obj)</span>;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">top</span><span class="hljs-params">()</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>栈的顺序存储数据结构Java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStack</span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxsize</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-type">int</span> elem[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxsize];<br>    <span class="hljs-type">int</span> top;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Stack</span><span class="hljs-params">()</span>&#123;<br>        top = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.栈置空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>&#123;<br>    top = <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>2.判断栈是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(top &gt; <span class="hljs-number">0</span>)<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>3.进栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>&#123;<br>    <span class="hljs-keyword">if</span>(top == maxsize)<br>        System.out.print(<span class="hljs-string">&quot;stack overflow&quot;</span>);<br>    <span class="hljs-keyword">else</span> <br>        elem[top++] = data;<span class="hljs-comment">//进栈</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4.出栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">pubic <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(top == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        top--;<span class="hljs-comment">//栈顶指针减1</span><br>        <span class="hljs-keyword">return</span> elem[top];<span class="hljs-comment">//返回原栈顶元素</span><br>&#125;<br></code></pre></td></tr></table></figure><p>5.求栈深操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> top;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.读取栈顶元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(top == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> elem[top - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链式存储栈"><a href="#链式存储栈" class="headerlink" title="链式存储栈"></a>链式存储栈</h2><p>链栈结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 链栈中的数据结点结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StackNode</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    StackNode next;<br>&#125;<br><br><span class="hljs-comment">// 栈的基本操作不变</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedStack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStack</span>&#123;<br>    StackNode top;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkStack</span><span class="hljs-params">()</span>&#123;<br>        top.data = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.链栈的进栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>&#123;<br>    <span class="hljs-type">StackNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StackNode</span>();<br>    node.data = data;<br>    node.next = top;<span class="hljs-comment">// 链入新的结点</span><br>    top = node;<span class="hljs-comment">// 修改栈顶指针</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.链栈的出栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">if</span>(top == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        data = top.data;<br>        top = top.next;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h2><p>子程序调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</p><p>处理递归调用：和子程序调用类似，只是除了存储下一个指令的地址外，也将参数、区域变量等存入堆栈中。</p><p>表达式转换：中缀表达式转后缀表达式</p><p>图形的深度优先搜索法（depth-first）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>&#123;<br>    <span class="hljs-type">int</span> maxSize;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span>[] arr;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Stack</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span>&#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span>= maxSize - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span>= -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Stack is full&quot;</span>);<br>        top++;<br>        arr[top] = val;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Stack is Empty&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> arr[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br><br>    <span class="hljs-comment">// Begin with top when traversing</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;stack[%d]=%d\n&quot;</span>, i, arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前缀、中缀、后缀表达式"><a href="#前缀、中缀、后缀表达式" class="headerlink" title="前缀、中缀、后缀表达式"></a>前缀、中缀、后缀表达式</h2><ul><li><p>前缀表达式</p><p>从右至左扫描表达式，遇到数字时，将数字压入栈，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算，并将结果压入栈，重复上述过程得到最终结果</p><p>例：(3+4)*5-6 的前缀表达式为 - * + 3 4 5 6 </p></li><li><p>中缀表达式</p><p>就是常见的表达式 (3+4)*5-6 </p></li><li><p>后缀表达式（逆波兰表达式）</p><p>从左向右扫描，遇到数字时，将数字压入栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算，并将结果压入栈，重复上述过程直到表达式的最右端</p><p>例：(3+4)*5-6 的后缀表达式为 3 4 + 5 * 6 -</p></li></ul><p><strong>中缀表达式转后缀表达式</strong></p><ol><li><p>初始化两个栈：运算符栈s1和储存中间结果的栈s2；</p></li><li><p>从左至右扫描中缀表达式；</p></li><li><p>遇到操作数时，将其压s2；</p></li><li><p>遇到运算符时，比较其与s1栈顶运算符的优先级：</p><ol><li><p>如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</p></li><li><p>否则，若优先级比栈顶运算符的高，也将运算符压入s1；</p></li><li><p>否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较；</p></li></ol></li><li><p>遇到括号时：</p><ol><li>如果是左括号“(”，则直接压入s1</li><li>如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</li></ol></li><li><p>重复步骤2至5，直到表达式的最右边</p></li><li><p>将s1中剩余的运算符依次弹出并压入s2</p></li><li><p>依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/Algorithm/3.%E9%98%9F%E5%88%97/"/>
    <url>/pumpkin/2021/09/02/Java/Design/Algorithm/3.%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>队列是一个有序列表，可以用数组或链表实现，遵循先进先出原则</p><p>队列分为：单向队列、双向队列</p><h2 id="单向队列"><a href="#单向队列" class="headerlink" title="单向队列"></a>单向队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleQueue</span> &#123;<br>    <span class="hljs-comment">/* 队列最大大小 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> maxSize;<br><br>    <span class="hljs-comment">/* 队列中元素的实际数目 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">/* 头指针 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;<br><br>    <span class="hljs-comment">/* 尾指针 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;<br><br>    <span class="hljs-comment">/* 队列数组 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object[] array;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SingleQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        size = <span class="hljs-number">0</span>;<br>        front = <span class="hljs-number">0</span>;<br>        rear = -<span class="hljs-number">1</span>;<br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Queue is full, cannot add&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//如果队列尾部指向顶了，那么循环回来，执行队列的第一个元素</span><br>            <span class="hljs-keyword">if</span> (rear == maxSize - <span class="hljs-number">1</span>) &#123;<br>                rear = -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">//队尾指针加1，然后在队尾指针处插入新的数据</span><br>            array[++rear] = value;<br>            size++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Queue is empty, cannot remove&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> array[front];<br>        array[front] = <span class="hljs-literal">null</span>;<br>        front++;<br>        <span class="hljs-keyword">if</span> (front == maxSize) &#123;<br>            front = <span class="hljs-number">0</span>;<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">// 查看队头数据</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> array[front];<br>    &#125;<br><br>    <span class="hljs-comment">// 判断队列是否满了</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span>= maxSize;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断队列是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span>= <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回队列的大小</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>双端队列就是一个两端都是结尾或者开头的队列， 队列的每一端都可以进行插入数据项和移除数据项，这些方法可以叫做：</p><p>insertRight()、insertLeft()、removeLeft()、removeRight()</p><h2 id="环形队列"><a href="#环形队列" class="headerlink" title="环形队列"></a>环形队列</h2><p>数组实现环形队列：尾索引的下一个为头索引时表示队列满</p><ul><li>初始化：数组的front和rear都指向0.</li><li>入队：队不满，先队尾位置传值，再 rear &#x3D; (rear + 1) % maxsize;</li><li>出队：队不空，先取队头位置元素，front &#x3D; (front + 1) % maxsize;</li><li>是否为空：rear &#x3D;&#x3D; front</li><li>大小：(rear + maxsize - front) % maxsize;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleQueue</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> arr[];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CircleQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span>&#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % maxSize == front;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">rear</span> <span class="hljs-operator">=</span>= front;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;cannot add element to full queue&quot;</span>);<br>        arr[rear] = n;<br>        rear = (rear + <span class="hljs-number">1</span>) % maxSize;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">poll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;cannot poll element to empty queue&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> arr[front];<br>        front = (front + <span class="hljs-number">1</span>) % maxSize;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> front; i &lt; front + size(); i++)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;arr[%d] = %d\n&quot;</span>, i % maxSize, arr[i % maxSize]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (rear - front + maxSize) % maxSize;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p>优先级队列（priority queue）是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue</span> &#123;<br><br>    <span class="hljs-comment">/* 最大大小 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> maxSize;<br><br>    <span class="hljs-comment">/* 实际大小 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">/* 队列数组 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] array;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        size = <span class="hljs-number">0</span>;<br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-comment">// 插入数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            array[size++] = value;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 选择的排序方法是插入排序，按照从大到小的顺序排列，越小的越在队列的顶端</span><br>            <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; value &gt; array[j]) &#123;<br>                array[j + <span class="hljs-number">1</span>] = array[j];<br>                j--;<br>            &#125;<br>            array[j + <span class="hljs-number">1</span>] = value;<br>            size++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 移除数据,由于是按照大小排序的，所以移除数据我们指针向下移动</span><br>    <span class="hljs-comment">// 被移除的地方由于是int类型的，不能设置为null，这里的做法是设置为 -1</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> array[k];<br>        array[k] = -<span class="hljs-number">1</span>;  <span class="hljs-comment">// -1表示这个位置的数据被移除了</span><br>        size--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">// 查看优先级最高的元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peekMin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> array[size - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 判断是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (size == <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断是否满了</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (size == maxSize);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/Algorithm/2.%E9%93%BE%E8%A1%A8/"/>
    <url>/pumpkin/2021/09/02/Java/Design/Algorithm/2.%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="1-单向链表"><a href="#1-单向链表" class="headerlink" title="1. 单向链表"></a>1. 单向链表</h2><p>单向链表是链表的一种，它由节点组成，每个节点都包含下一个节点的指针，下图就是一个单链表，表头为空，表头的后继节点是”结点10”(数据为10的结点)，”节点10”的后继结点是”节点20”(数据为10的结点)，…</p><p><img src="https://pic4.zhimg.com/80/v2-392a58393fd03c2893bfb21b3a7b0d97_1440w.jpg" alt="img"></p><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E element;<br>    Node&lt;E&gt; next;<br><br>    Node(E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.element = element;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> element + <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span>&lt;E&gt;&#123;<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; head;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>)&#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(e, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Node&lt;E&gt; tmp = head;<br>        <span class="hljs-keyword">while</span> (tmp.next != <span class="hljs-literal">null</span>) &#123;<br>            tmp = tmp.next;<br>        &#125;<br>        tmp.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(e, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E e)</span>&#123;<br>        <span class="hljs-keyword">if</span> (index &lt;= <span class="hljs-number">0</span>)&#123;<br>            Node&lt;E&gt; tmp = head;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(e, tmp);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;E&gt; next = node(index);<br>            Node&lt;E&gt; prev = node(index - <span class="hljs-number">1</span>);<br>            prev.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(e, next);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">if</span> (index &lt;= <span class="hljs-number">0</span>)&#123;<br>            head = head.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;E&gt; prev = node(index - <span class="hljs-number">1</span>);<br>            prev.next = node(index + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    Node&lt;E&gt; <span class="hljs-title function_">node</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>)<br>            index = <span class="hljs-number">0</span>;<br>        Node&lt;E&gt; tmp = head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++)&#123;<br>            <span class="hljs-keyword">if</span> (tmp == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">break</span>;<br>            tmp = tmp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAll</span><span class="hljs-params">()</span>&#123;<br>        Node&lt;E&gt; tmp = head;<br>        <span class="hljs-keyword">while</span> (tmp != <span class="hljs-literal">null</span>)&#123;<br>            System.out.print((tmp) + <span class="hljs-string">&quot;\t&quot;</span>);<br>            tmp = tmp.next;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    LinkedList&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>    list.add(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;ddd&quot;</span>);<br>    list.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;eee&quot;</span>);<br>    list.remove(<span class="hljs-number">1</span>);<br>    list.showAll();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-双向链表"><a href="#2-双向链表" class="headerlink" title="2. 双向链表"></a>2. 双向链表</h2><p>双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。</p><p><img src="https://pic3.zhimg.com/80/v2-2ee9141bae02c577c1143fe42bad1456_1440w.jpg" alt="img"></p><h2 id="3-环形链表"><a href="#3-环形链表" class="headerlink" title="3. 环形链表"></a>3. 环形链表</h2><p>约瑟夫问题：N个人围成一圈，从第一个开始报数，第M个将被出圈，最后剩下一个</p><p>例如N&#x3D;6，M&#x3D;5，出圈的顺序是：5，4，6，2，3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleCircleLinkedListDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>        <span class="hljs-type">int</span> no;<br>        Node next;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>            <span class="hljs-built_in">this</span>.no = no;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span>&#123;<br>        <span class="hljs-type">int</span> size;<br>        Node first;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>            <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">1</span>)<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;num must greater then 0&quot;</span>);<br>            <span class="hljs-built_in">this</span>.size = num;<br>            <span class="hljs-comment">// create circle linked list</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= num; i++)&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(i);<br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)&#123;<br>                    first = node;<br>                    first.next = first; <span class="hljs-comment">// make a circle</span><br>                    curr = first;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    curr.next = node;<br>                    node.next = first;<br>                    curr = node;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAll</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> first;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                System.out.printf(<span class="hljs-string">&quot;The no of node: %d\n&quot;</span>, curr.no);<br>                <span class="hljs-keyword">if</span> (curr.next == first)<br>                    <span class="hljs-keyword">break</span>;<br>                curr = curr.next;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 计算出圈顺序</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> count 数几个数字</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span>&#123;<br>            <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;List is empty&quot;</span>);<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> first;<br>            <span class="hljs-keyword">while</span> (curr.next != first) &#123;<br>                curr = curr.next;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (curr != first) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count - <span class="hljs-number">1</span>; i++) &#123;<br>                    first = first.next;<br>                    curr = curr.next;<br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;The out no of node: &quot;</span> + first.no);<br>                <span class="hljs-comment">// delete the out node</span><br>                first = first.next;<br>                curr.next = first;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;Last node: &quot;</span> + first.no);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LinkedList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>        list.init(<span class="hljs-number">5</span>);<br>        list.showAll();<br>        System.out.println();<br>        list.out( <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Java/Design/Algorithm/1.%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <url>/pumpkin/2021/09/02/Java/Design/Algorithm/1.%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="时间-x2F-空间复杂度"><a href="#时间-x2F-空间复杂度" class="headerlink" title="时间&#x2F;空间复杂度"></a>时间&#x2F;空间复杂度</h1><h2 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1. 时间复杂度"></a>1. 时间复杂度</h2><p><img src="https://img-blog.csdnimg.cn/20201216220144701.png" alt="在这里插入图片描述"></p><p>常对幂指阶：常数级&lt;对数级&lt;幂数级&lt;指数级&lt;阶乘</p><p>结论1：顺序执行的代码只影响常数项，可以忽略</p><p>结论2：只需挑循环中的一个基本操作分析它的执行次数与n的关系即可</p><p>练习：计算时间复杂度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">loveYou</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<span class="hljs-comment">// n为问题规模</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= n)&#123;<br>        i = i * <span class="hljs-number">2</span>;<br>        printf(<span class="hljs-string">&quot;I love you %d\n&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设总循环的次数为x，则由循环条件可知，循环结束刚好满足2^x &gt; n</p><p>x &#x3D; log₂n + 1</p><p>T(n) &#x3D; O(log₂n)</p><h2 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2. 空间复杂度"></a>2. 空间复杂度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// S(n) = O(1)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// S(n) = O(n)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-type">int</span> arr[n];<br>    <span class="hljs-type">int</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// S(n) = O(n²)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> arr1[n][n];<br><span class="hljs-type">int</span> arr2[n];<br>    <span class="hljs-type">int</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>递归调用空间复杂度：空间复杂度 &#x3D; 递归调用的深度</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Network/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/pumpkin/2021/09/02/Network/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="网络的三种连接方式"><a href="#网络的三种连接方式" class="headerlink" title="网络的三种连接方式"></a>网络的三种连接方式</h2><ol><li>桥接模式：虚拟机和主机共享同一个网络段</li><li>NAT模式（网络地址转换模式）：虚拟机使用主机的网络端口，可以发送请求但不能接收请求</li><li>主机模式：独立的系统，不和外部发生联系</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Linux/99.%E9%99%84%E5%BD%95/"/>
    <url>/pumpkin/2021/09/02/DevOps/Linux/99.%E9%99%84%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>磁盘</p><ol><li>寻址 ms</li><li>带宽 G&#x2F;M</li></ol><p>内存</p><ol><li>寻址 ns</li></ol><p>s &gt; ms &gt; us &gt; ns</p><p>结论：内存比磁盘寻址上快10w倍</p><p>磁盘：磁道、扇区，一个扇区512Byte带来一个成本变大，索引</p><p>操作系统无论你读多少，都是最少4K从磁盘拿</p><p>java 随着文件变大 查询速度变慢 为什么？</p><p>磁盘IO成为瓶颈</p><p>数据库的出现</p><p>有无数个 data page 4K，是按顺序存放的，但是读取数据的时候还是要从第一个4K读，还是走全量的IO，要想听声效率就需要索引，索引变相来说也是数据。</p><p>关系型数据库建表：必须给出schema，一共有多少列，什么类型，约束关系</p><p>类型：字节宽度，如varchar(20)就开辟20个字节</p><p>插入一条数据，这条数据中即使有字段没值也会开辟内存空间，好处是存的时候倾向于行级存储，以后在补充其它字段的时候不用移动数据，只需要覆写即可。</p><p>数据和索引都是存在硬盘当中的，真正查的时候要在内存中准备一个B+树，B+树的树干是在内存中的，当sql的where条件命中了索引，B+树就会将索引从磁盘读到内存，再根据索引找到具体的数据读到内存。</p><p>数据库表很大的时候性能下降？</p><ol><li><p>如果表有索引，增删改变慢</p></li><li><p>查询速度：1个或少量依旧很快，并发大的时候会受磁盘带宽影响速度</p></li></ol><p>数据库排名网站</p><p><a href="https://db-engines.com/en/">https://db-engines.com/en/</a></p><p>kernel</p><p>VFS 目录树</p><p>FD 文件描述符</p><p>inode id</p><p>pagecache 页缓存 默认4k大小</p><p>dirty 脏 （修改过的pagecache被标记为dirty）</p><p>flush</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Linux/8.Linux%E5%AE%89%E8%A3%85Redis/"/>
    <url>/pumpkin/2021/09/02/DevOps/Linux/8.Linux%E5%AE%89%E8%A3%85Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-安装-Redis"><a href="#Linux-安装-Redis" class="headerlink" title="Linux 安装 Redis"></a>Linux 安装 Redis</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y wget<br>wget http://download.redis.io/releases/redis-5.0.5.tar.gz<br>tar xf redis-5.0.5.tar.gz<br>cd redis-5.0.5<br>make<br>yum install -y gcc<br>make distclean<br>make<br>cd src<br>cd ..<br>make install PREFIX=/opt/my/redis5<br>vi /etc/profile<br>export REDIS_HOME=/opt/my/redis5<br>export PATH=$PATH:$REDIS_HOME/bin<br>source /etc/profile<br><br>cd utils<br>./install_server.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Linux/7.FastDFS/"/>
    <url>/pumpkin/2021/09/02/DevOps/Linux/7.FastDFS/</url>
    
    <content type="html"><![CDATA[<h1 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>技术论坛： <a href="http://bbs.chinaunix.net/forum-240-1.html">http://bbs.chinaunix.net/forum-240-1.html</a></p><p>FAQ：<a href="http://bbs.chinaunix.net/thread-1920470-1-1.html">http://bbs.chinaunix.net/thread-1920470-1-1.html</a></p><p>资源地址： <a href="https://sourceforge.net/projects/fastdfs/">https://sourceforge.net/projects/fastdfs/</a></p><p>源码资源： <a href="https://github.com/happyfish100">https://github.com/happyfish100</a></p><p> FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><p>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><p>FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。</p><p>存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key value）方式表示，如：width&#x3D;1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。</p><p>跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。</p><p>为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。</p><p>在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。</p><p>当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。</p><p>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。</p><h3 id="web项目架构"><a href="#web项目架构" class="headerlink" title="web项目架构"></a>web项目架构</h3><p><img src="https://img-blog.csdnimg.cn/20210115143652392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><ul><li>tracker Server：<ul><li>主节点，跟踪服务器，主要做调度工作，在访问上起负载均衡的作用。</li><li>记录storage server的状态，是连接Client和Storage server的枢纽。</li><li>FastDFS集群中的Tracker server可以有多台，Trackerserver之间是相互平等关系同时提供服务</li><li>Trackerserver不存在单点故障。客户端请求Trackerserver采用轮询方式，如果请求的tracker无法提供服务则换另一个tracker。</li></ul></li><li>Storage Server：<ul><li>存储服务器，文件和meta data都保存到存储服务器上</li><li>storage集群由一个或多个组构成，集群存储总容量为集群中所有组的存储容量之和。</li><li>一个组由一台或多台存储服务器组成，组内的Storage server之间是平等关系</li><li>不同组的Storageserver之间不会相互通信，同组内的Storageserver之间会相互连接进行文件同步，从而保证同组内每个storage上的文件完全一致的。</li><li>一个组的存储容量为该组内存储服务器容量最小的那个，由此可见组内存储服务器的软硬件配置最好是一致的。</li><li>Storage server会连接集群中所有的Tracker server，定时向他们报告自己的状态，包括磁盘剩余空间、文件同步状况、文件上传下载次数等统计信息。</li></ul></li><li>group：组，也称为卷。同组内服务器上的文件是完全相同的</li><li>文件标识：包括两部分：组名和文件名（包含路径）</li><li>meta data：文件相关属性，键值对（Key Value Pair）方式，如：width&#x3D;1024,heigth&#x3D;768</li></ul><h3 id="上传流程"><a href="#上传流程" class="headerlink" title="上传流程"></a>上传流程</h3><p><img src="https://img-blog.csdnimg.cn/20210115143722648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传</li></ul><p>内部机制如下：</p><p><strong>1、选择tracker server</strong></p><p>当集群中不止一个tracker server时，由于tracker之间是完全对等的关系，客户端在upload文件时可以任意选择一个trakcer。<br>选择存储的group<br>当tracker接收到upload file的请求时，会为该文件分配一个可以存储该文件的group，支持如下选择group的规则：</p><ul><li>1、Round robin，所有的group间轮询</li><li>2、Specified group，指定某一个确定的group</li><li>3、Load balance，剩余存储空间多多group优先</li></ul><p><strong>2、选择storage server</strong></p><p>当选定group后，tracker会在group内选择一个storage server给客户端，支持如下选择storage的规则：</p><ul><li>1、Round robin，在group内的所有storage间轮询</li><li>2、First server ordered by ip，按ip排序</li><li>3、First server ordered by priority，按优先级排序（优先级在storage上配置）</li></ul><p><strong>3、选择storage path</strong></p><p>当分配好storage server后，客户端将向storage发送写文件请求，storage将会为文件分配一个数据存储目录，支持如下规则：</p><ul><li>1、Round robin，多个存储目录间轮询</li><li>2、剩余存储空间最多的优先</li></ul><p><strong>4、生成Fileid</strong></p><p>选定存储目录之后，storage会为文件生一个Fileid，由storage server ip、文件创建时间、文件大小、文件crc32和一个随机数拼接而成，然后将这个二进制串进行base64编码，转换为可打印的字符串。<br>选择两级目录<br>当选定存储目录之后，storage会为文件分配一个fileid，每个存储目录下有两级256*256的子目录，storage会按文件fileid进行两次hash（猜测），路由到其中一个子目录，然后将文件以fileid为文件名存储到该子目录下。</p><p><strong>5、生成文件名</strong></p><p>当文件存储到某个子目录后，即认为该文件存储成功，接下来会为该文件生成一个文件名，文件名由group、存储目录、两级子目录、fileid、文件后缀名（由客户端指定，主要用于区分文件类型）拼接而成。</p><h3 id="下载流程"><a href="#下载流程" class="headerlink" title="下载流程"></a>下载流程</h3><p><img src="https://img-blog.csdnimg.cn/20210115143753985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>client询问tracker下载文件的storage，参数为文件标识（组名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210115143819407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h3><p>每个storage写文件后，同时会写一份binlog，binlog里不包含文件数据，只包含文件名等元信息，这份binlog用于后台同步，storage会记录向group内其他storage同步的进度，以便重启后能接上次的进度继续同步；进度以时间戳的方式进行记录，所以最好能保证集群内所有server的时钟保持同步。</p><h3 id="FastDFS和其他文件存储的简单对比"><a href="#FastDFS和其他文件存储的简单对比" class="headerlink" title="FastDFS和其他文件存储的简单对比"></a>FastDFS和其他文件存储的简单对比</h3><table><thead><tr><th><strong>指标</strong></th><th><strong>FastDFS</strong></th><th><strong>NFS</strong></th><th><strong>集中存储设备</strong>   <strong>如NetApp****、NAS</strong></th></tr></thead><tbody><tr><td>线性扩容性</td><td>高</td><td>差</td><td>差</td></tr><tr><td>文件高并发访问性能</td><td>高</td><td>差</td><td>一般</td></tr><tr><td>文件访问方式</td><td>专有API</td><td>POSIX</td><td>支持POSIX</td></tr><tr><td>硬件成本</td><td>较低</td><td>中等</td><td>高</td></tr><tr><td>相同内容文件只保存一份</td><td>支持</td><td>不支持</td><td>不支持</td></tr></tbody></table><table><thead><tr><th><strong>指标</strong></th><th><strong>FastDFS</strong></th><th><strong>mogileFS</strong></th></tr></thead><tbody><tr><td>系统简洁性</td><td>简洁   只有两个角色：tracker和storage</td><td>一般   有三个角色：tracker、storage和存储文件信息的mysql db</td></tr><tr><td>系统性能</td><td>很高（没有使用数据库，文件同步直接点对点，不经过tracker中转）</td><td>高（使用mysql来存储文件索引等信息，文件同步通过tracker调度和中转）</td></tr><tr><td>系统稳定性</td><td>高（C语言开发，可以支持高并发和高负载）</td><td>一般（Perl语言开发，高并发和高负载支持一般）</td></tr><tr><td>软RAID方式</td><td>分组（组内冗余），灵活性较大</td><td>动态冗余，灵活性一般</td></tr><tr><td>通信协议</td><td>专有协议   下载文件支持HTTP</td><td>HTTP</td></tr><tr><td>技术文档</td><td>较详细</td><td>较少</td></tr><tr><td>文件附加属性（meta data）</td><td>支持</td><td>不支持</td></tr><tr><td>相同内容文件只保存一份</td><td>支持</td><td>不支持</td></tr><tr><td>下载文件时支持文件偏移量</td><td>支持</td><td>不支持</td></tr></tbody></table><h2 id="单机安装"><a href="#单机安装" class="headerlink" title="单机安装"></a>单机安装</h2><blockquote><p>版本：FastDFS 5.08</p></blockquote><p>Tracker 和 Storage 安装在一台机器上</p><h3 id="安装FastDFS依赖"><a href="#安装FastDFS依赖" class="headerlink" title="安装FastDFS依赖"></a>安装FastDFS依赖</h3><p>FastDFS是C语言开发的应用。安装必须使用make、cmake和gcc编译器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y make cmake gcc gcc-c++<br></code></pre></td></tr></table></figure><h3 id="安装FastDFS核心库"><a href="#安装FastDFS核心库" class="headerlink" title="安装FastDFS核心库"></a>安装FastDFS核心库</h3><blockquote><p>libfastcommon是从FastDFS 和FastDHT 中提取出来的公共C函数库</p></blockquote><p><a href="https://github.com/happyfish100/libfastcommon/releases">https://github.com/happyfish100/libfastcommon/releases</a></p><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">libfastmon没有提供make命令安装文件。使用的是shell脚本执行编译和安装</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">有固定的默认安装位置。在/usr/lib64和/usr/include/fastcommon两个目录中</span><br>./make.sh<br>./make.sh install<br></code></pre></td></tr></table></figure><h4 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h4><p>因为 FastDFS 主程序设置的 lib 目录是&#x2F;usr&#x2F;local&#x2F;lib，所以需要创建软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so<br>ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so<br>ln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so<br>ln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so<br></code></pre></td></tr></table></figure><h3 id="FastDFS主程序安装"><a href="#FastDFS主程序安装" class="headerlink" title="FastDFS主程序安装"></a>FastDFS主程序安装</h3><h4 id="上传并解压缩"><a href="#上传并解压缩" class="headerlink" title="上传并解压缩"></a>上传并解压缩</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tar -zxf FastDFS_v5.<span class="hljs-number">08</span>.tar.gz -C <span class="hljs-regexp">/usr/</span>local/fastdfs<br></code></pre></td></tr></table></figure><h4 id="编译安装-1"><a href="#编译安装-1" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./make.sh<br>./make.sh install<br></code></pre></td></tr></table></figure><p>安装后，FastDFS主程序所在位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/bin - 可执行文件所在位置。<br>/etc/fdfs - 配置文件所在位置。<br>/usr/lib64 - 主程序代码所在位置<br>/usr/include/fastdfs - 包含的一些插件组所在位置<br></code></pre></td></tr></table></figure><h3 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h3><h4 id="程序脚本"><a href="#程序脚本" class="headerlink" title="程序脚本"></a>程序脚本</h4><p>在&#x2F;etc&#x2F;init.d&#x2F;目录中，脚本文件是 <strong>fdfs-storaged</strong>和<strong>fdfs-trackerd</strong></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>配置文件在<code>/etc/fdfs/</code>目录中</p><ul><li><p>tracker.conf.sample - 跟踪器服务配置文件模板</p></li><li><p>storage.conf.sample - 存储服务器配置文件模板</p></li><li><p>client.conf.sample - FastDFS提供的命令行客户端配置文件模板。可以通过命令行测试FastDFS有效性。</p></li></ul><h3 id="Tracker-服务"><a href="#Tracker-服务" class="headerlink" title="Tracker 服务"></a>Tracker 服务</h3><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>复制一份模板配置文件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> /etc/fdfs<br><br>cp tracker.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">sample</span> tracker.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>打开 tracker.conf</p><p>修改 base_path 路径，base_path FastDFSTracker启动后使用的根目录，用来存放Tracker data和logs。</p><p><code>base_path=/home/yuqing/fastdfs -&gt; base_path=/var/data/fastdfs-tracker（自定义目录）</code></p><p>配置中的路径需要先创建好才能启动服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/var/</span>data/fastdfs-tracker<br></code></pre></td></tr></table></figure><h4 id="启动Tracker"><a href="#启动Tracker" class="headerlink" title="启动Tracker"></a>启动Tracker</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/fdfs_trackerd start<br></code></pre></td></tr></table></figure><p>启动成功后，配置文件中base_path指向的目录中出现FastDFS服务相关数据目录（data目录、logs目录）</p><h4 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> fdfs<br></code></pre></td></tr></table></figure><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/fdfs_trackerd stop<br></code></pre></td></tr></table></figure><h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/fdfs_trackerd restart<br></code></pre></td></tr></table></figure><h3 id="启动-Storage"><a href="#启动-Storage" class="headerlink" title="启动 Storage"></a>启动 Storage</h3><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/etc/</span>fdfs<br>cp storage.conf.sample storage.conf<br>mkdir -p <span class="hljs-regexp">/var/</span>data<span class="hljs-regexp">/fastdfs-storage/</span>base<br>mkdir -p <span class="hljs-regexp">/var/</span>data<span class="hljs-regexp">/fastdfs-storage/</span>store<br></code></pre></td></tr></table></figure><p>base_path&#x3D;&#x2F;home&#x2F;yuqing&#x2F;fastdfs -&gt; base_path&#x3D;&#x2F;var&#x2F;data&#x2F;fastdfs-storage&#x2F;base（自定义目录）</p><p>store_path0&#x3D;&#x2F;home&#x2F;yuqing&#x2F;fastdfs -&gt; store_path0&#x3D;&#x2F;var&#x2F;data&#x2F;fastdfs-storage&#x2F;store（自定义目录）</p><p>tracker_server&#x3D;192.168.150.11:22122 -&gt; tracker_server&#x3D;tracker服务IP:22122</p><ul><li>base_path - 基础路径。用于保存storage server基础数据内容和日志内容的目录。</li><li>store_path0 - 存储路径。是用于保存FastDFS中存储文件的目录，就是要创建256*256个子目录的位置。base_path和store_path0可以使用同一个目录。</li><li>tracker_server - 跟踪服务器位置。就是跟踪服务器的ip和端口。</li></ul><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>要求tracker服务必须已启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/fdfs_storaged start<br></code></pre></td></tr></table></figure><p>启动成功后，配置文件中base_path指向的目录中出现FastDFS服务相关数据目录（data目录、logs目录）</p><p>配置文件中的store_path0指向的目录中同样出现FastDFS存储相关数据录（data目录）</p><p>其中$store_path0&#x2F;data&#x2F;目录中默认创建若干子孙目录（两级目录层级总计256*256个目录），是用于存储具体文件数据的。</p><p>Storage服务器启动比较慢，因为第一次启动的时候，需要创建256*256个目录。</p><h4 id="查看服务状态-1"><a href="#查看服务状态-1" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/fdfs_storaged status<br></code></pre></td></tr></table></figure><h4 id="停止服务-1"><a href="#停止服务-1" class="headerlink" title="停止服务"></a>停止服务</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/fdfs_storaged stop<br></code></pre></td></tr></table></figure><h4 id="重启服务-1"><a href="#重启服务-1" class="headerlink" title="重启服务"></a>重启服务</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/fdfs_storaged restart<br></code></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><h4 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> /etc/fdfs<br>cp client.<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">sample</span> client.<span class="hljs-keyword">conf</span><br><br></code></pre></td></tr></table></figure><p>client.conf配置文件中主要描述客户端的行为，需要进行下述修改：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vi /etc/fdfs/client.conf<br><br><span class="hljs-attribute">base_path</span>=/home/yuqing/fastdfs -&gt; <span class="hljs-attribute">base_path</span>=/fastdfs/client （自定义目录）<br><br><span class="hljs-attribute">tracker_server</span>=192.168.150.11:22122 -&gt; <span class="hljs-attribute">tracker_server</span>=tracker服务IP:22122<br><br></code></pre></td></tr></table></figure><p>base_path - 就是客户端命令行执行过程时临时数据存储位置。</p><p> 创建自定义目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/fastdfs/</span>client<br></code></pre></td></tr></table></figure><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;fdfs_upload_file &#x2F;etc&#x2F;fdfs&#x2F;client.conf  &#x2F;要上传的文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@node03 data]# <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_upload_file /</span>etc<span class="hljs-regexp">/fdfs/</span>client.conf <span class="hljs-regexp">/root/i</span>nstall.log<br>group1<span class="hljs-regexp">/M00/</span><span class="hljs-number">00</span><span class="hljs-regexp">/00/</span>wKiWDV0xfqWAFe1OAAAib-i5DLU637.log<br></code></pre></td></tr></table></figure><p>上传结束后，返回group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;xxxxxxxxxx.xxx，检查storage服务结点中的$store_path0&#x2F;data&#x2F;00&#x2F;00&#x2F;目录中是否有上传的文件（一般情况上传的文件按顺序保存在$store_path0&#x2F;data&#x2F;00&#x2F;00&#x2F;目录中，不能完全保证）。</p><p>上传文件结果：group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;wKiWDV0xfqWAFe1OAAAib-i5DLU637.log</p><ul><li>组名：<strong>group1</strong>文件上传后所在的storage组名称，在文件上传成功后有storage服务器返回，需要客户端自行保存。</li><li>虚拟磁盘路径：<strong>M00</strong>  storage配置的虚拟路径，与磁盘选项store_path*对应。如果配置了store_path0则是M00，如果配置了store_path1则是M01，以此类推。</li><li>数据两级目录：**&#x2F;00&#x2F;00** storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。</li><li>文件名：<strong>wKiWDV0xfqWAFe1OAAAib-i5DLU637.log</strong></li></ul><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_delete_file /</span>etc<span class="hljs-regexp">/fdfs/</span>client.conf group1<span class="hljs-regexp">/M00/</span><span class="hljs-number">00</span><span class="hljs-regexp">/00/</span>wKiWDV0xfqWAFe1OAAAi<br>b-i5DLU637.log<br></code></pre></td></tr></table></figure><h3 id="Nginx组件"><a href="#Nginx组件" class="headerlink" title="Nginx组件"></a>Nginx组件</h3><p>如果FastDFS中保存的是图片信息。希望在WEB应用中可以直接访问FastDFS中的图片进行显示。如果操作？</p><p>安装Nginx是为了WEB应用中可以使用HTTP协议直接访问Storage服务中存储的文件。在storage结点所在服务器安装Nginx组件。</p><p>需要安装两部分内容。</p><p>Nginx应用，在安装nginx应用的时候，同时要在nginx中增加一个FastDFS的组件。</p><h4 id="fastdfs-nginx-module模块"><a href="#fastdfs-nginx-module模块" class="headerlink" title="fastdfs-nginx-module模块"></a>fastdfs-nginx-module模块</h4><p>上传并解压</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxf fastdfs-nginx-module_v1.<span class="hljs-number">16</span>.tar.gz<br></code></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/fastdfs/</span>fastdfs-nginx-module<span class="hljs-regexp">/src/</span>config<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">CORE_INCS</span>=<span class="hljs-string">&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;</span><br></code></pre></td></tr></table></figure><h4 id="编译安装Nginx"><a href="#编译安装Nginx" class="headerlink" title="编译安装Nginx"></a>编译安装Nginx</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>tengine<br>--add-module=<span class="hljs-regexp">/root/</span>fastdfs-nginx-module<span class="hljs-regexp">/src/</span><br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> &amp;&amp; <span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><h4 id="配置fastdfs-nginx-module"><a href="#配置fastdfs-nginx-module" class="headerlink" title="配置fastdfs-nginx-module"></a>配置fastdfs-nginx-module</h4><h5 id="拷贝配置文件"><a href="#拷贝配置文件" class="headerlink" title="拷贝配置文件"></a>拷贝配置文件</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/root/</span>fastdfs-nginx-module<span class="hljs-regexp">/src/m</span>od_fastdfs.conf <span class="hljs-regexp">/etc/</span>fdfs/<br></code></pre></td></tr></table></figure><h5 id="修改配置文件-mod-fastdfs-conf"><a href="#修改配置文件-mod-fastdfs-conf" class="headerlink" title="修改配置文件 mod_fastdfs.conf"></a>修改配置文件 mod_fastdfs.conf</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tracker_server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">2.109</span>:<span class="hljs-number">22122</span><br><span class="hljs-attr">url_have_group_name</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">store_path0</span>=/var/data/fastdfs-storage/store<br></code></pre></td></tr></table></figure><h5 id="拷贝http服务需要的配置"><a href="#拷贝http服务需要的配置" class="headerlink" title="拷贝http服务需要的配置"></a>拷贝http服务需要的配置</h5><p>复制FastDFS安装包中的两个配置文件（http.conf和mime.types）到&#x2F;etc&#x2F;fdfs目录中</p><h4 id="创建网络访问存储服务的软连接"><a href="#创建网络访问存储服务的软连接" class="headerlink" title="创建网络访问存储服务的软连接"></a>创建网络访问存储服务的软连接</h4><p>在上传文件到FastDFS后，FastDFS会返回group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;xxxxxxxxxx.xxx。其中group1是卷名，在mod_fastdfs.conf配置文件中已配置了url_have_group_name，以保证URL解析正确。</p><p>而其中的M00是FastDFS保存数据时使用的虚拟目录，需要将这个虚拟目录定位到真实数据目录上。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/var/</span>data<span class="hljs-regexp">/fastdfs-storage/</span>store<span class="hljs-regexp">/data/</span>  <span class="hljs-regexp">/var/</span>data<span class="hljs-regexp">/fastdfs-storage/</span>store<span class="hljs-regexp">/data/</span>M00<br></code></pre></td></tr></table></figure><h4 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">location ~ <span class="hljs-regexp">/group([0-9])/</span>M00 &#123;<br>ngx_fastdfs_module;<br>&#125;<br><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">150.11</span><span class="hljs-regexp">/group1/</span>M00<span class="hljs-regexp">/00/</span><span class="hljs-number">00</span>/wKiWC10xxc6AfHCKAAAib-i5DLU543_big.log<br></code></pre></td></tr></table></figure><h4 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">add_header </span>Content-<span class="hljs-keyword">Disposition </span><span class="hljs-string">&quot;attachment;filename=$arg_attname&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="JavaApi"><a href="#JavaApi" class="headerlink" title="JavaApi"></a>JavaApi</h2><p><a href="https://github.com/tobato/FastDFS_Client">https://github.com/tobato/FastDFS_Client</a></p><p>RAID</p><p>配置</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">fdfs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">so-timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1500</span><br>  <span class="hljs-attribute">connect-timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">600</span><br>  <span class="hljs-attribute">tracker-list</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">192.168.150.13:22122</span><br></code></pre></td></tr></table></figure><h3 id="上传文件-1"><a href="#上传文件-1" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 元数据</span><br>Set&lt;MetaData&gt; metaDataSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;MetaData&gt;();<br>metaDataSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MetaData</span>(<span class="hljs-string">&quot;Author&quot;</span>, <span class="hljs-string">&quot;yimingge&quot;</span>));<br>metaDataSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MetaData</span>(<span class="hljs-string">&quot;CreateDate&quot;</span>, <span class="hljs-string">&quot;2016-01-05&quot;</span>));<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">StorePath</span> <span class="hljs-variable">uploadFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    uploadFile = fc.uploadFile(filename.getInputStream(), filename.getSize(), getFileExtName(filename.getOriginalFilename()), metaDataSet);<br><br>    account.setPassword(password);<br>    account.setLocation(uploadFile.getPath());<br><br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>获取文件后缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getFileExtName</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> (name.substring(name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FilenameUtils</span>.</span></span>getExtension<br></code></pre></td></tr></table></figure><p><strong>返回结果带group</strong></p><p>uploadFile.getFullPath() ： group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;wKiWDV0u7ZKALKtNAAADP9sEx2w432.sql</p><p><strong>不带group</strong></p><p>uploadFile.getPath() ： M00&#x2F;00&#x2F;00&#x2F;wKiWDV0u7ZKALKtNAAADP9sEx2w432.sql</p><h3 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h3><p>配置</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">thumb-image:<br>  width: <span class="hljs-number">150</span><br>  height: <span class="hljs-number">150</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">uploadFile  = fc.upload<span class="hljs-constructor">ImageAndCrtThumbImage(<span class="hljs-params">filename</span>.<span class="hljs-params">getInputStream</span>()</span>, filename.get<span class="hljs-constructor">Size()</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FilenameUtils</span>.</span></span>get<span class="hljs-constructor">Extension(<span class="hljs-params">filename</span>.<span class="hljs-params">getOriginalFilename</span>()</span>), metaDataSet);<br></code></pre></td></tr></table></figure><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/down&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; down(HttpServletResponse resp) &#123;<br>    <span class="hljs-type">DownloadByteArray</span> <span class="hljs-variable">cb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadByteArray</span>();<br>    <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);<br>    headers.setContentDispositionFormData(<span class="hljs-string">&quot;attachment&quot;</span>, <span class="hljs-string">&quot;aaa.xx&quot;</span>);<br>    <span class="hljs-type">byte</span>[] bs = fc.downloadFile(<span class="hljs-string">&quot;group1&quot;</span>, <span class="hljs-string">&quot;M00/00/00/wKiWDV0vAb-AcOaYABf1Yhcsfws9181.xx&quot;</span>, cb);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bs,headers,HttpStatus.OK);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Linux/6.Openresty/"/>
    <url>/pumpkin/2021/09/02/DevOps/Linux/6.Openresty/</url>
    
    <content type="html"><![CDATA[<h1 id="Openresty"><a href="#Openresty" class="headerlink" title="Openresty"></a>Openresty</h1><p>Nginx是一个主进程配合多个工作进程的工作模式，每个进程由单个线程来处理多个连接。</p><p>在生产环境中，我们往往会把cpu内核直接绑定到工作进程上，从而提升性能。</p><h2 id="预编译安装"><a href="#预编译安装" class="headerlink" title="预编译安装"></a>预编译安装</h2><p>你可以在你的 CentOS 系统中添加 openresty 仓库，这样就可以便于未来安装或更新我们的软件包（通过 yum update 命令）。运行下面的命令就可以添加我们的仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install yum-utils<br>yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo<br></code></pre></td></tr></table></figure><p>然后就可以像下面这样安装软件包，比如 openresty：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y openresty<br></code></pre></td></tr></table></figure><p>如果你想安装命令行工具 resty，那么可以像下面这样安装 openresty-resty 包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y openresty-resty<br></code></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="在nginx中使用lua语法"><a href="#在nginx中使用lua语法" class="headerlink" title="在nginx中使用lua语法"></a>在nginx中使用lua语法</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">location /lua <span class="hljs-punctuation">&#123;</span><br>    default_type text/html;<br>    content_by_lua &#x27;<br>    ngx.say(<span class="hljs-string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span>);<br>&#x27;;<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="在nginx中使用lua配置文件"><a href="#在nginx中使用lua配置文件" class="headerlink" title="在nginx中使用lua配置文件"></a>在nginx中使用lua配置文件</h3><p>在nginx目录 <code>/usr/local/openresty/nginx</code>创建lua文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir lua_script<br>cd lua_script<br>vim test.lua<br></code></pre></td></tr></table></figure><p>test.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">ngx.say(<span class="hljs-string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><p>nginx.conf</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">location /lua <span class="hljs-punctuation">&#123;</span><br>    default_type text/html;<br>    content_by_lua_file lua_script/test.lua;<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>测试访问 <a href="http://127.0.0.1/lua">http://127.0.0.1/lua</a></p><h3 id="配置样例"><a href="#配置样例" class="headerlink" title="配置样例"></a>配置样例</h3><h4 id="获取Nginx-uri中的单一变量"><a href="#获取Nginx-uri中的单一变量" class="headerlink" title="获取Nginx uri中的单一变量"></a>获取Nginx uri中的单一变量</h4> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /nginx_var &#123;<br><br>    <span class="hljs-attribute">default_type</span> text/html;<br><br>    <span class="hljs-section">content_by_lua_block</span> &#123;<br><br>        ngx.say(ngx.var.arg_a)<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取Nginx-uri中的所有变量"><a href="#获取Nginx-uri中的所有变量" class="headerlink" title="获取Nginx uri中的所有变量"></a>获取Nginx uri中的所有变量</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> uri_args = ngx.req.get_uri_args()  <br><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(uri_args) <span class="hljs-keyword">do</span>  <br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">then</span>  <br><br>        ngx.say(k, <span class="hljs-string">&quot; : &quot;</span>, <span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(v, <span class="hljs-string">&quot;, &quot;</span>), <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><br>    <span class="hljs-keyword">else</span>  <br><br>        ngx.say(k, <span class="hljs-string">&quot;: &quot;</span>, v, <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><br>    <span class="hljs-keyword">end</span>  <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="获取Nginx请求头信息"><a href="#获取Nginx请求头信息" class="headerlink" title="获取Nginx请求头信息"></a>获取Nginx请求头信息</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> headers = ngx.req.get_headers()                         <br><br>ngx.say(<span class="hljs-string">&quot;Host : &quot;</span>, headers[<span class="hljs-string">&quot;Host&quot;</span>], <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><br>ngx.say(<span class="hljs-string">&quot;user-agent : &quot;</span>, headers[<span class="hljs-string">&quot;user-agent&quot;</span>], <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><br>ngx.say(<span class="hljs-string">&quot;user-agent : &quot;</span>, headers.user_agent, <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)<br><br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(headers) <span class="hljs-keyword">do</span>  <br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">then</span>  <br><br>        ngx.say(k, <span class="hljs-string">&quot; : &quot;</span>, <span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(v, <span class="hljs-string">&quot;,&quot;</span>), <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><br>    <span class="hljs-keyword">else</span>  <br><br>        ngx.say(k, <span class="hljs-string">&quot; : &quot;</span>, v, <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><br>    <span class="hljs-keyword">end</span>  <br><br><span class="hljs-keyword">end</span>  <br></code></pre></td></tr></table></figure><h4 id="获取post请求参数"><a href="#获取post请求参数" class="headerlink" title="获取post请求参数"></a>获取post请求参数</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua">ngx.req.read_body()  <br><br>ngx.say(<span class="hljs-string">&quot;post args begin&quot;</span>, <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><br><span class="hljs-keyword">local</span> post_args = ngx.req.get_post_args()  <br><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(post_args) <span class="hljs-keyword">do</span>  <br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">then</span>  <br><br>        ngx.say(k, <span class="hljs-string">&quot; : &quot;</span>, <span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(v, <span class="hljs-string">&quot;, &quot;</span>), <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><br>    <span class="hljs-keyword">else</span>  <br><br>        ngx.say(k, <span class="hljs-string">&quot;: &quot;</span>, v, <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><br>    <span class="hljs-keyword">end</span>  <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="http协议版本"><a href="#http协议版本" class="headerlink" title="http协议版本"></a>http协议版本</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">ngx.say(<span class="hljs-string">&quot;ngx.req.http_version : &quot;</span>, ngx.req.http_version(), <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">ngx.say(<span class="hljs-string">&quot;ngx.req.get_method : &quot;</span>, ngx.req.get_method(), <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br></code></pre></td></tr></table></figure><h4 id="原始的请求头内容"><a href="#原始的请求头内容" class="headerlink" title="原始的请求头内容"></a>原始的请求头内容</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">ngx.say(<span class="hljs-string">&quot;ngx.req.raw_header : &quot;</span>,  ngx.req.raw_header(), <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br></code></pre></td></tr></table></figure><h4 id="body内容体"><a href="#body内容体" class="headerlink" title="body内容体"></a>body内容体</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">ngx.say(<span class="hljs-string">&quot;ngx.req.get_body_data() : &quot;</span>, ngx.req.get_body_data(), <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="网络七层协议"><a href="#网络七层协议" class="headerlink" title="网络七层协议"></a>网络七层协议</h2><p><img src="https://img-blog.csdnimg.cn/20210106222050238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="读取百度网页源代码"><a href="#读取百度网页源代码" class="headerlink" title="读取百度网页源代码"></a>读取百度网页源代码</h2><p>第一步：建立连接</p><p>第二步：传输数据（Http协议，规范标准）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> /proc/<span class="hljs-variable">$</span><span class="hljs-variable">$</span>/fd<br>exec <span class="hljs-number">8</span>&lt;&gt; /dev/tcp/www.baidu.com/<span class="hljs-number">80</span><br><span class="hljs-built_in">echo</span> <span class="hljs-literal">-e</span> <span class="hljs-string">&#x27;GET /HTTP/1.0\n&#x27;</span> &gt;&amp; <span class="hljs-number">8</span><br><span class="hljs-built_in">cat</span> <span class="hljs-number">0</span>&lt;&amp; <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>传输控制层：TCP，UDP</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><blockquote><p>三次握手 &gt; 数据传输 &gt; 四次挥手</p><p>称为一个最小粒度 – 不可被分割</p></blockquote><p>TCP：面向连接的可靠的传输协议</p><p>TCP建立连接需要三次握手，三次握手之后双方才会在各自的内存开辟空间</p><p>一台服务器端口的数量：65535</p><p>对于服务器：通过一个端口号可以响应多个QPS</p><p>对于客户端：访问就要建立连接，即访问一个服务器就要占用一个端口</p><p><strong>三次握手</strong></p><ol><li><p>客户端向服务器发出连接请求报文</p></li><li><p>TCP服务器收到请求报文后，如果同意连接，则发出确认报文</p></li><li><p>TCP客户进程收到确认后，还要向服务器给出确认</p></li></ol><p><strong>四次挥手</strong></p><ol><li><p>TCP发送一个FIN(结束)，用来关闭客户到服务端的连接</p></li><li><p>服务端收到这个FIN，他发回一个ACK(确认)</p></li><li><p>服务端发送一个FIN(结束)到客户端，服务端关闭客户端的连接</p></li><li><p>客户端发送ACK(确认)报文确认，并将确认的序号+1，这样关闭完成</p></li></ol><p><strong>查看Socket连接</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netstat <span class="hljs-literal">-natp</span><br>Proto Recv<span class="hljs-literal">-Q</span> <span class="hljs-built_in">Send-Q</span> Local Address           Foreign Address         State       PID/Program name<br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">22</span>              <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:*               LISTEN      <span class="hljs-number">940</span>/sshd<br>tcp        <span class="hljs-number">0</span>     <span class="hljs-number">36</span> <span class="hljs-number">172.30</span>.<span class="hljs-number">143.74</span>:<span class="hljs-number">22</span>        <span class="hljs-number">115.198</span>.<span class="hljs-number">249.180</span>:<span class="hljs-number">51816</span>   ESTABLISHED <span class="hljs-number">5789</span>/sshd: root@pts<br></code></pre></td></tr></table></figure><p>Local Address：本地连接地址</p><p>Foregin Address：远程连接地址</p><p>0.0.0.0:22 相当于主进程，当有客户端请求成功，就抛出一个线程进行连接</p><p><strong>TCP在网络拥堵时的处理</strong></p><blockquote><p>堵塞控制是调节 TCP 连接上单次发送的分组数量的算法，通过增减单次发送量逐步调整，使之逼近当前网络的承载量</p></blockquote><p><a href="https://blog.csdn.net/itworld123/article/details/102983947">https://blog.csdn.net/itworld123/article/details/102983947</a></p><p>慢开始（slow - start）</p><p>堵塞避免（congestion avoidance）</p><p>快重传（fast retransmit）</p><p>快恢复（fast recovery）</p><h3 id="IP地址、子网掩码、网关"><a href="#IP地址、子网掩码、网关" class="headerlink" title="IP地址、子网掩码、网关"></a>IP地址、子网掩码、网关</h3><p>ip地址和子网掩码会进行按位与运算</p><p>举例说明</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">IPADDR=<span class="hljs-number">192.168</span>.<span class="hljs-number">150.14</span><br>NETMASK=<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-comment"># 按位与 运算后 ip = 192.168.150.0 ，你所处的网段是192.168.150</span><br></code></pre></td></tr></table></figure><p><strong>查看路由表</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">route <span class="hljs-literal">-n</span><br><br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>         <span class="hljs-number">172.30</span>.<span class="hljs-number">143.253</span>  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>         UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">169.254</span>.<span class="hljs-number">0.0</span>     <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>         <span class="hljs-number">255.255</span>.<span class="hljs-number">0.0</span>     U     <span class="hljs-number">1002</span>   <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">172.17</span>.<span class="hljs-number">0.0</span>      <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>         <span class="hljs-number">255.255</span>.<span class="hljs-number">0.0</span>     U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> docker0<br><span class="hljs-number">172.30</span>.<span class="hljs-number">128.0</span>    <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>         <span class="hljs-number">255.255</span>.<span class="hljs-number">240.0</span>   U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br></code></pre></td></tr></table></figure><p><code>gateway 0.0.0.0</code> 解释：同一局域网内无需通过下一跳通信，可以直接通信。</p><p>如果想访问一个外网地址 <code>69.135.169.121</code> 他会先与子网掩码做 <code>按位与运算</code>，做完运算再判断是否处在那个网段，只有匹配上了再进行转发。</p><p>如上述路由表，<code>69.135.169.121</code> 与运算后只能跟 <code>0.0.0.0</code> 所匹配，所以会找到这个网关跳出局域网转发出去。</p><p><strong>查看IP地址和网卡硬件地址的映射</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">arp <span class="hljs-literal">-a</span><br><br>? (<span class="hljs-number">172.17</span>.<span class="hljs-number">0.4</span>) at <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:<span class="hljs-built_in">ac</span>:<span class="hljs-number">11</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span> [<span class="hljs-type">ether</span>] on docker0<br>gateway (<span class="hljs-number">172.30</span>.<span class="hljs-number">143.253</span>) at ee:ff:ff:ff:ff:ff [<span class="hljs-type">ether</span>] on eth0<br>? (<span class="hljs-number">172.17</span>.<span class="hljs-number">0.3</span>) at <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:<span class="hljs-built_in">ac</span>:<span class="hljs-number">11</span>:<span class="hljs-number">00</span>:<span class="hljs-number">03</span> [<span class="hljs-type">ether</span>] on docker0<br>? (<span class="hljs-number">172.17</span>.<span class="hljs-number">0.5</span>) at <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:<span class="hljs-built_in">ac</span>:<span class="hljs-number">11</span>:<span class="hljs-number">00</span>:<span class="hljs-number">05</span> [<span class="hljs-type">ether</span>] on docker0<br>? (<span class="hljs-number">172.17</span>.<span class="hljs-number">0.2</span>) at <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:<span class="hljs-built_in">ac</span>:<span class="hljs-number">11</span>:<span class="hljs-number">00</span>:<span class="hljs-number">02</span> [<span class="hljs-type">ether</span>] on docker0<br></code></pre></td></tr></table></figure><p>结论：TCP&#x2F;IP协议，基于下一跳机制，IP是基于端点间，mac是基于节点间。</p><h3 id="浏览器同源策略与跨域"><a href="#浏览器同源策略与跨域" class="headerlink" title="浏览器同源策略与跨域"></a>浏览器同源策略与跨域</h3><h4 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h4><p>域名、协议、端口都会造成不同源</p><p>浏览器的同源策略是一种安全功能，同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。</p><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">、<span class="hljs-tag">&lt;<span class="hljs-name">img</span>&gt;</span> 、<span class="hljs-tag">&lt;<span class="hljs-name">iframe</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span>这些标签都可以发起跨域请求</span></span><br></code></pre></td></tr></table></figure><h5 id="jsonp跨域访问原理"><a href="#jsonp跨域访问原理" class="headerlink" title="jsonp跨域访问原理"></a>jsonp跨域访问原理</h5><p>此方法只能发起GET请求，通过jsonp发送的请求，会随带 cookie 一起发送。</p><h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><p>在浏览器中指定Origin来源，如果在服务器接受范围，请求则成功</p><p>CORS与JSONP的使用目的相同，但是比JSONP更强大。</p><p>JSONP只支持 GET 请求，CORS支持所有类型的 HTTP 请求。</p><p>JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><p>对称加密：DES, 3DES, AEC</p><p>非对称加密：公钥、私钥，公钥通过私钥生成</p><ol><li>明文 &gt; 公钥加密 &gt; 密文 &gt; 私钥解密 &gt; 明文</li><li>明文 &gt; 私钥加密 &gt; 密文 &gt; 公钥解密 &gt; 明文</li></ol><p><strong>流程</strong></p><p>第一次请求，服务器把公钥返回给客户端</p><p>第二次请求，客户端拿刚下发的公钥对数据加密，发送给服务器</p><p><strong>风险</strong></p><p>代理服务器拦截到这个请求，虽然解不开数据包，但是可以通过公钥加密发送一个伪请求</p><p>代理服务器还可以伪造公钥和私钥，浏览器无法判断公钥是不是真的服务器下发的</p><h3 id="证书和数字签名"><a href="#证书和数字签名" class="headerlink" title="证书和数字签名"></a>证书和数字签名</h3><blockquote><p>可以解决伪造公钥私钥的问题</p></blockquote><p>Https中，客户端在走80端口前会先走443端口来获取服务端下发的证书，并生成加密的随机数给服务端</p><p><img src="https://img-blog.csdnimg.cn/20210218212333383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在向443发完请求之后，向80端口发请求</p><p><img src="https://img-blog.csdnimg.cn/20210218205803436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/%E5%A4%A7%E5%9E%8B%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/%E5%A4%A7%E5%9E%8B%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="高并发系统设计"><a href="#高并发系统设计" class="headerlink" title="高并发系统设计"></a>高并发系统设计</h1><h2 id="性能瓶颈"><a href="#性能瓶颈" class="headerlink" title="性能瓶颈"></a>性能瓶颈</h2><p>关于性能的几个要点：IO，缓存，限流，资源隔离服务降级</p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ol><li>使用多线程的方式来处理请求</li><li>增加连接数：tomcat、mysql、redis等</li><li>服务无状态，便于横向扩展，扩机器</li><li>让服务能力对等（serviceUrl）</li><li>减少响应时间：异步、缓存、数据库优化、减少微服务调用链、使用长连接替代轮询</li></ol><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ol><li>客户端&#x2F;浏览器缓存：localStorage，sessionStorage</li><li>流量接入层缓存：HttpDNS、Waf、全网CDN</li><li>应用接入层缓存：Nginx静态文件缓存、Nginx动态文件缓存（Openresty + Lua）网关</li><li>应用缓存层：redis</li><li>应用业务层：JVM缓存，MQ</li><li>数据持久层：Mysql</li></ol><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><blockquote><p>在使用缓存和降级都无效的场景，如当达到阈值后限制接口调用频率，访问次数等，在出现服务不可用之前，提前把服务降级，只服务好一部分用户。</p></blockquote><p><strong>计数器算法</strong>：比如线程池大小，数据库连接池大小、nginx连接数等都属于计数器算法</p><p><strong>漏桶算法</strong>：按照固定速率流出请求，流入速率不控制，当桶内请求达到阈值，新请求则被拒绝</p><p><strong>令牌桶算法</strong>：大小固定的令牌桶可自行以恒定的速率源源不断地产生令牌。如果令牌不被消耗，或者被消耗的速度小于产生的速度，令牌就会不断地增多，直到把桶填满。</p><p><strong>并发限流</strong>：设置系统阈总的qps数，Tomcat中配置</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf">acceptCount 响应连接数<br><span class="hljs-keyword">max</span>Connections 瞬时最大连接数<br><span class="hljs-keyword">max</span>Threads 最大线程数<br></code></pre></td></tr></table></figure><p><strong>接口限流</strong></p><p>接口总数：可以使用atomic类或者semaphore进行限流</p><p>接口时间窗口：可以使用<code>Guava Cache</code>，类似于一个<code>ConcurrentMap</code>，但不完全一样</p><p>最基础的不同是<code>ConcurrentMap</code>保存所有的元素知道它们被明确删除,<code>Guava Cache</code>可以配置自动过期</p><h3 id="guava实现"><a href="#guava实现" class="headerlink" title="guava实现"></a>guava实现</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>28.1-jre<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>LoadingCache</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LoadingCache&lt;Long, AtomicLong&gt; counter = CacheBuilder.newBuilder()<br>    .expireAfterWrite(<span class="hljs-number">2</span>, TimeUnit.SECONDS)<br>    .removalListener(notification -&gt; &#123;<br>        <span class="hljs-comment">// 缓存移除的时候会触发这个监听器</span><br>    &#125;)<br>    .build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheLoader</span>&lt;Long, AtomicLong&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> AtomicLong <span class="hljs-title function_">load</span><span class="hljs-params">(Long second)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;load:&quot;</span> + second);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;);<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException &#123;<br>    <span class="hljs-comment">// 使用当前的秒级时间作为key</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">currSecond</span> <span class="hljs-operator">=</span> System.currentTimeMillis() / <span class="hljs-number">1000</span>;<br>    <span class="hljs-comment">// 模拟执行100次</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (;;)&#123;<br>            <span class="hljs-comment">// 每秒最多放行10个请求，否则自旋</span><br>            <span class="hljs-keyword">if</span> (counter.get(currSecond).incrementAndGet() &lt;= <span class="hljs-number">10</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>令牌桶实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 每秒产生2个令牌</span><br><span class="hljs-type">RateLimiter</span> <span class="hljs-variable">rateLimiter</span> <span class="hljs-operator">=</span> RateLimiter.create(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>    <span class="hljs-comment">// 阻塞的方式获取令牌，返回获取到令牌的时间</span><br>    System.out.println(rateLimiter.acquire());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="资源隔离服务降级"><a href="#资源隔离服务降级" class="headerlink" title="资源隔离服务降级"></a>资源隔离服务降级</h2><blockquote><p>某个服务出现故障时，可以隔离故障，阻止传播，防止雪崩</p></blockquote><p>线程隔离：线程池隔离、信号量隔离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;uri, 线程数&gt; map;<span class="hljs-comment">// 根据uri分配对应线程数</span><br>ThreadPoll(线程数) poll;<span class="hljs-comment">// 根据线程数创建线程池</span><br><span class="hljs-keyword">if</span> (线程满了)<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br></code></pre></td></tr></table></figure><p> 服务熔断：计数，连续失败次数达到阈值后熔断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">count++;<br><span class="hljs-keyword">if</span> (count == <span class="hljs-number">10</span>)&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>进程隔离：cpu、内存这些资源可以通过不同的虚拟机进程来做隔离，如集群</p><p>集群隔离：如秒杀等计算IO高的服务需要独立拆分模块</p><p>机房隔离异地多活：将服务器整体建立副本在多机房做冷备份，使用DNS，HttpDNS，负载均衡等技术快速切换</p><p>读写分离：mysql，redis等数据存储服务集群化</p><p>动静分离：将静态资源从原有服务中隔离出来</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="亿级流量多级缓存"><a href="#亿级流量多级缓存" class="headerlink" title="亿级流量多级缓存"></a>亿级流量多级缓存</h1><h2 id="第一级缓存：DNS域名解析"><a href="#第一级缓存：DNS域名解析" class="headerlink" title="第一级缓存：DNS域名解析"></a>第一级缓存：DNS域名解析</h2><p>客户端访问一个域名的时候，会去DNS服务器上获取域名对应的IP并缓存到本地，一个域名可以对应多个IP</p><p><img src="https://img-blog.csdnimg.cn/20210113220847835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="第二级缓存：Nginx缓存"><a href="#第二级缓存：Nginx缓存" class="headerlink" title="第二级缓存：Nginx缓存"></a>第二级缓存：Nginx缓存</h2><h3 id="Nginx全局共享内存缓存"><a href="#Nginx全局共享内存缓存" class="headerlink" title="Nginx全局共享内存缓存"></a>Nginx全局共享内存缓存</h3><blockquote><p>使用 lua 访问 nginx 的内存，线程越多，性能损耗越大</p><p>不是特别高并发的情况下可以用 shared_dict</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">lua_shared_dict</span> shared_data <span class="hljs-number">1m</span>;<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> shared_data = ngx.shared.shared_data  <br><br><span class="hljs-keyword">local</span> i = shared_data:get(<span class="hljs-string">&quot;i&quot;</span>)  <br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> i <span class="hljs-keyword">then</span>  <br>    i = <span class="hljs-number">1</span>  <br>    shared_data:set(<span class="hljs-string">&quot;i&quot;</span>, i)  <br>    ngx.say(<span class="hljs-string">&quot;lazy set i &quot;</span>, i, <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)  <br><span class="hljs-keyword">end</span>  <br>i = shared_data:incr(<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-number">1</span>)  <br>ngx.say(<span class="hljs-string">&quot;i=&quot;</span>, i, <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="lua-resty-lrucache"><a href="#lua-resty-lrucache" class="headerlink" title="lua-resty-lrucache"></a>lua-resty-lrucache</h3><p>Lua 实现的一个简单的 LRU 缓存，适合在 Lua 空间里直接缓存较为复杂的 Lua 数据结构：</p><p>它相比 ngx_lua 共享内存字典可以省去较昂贵的序列化操作，相比 memcached 这样的外部服务又能省去较昂贵的 socket 操作</p><p>lrucache 有两种实现</p><ul><li>resty.lrucache<ul><li>适合用来缓存命中率高或读操作远远大于写操作的缓存业务</li></ul></li><li>resty.lrucache.pureffi<ul><li>适合用来缓存命中率低或需要对key进行频繁增、删操作的缓存业务</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> lrucache = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;resty.lrucache&quot;</span><br><span class="hljs-keyword">local</span> c, err = lrucache.new(<span class="hljs-number">200</span>)<br>c:set(<span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-number">32</span>)<br>    c:set(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-number">56</span>)<br>    ngx.say(<span class="hljs-string">&quot;dog: &quot;</span>, c:get(<span class="hljs-string">&quot;dog&quot;</span>))<br>    ngx.say(<span class="hljs-string">&quot;cat: &quot;</span>, c:get(<span class="hljs-string">&quot;cat&quot;</span>))<br><br>    c:set(<span class="hljs-string">&quot;dog&quot;</span>, &#123; age = <span class="hljs-number">10</span> &#125;, <span class="hljs-number">0.1</span>)  <span class="hljs-comment">-- expire in 0.1 sec</span><br>    c:delete(<span class="hljs-string">&quot;dog&quot;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://github.com/openresty/lua-resty-lrucache#name">https://github.com/openresty/lua-resty-lrucache#name</a></p><h3 id="URL一致性哈希负载均衡"><a href="#URL一致性哈希负载均衡" class="headerlink" title="URL一致性哈希负载均衡"></a>URL一致性哈希负载均衡</h3><p>nginx url_hash：Nginx第三方模块，在转发请求时如果后端服务器宕机，会导致503错误</p><p>有针对性的对url进行一致性hash 定向负载到后端Nginx </p><p>提高Nginx缓存系统命中率</p><h3 id="Kong-基于Openresty的流量网关"><a href="#Kong-基于Openresty的流量网关" class="headerlink" title="Kong 基于Openresty的流量网关"></a>Kong 基于Openresty的流量网关</h3><p><a href="https://konghq.com/">https://konghq.com/</a></p><p><a href="https://github.com/kong/kong">https://github.com/kong/kong</a></p><p>Kong 基于 OpenResty，是一个云原生、快速、可扩展、分布式的微服务抽象层（Microservice Abstraction Layer），也叫 API 网关（API Gateway），在 Service Mesh 里也叫 API 中间件（API Middleware）。</p><p>Kong 开源于 2015 年，核心价值在于高性能和扩展性。从全球 5000 强的组织统计数据来看，Kong 是现在依然在维护的，在生产环境使用最广泛的 API 网关。</p><p>Kong 宣称自己是世界上最流行的开源微服务 API 网关（The World’s Most Popular Open Source Microservice API Gateway）。</p><p>核心优势：</p><ul><li><p>可扩展：可以方便的通过添加节点水平扩展，这意味着可以在很低的延迟下支持很大的系统负载。</p></li><li><p>模块化：可以通过添加新的插件来扩展 Kong 的能力，这些插件可以通过 RESTful Admin API 来安装和配置。</p></li><li><p>在任何基础架构上运行：Kong 可以在任何地方都能运行，比如在云或混合环境中部署 Kong，单个或全球的数据中心。</p></li></ul><h2 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h2><h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h3><p>http1.1支持</p><p>在HTTP协议中If-Modified-Since和If-None-Match分别对应Last-Modified和ETag</p><p>Entity Tag 的缩写，中文译过来就是实体标签的意思.</p><p>HTTP中并没有指定如何生成ETag，哈希是比较理想的选择。</p><p>在计算Etag的时候，会产生CPU的耗费，所以也可以用时间戳，但这样直接使用Last-Modified即可。</p><p>ETag 用来校验用户请求的资源是否有变化，作用和lastmodified很像，区别是lastmodified精确到秒，ETag可以用hash算法来生成更精确的比对内容。</p><p>当用户首次请求资源的时候返回给用户数据和200状态码并生成ETag，再次请求的时候服务器比对ETag，没有发生变化的话返回304</p><h3 id="Cache-Control、-Last-Modified-、Expires"><a href="#Cache-Control、-Last-Modified-、Expires" class="headerlink" title="Cache-Control、 Last-Modified 、Expires"></a>Cache-Control、 Last-Modified 、Expires</h3><p>Last-Modified : 表示文档最后修改时间，浏览器在访问重复资源的时候会发送IF-Modified-Since 携带此时间去服务器验证，如果时间匹配则返回304，浏览器加载本地资源</p><p>Expires： 文档过期时间，在浏览器内可以通过这个时间来判断是否发送请求</p><p>Cache-Control ：http1.1的规范，使用max-age表示文件可以在浏览器中缓存的时间以秒为单位</p><p>Cache-Control：缓存头，分为响应头和请求头</p><table><thead><tr><th>标记</th><th>类型</th><th>功能</th></tr></thead><tbody><tr><td>public</td><td>响应头</td><td>响应的数据可以被缓存，客户端和代理层都可以缓存</td></tr><tr><td>private</td><td>响应头</td><td>可私有缓存，客户端可以缓存，代理层不能缓存（CDN，proxy_pass）</td></tr><tr><td>no-cache</td><td>请求头</td><td>可以使用本地缓存，但是必须发送请求到服务器回源验证</td></tr><tr><td>no-store</td><td>请求和响应</td><td>应禁用缓存</td></tr><tr><td>max-age</td><td>请求和响应</td><td>文件可以在浏览器中缓存的时间以秒为单位</td></tr><tr><td>s-maxage</td><td>请求和响应</td><td>用户代理层缓存，CDN下发，当客户端数据过期时会重新校验</td></tr><tr><td>max-stale</td><td>请求和响应</td><td>缓存最大使用时间，如果缓存过期，但还在这个时间范围内则可以使用缓存数据</td></tr><tr><td>min-fresh</td><td>请求和响应</td><td>缓存最小使用时间，</td></tr><tr><td>must-revalidate</td><td>请求和响应</td><td>当缓存过期后，必须回源重新请求资源。比no-cache更严格。因为HTTP 规范是允许客户端在某些特殊情况下直接使用过期缓存的，比如校验请求发送失败的时候。那么带有must-revalidate的缓存必须校验，其他条件全部失效。</td></tr><tr><td>proxy-revalidate</td><td>请求和响应</td><td>和must-revalidate类似，只对CDN这种代理服务器有效，客户端遇到此头，需要回源验证</td></tr><tr><td>stale-while-revalidate</td><td>响应</td><td>表示在指定时间内可以先使用本地缓存，后台进行异步校验</td></tr><tr><td>stale-if-error</td><td>响应</td><td>在指定时间内，重新验证时返回状态码为5XX的时候，可以用本地缓存</td></tr><tr><td>only-if-cached</td><td>响应</td><td>那么只使用缓存内容，如果没有缓存 则504 getway timeout</td></tr></tbody></table><p>在浏览器和服务器端验证文件是否过期的时候，浏览器在二次请求的时候会携带IF-Modified-Since属性</p><h3 id="Cache-Control和ETag的区别"><a href="#Cache-Control和ETag的区别" class="headerlink" title="Cache-Control和ETag的区别"></a>Cache-Control和ETag的区别</h3><p>Cache-Control直接是通过不请求来实现，而ETag是会发请求的，只不过服务器根据请求的东西的内容有无变化来判断是否返回请求的资源</p><p>java实现Cache-Control Last-Modified</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheController</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">MyFile</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> MyFile.getInstance();<br><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">last</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value=&quot;IF-Modified-Since&quot;,required = false)</span> Date ifModifiedSince)</span> &#123;<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;EEE, d MMM yyyy HH:mm:ss &#x27;GMT&#x27;&quot;</span>, Locale.US);<br><span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(now);<span class="hljs-comment">// 系统当前时间</span><br><span class="hljs-type">long</span> <span class="hljs-variable">maxAge</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<span class="hljs-comment">// 缓存时间</span><br><span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != ifModifiedSince &amp;&amp; ifModifiedSince.getTime() == file.getLastModified() ) &#123;<br>System.out.println(<span class="hljs-number">304</span>);<br>&#125;<br>headers.add(<span class="hljs-string">&quot;Date&quot;</span>, simpleDateFormat.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(now)));<br>headers.add(<span class="hljs-string">&quot;Expires&quot;</span>, simpleDateFormat.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(now + maxAge * <span class="hljs-number">1000</span>)));<br>headers.add(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;max-age=&quot;</span>+maxAge);<br>headers.add(<span class="hljs-string">&quot;Last-Modified&quot;</span>, simpleDateFormat.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(file.getLastModified())));<br><span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;a href =&#x27;&#x27;&gt;hi点我&lt;/a&gt;&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(body,headers,HttpStatus.OK);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFile</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> lastModified;<br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> expireTime;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> MyFile file ;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">MyFile</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;file...&quot;</span>;<br><span class="hljs-built_in">this</span>.lastModified = System.currentTimeMillis() /<span class="hljs-number">1000</span> * <span class="hljs-number">1000</span>;<br><span class="hljs-built_in">this</span>.expireTime = <span class="hljs-number">10</span> *<span class="hljs-number">1000</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MyFile <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(file==<span class="hljs-literal">null</span>) &#123;<br>file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFile</span>();<br>&#125;<br><span class="hljs-keyword">return</span> file;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="强制刷新"><a href="#强制刷新" class="headerlink" title="强制刷新"></a>强制刷新</h3><p>在强制刷新的时候浏览器就不在发送<code>IF-Modified-Since</code>了，而会带上<code>from disk cache &amp; from memory cache</code></p><p>可以验证请求是否使用了浏览器缓存和是否发送请求给服务器端。</p><p>当点击链接、引入外部资源和浏览器的前进后退的时候。</p><p>from memory cache：这个资源是直接从内存中拿到的，<strong>不会请求服务器</strong>一般已经加载过该资源且缓存在了内存当中，当关闭该页面时，此资源就被内存释放掉了，再次重新打开相同页面时不会出现from memory cache的情况</p><p>from disk cache：是从磁盘当中取出的，也是在已经在之前的某个时间加载过该资源，<strong>不会请求服务器</strong>但是此资源不会随着该页面的关闭而释放掉，因为是存在硬盘当中的，下次打开仍会from disk cache</p><p>Age：是CDN添加的属性表示在CDN中缓存了多少秒</p><p>via：用来标识CDN缓存经历了哪些服务器，缓存是否命中，使用的协议</p><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>漏桶算法、令牌桶算法、计数器</p><h3 id="Tomcat限流"><a href="#Tomcat限流" class="headerlink" title="Tomcat限流"></a>Tomcat限流</h3><p>server.xml 配置文件中的 Connector 节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span> <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> <span class="hljs-attr">maxConnections</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">acceptCount</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">maxThreads</span>=<span class="hljs-string">&quot;400&quot;</span> /&gt;</span><br><br>maxThreads：tomcat能并发处理的最大线程数<br>acceptCount：tomcat起动的线程数达到最大时，接受排队的请求个数，默认值为100 <br>maxConnections：瞬时最大连接数，超出会排队等待<br></code></pre></td></tr></table></figure><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名由两部分组成，name 和 domain，比如 baidu.com，baidu 是名，com是域</p><p>二级域名：a.baidu.com</p><p>三级域名：b.a.baidu.com</p><p>以此类推</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/README/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/README/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/WebSocket/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/WebSocket/</url>
    
    <content type="html"><![CDATA[<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><h2 id="WebSocket-Server"><a href="#WebSocket-Server" class="headerlink" title="WebSocket Server"></a>WebSocket Server</h2><blockquote><p>基于 Spring Boot 的 WebSocket Server</p></blockquote><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Boot Web --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring Boot Web Socket --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>WebSocket 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title function_">serverEndpointExporter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerEndpointExporter</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>WebSocket 服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 广播服务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ServerEndpoint(&quot;/multicast&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketMulticastServer</span> &#123;<br><br>    <span class="hljs-comment">/** 记录当前在线连接数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/** 存放所有在线的客户端 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Session&gt; clients = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接建立成功调用的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnOpen</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(Session session)</span> &#123;<br>        onlineCount.incrementAndGet(); <span class="hljs-comment">// 在线数加1</span><br>        clients.put(session.getId(), session);<br>        log.info(<span class="hljs-string">&quot;有新连接加入：&#123;&#125;，当前在线人数为：&#123;&#125;&quot;</span>, session.getId(), onlineCount.get());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接关闭调用的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnClose</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">(Session session)</span> &#123;<br>        onlineCount.decrementAndGet(); <span class="hljs-comment">// 在线数减1</span><br>        clients.remove(session.getId());<br>        log.info(<span class="hljs-string">&quot;有一连接关闭：&#123;&#125;，当前在线人数为：&#123;&#125;&quot;</span>, session.getId(), onlineCount.get());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收到客户端消息后调用的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     *            客户端发送过来的消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnMessage</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message, Session session)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;服务端收到客户端[&#123;&#125;]的消息:&#123;&#125;&quot;</span>, session.getId(), message);<br>        <span class="hljs-built_in">this</span>.sendMessage(message, session);<br>    &#125;<br><br>    <span class="hljs-meta">@OnError</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Session session, Throwable error)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;发生错误&quot;</span>, error);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 广播消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 消息内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message, Session fromSession)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Session&gt; sessionEntry : clients.entrySet()) &#123;<br>            <span class="hljs-type">Session</span> <span class="hljs-variable">toSession</span> <span class="hljs-operator">=</span> sessionEntry.getValue();<br>            <span class="hljs-comment">// 排除掉自己</span><br>            <span class="hljs-keyword">if</span> (!fromSession.getId().equals(toSession.getId())) &#123;<br>                log.info(<span class="hljs-string">&quot;服务端给客户端[&#123;&#125;]发送消息&#123;&#125;&quot;</span>, toSession.getId(), message);<br>                toSession.getAsyncRemote().sendText(message);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WebSocket-Client-基于-Js"><a href="#WebSocket-Client-基于-Js" class="headerlink" title="WebSocket Client (基于 Js)"></a>WebSocket Client (基于 Js)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My WebSocket<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send()&quot;</span>&gt;</span>Send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;closeWebSocket()&quot;</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> websocket = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//判断当前浏览器是否支持WebSocket, 主要此处要更换为自己的地址</span></span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;WebSocket&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>) &#123;</span><br><span class="language-javascript">        websocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:18092/multicast&quot;</span>);</span><br><span class="language-javascript">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Not support websocket&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//连接发生错误的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-string">&quot;error&quot;</span>);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//连接成功建立的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//setMessageInnerHTML(&quot;open&quot;);</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//接收到消息的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">data</span>)</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(event.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//连接关闭的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-string">&quot;close&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onbeforeunload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        websocket.<span class="hljs-title function_">close</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//将消息显示在网页上</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-params">innerHTML</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;message&#x27;</span>).<span class="hljs-property">innerHTML</span> += innerHTML + <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//关闭连接</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">closeWebSocket</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        websocket.<span class="hljs-title function_">close</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//发送消息</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text&#x27;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        websocket.<span class="hljs-title function_">send</span>(message);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="WebSocket-Client-基于-Java"><a href="#WebSocket-Client-基于-Java" class="headerlink" title="WebSocket Client (基于 Java)"></a>WebSocket Client (基于 Java)</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Web Socket Client --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.java-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Java-WebSocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketClientTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ws://localhost:18092/multicast&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">WsClient</span> <span class="hljs-variable">wsClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WsClient</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(URL));<br>        wsClient.connect();<br>        <span class="hljs-comment">// 判断是否连接成功，未成功后面发送消息时会报错</span><br>        <span class="hljs-keyword">while</span> (!wsClient.getReadyState().equals(WebSocket.READYSTATE.OPEN)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;连接中···请稍后&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>        wsClient.send(<span class="hljs-string">&quot;Java WebSocket Client&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;消息发送成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Slf4j</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSocketClient</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">WsClient</span><span class="hljs-params">(URI serverUri)</span> &#123;<br>            <span class="hljs-built_in">super</span>(serverUri);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(ServerHandshake serverHandshake)</span> &#123;<br>            log.info(<span class="hljs-string">&quot;握手成功&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String s)</span> &#123;<br>            log.info(<span class="hljs-string">&quot;收到消息：&#123;&#125;&quot;</span>, s);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">(<span class="hljs-type">int</span> i, String s, <span class="hljs-type">boolean</span> b)</span> &#123;<br>            log.info(<span class="hljs-string">&quot;连接关闭&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Exception e)</span> &#123;<br>            log.info(<span class="hljs-string">&quot;发生错误&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><p>当一个客户端发消息时，其它所有客户端都可以接收消息</p><p><img src="https://img-blog.csdnimg.cn/20210411182945969.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/RBAC%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/RBAC%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="RBAC-权限设计"><a href="#RBAC-权限设计" class="headerlink" title="RBAC 权限设计"></a>RBAC 权限设计</h1><h2 id="RBAC-概述"><a href="#RBAC-概述" class="headerlink" title="RBAC 概述"></a>RBAC 概述</h2><p>RBAC模型（Role-Based Access Control：基于角色的访问控制）</p><p>权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。</p><p>权限：具备操作某个事务的能力</p><p>角色：一系列权限的集合</p><h2 id="RABC-数据库表设计"><a href="#RABC-数据库表设计" class="headerlink" title="RABC 数据库表设计"></a>RABC 数据库表设计</h2><p><img src="https://img-blog.csdnimg.cn/20210327205902709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Ohters/Maven/"/>
    <url>/pumpkin/2021/09/02/Ohters/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven-加载顺序"><a href="#Maven-加载顺序" class="headerlink" title="Maven 加载顺序"></a>Maven 加载顺序</h2><p>从左到右依次</p><p><img src="https://img-blog.csdnimg.cn/20200623083158201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfd2Zlbmc=,size_16,color_FFFFFF,t_70" alt="img"></p><ol><li>项目中的pom.xml文件中的两种引用</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://$&#123;nexus.url&#125;/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过使用profiles选择local 生效 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>local<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://$&#123;nexus.url&#125;/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开发环境设置releases版本也更新本地jar --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span> <br>          <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>maven 中的setting.xml文件中的两种引用</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>thirdparty<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>internal nexus repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://xxxx/repository/sit-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>internal nexus repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>pro<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://xxxx/repository/sit-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Snapshot-Release"><a href="#Snapshot-Release" class="headerlink" title="Snapshot Release"></a>Snapshot Release</h2><p>快照版本和正式版本的主要区别在于，本地获取这些依赖的机制有所不同。</p><p>构建正式版本（release）时，第一次构建的时候会把该包从远程仓库中下载到本地仓库缓存，以后再次构建都不会去访问远程仓库了，你只有在重新发布的时候升级版本，才能使用到你最新添加的功能。</p><p>构建快照版本（snapshots）时，会优先去下载远程仓库最新的包，Maven的Repository的时候中有个配置项，可以配置对于SNAPSHOT版本向远程仓库中查找的频率。频率共有四种，分别是always、daily、interval、never。</p><ul><li><p>always：每次都去远程仓库查看是否有更新</p></li><li><p>daily：只在第一次的时候查看是否有更新，当天的其它时候则不会查看</p></li><li><p>interval：允许设置一个分钟为单位的间隔时间，在这个间隔时间内只会去远程仓库中查找一次</p></li><li><p>never：不会去远程仓库中查找（和正式版本的行为一样）</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过使用profiles选择local 生效 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>local<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://$&#123;nexus.url&#125;/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开发环境设置releases版本更新本地jar --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span> <br>          <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开发环境设置snapshots版本更新本地jar --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Maven-打包源码"><a href="#Maven-打包源码" class="headerlink" title="Maven 打包源码"></a>Maven 打包源码</h2><p>在 pom.xml 中添加以下内容，可以在maven生成jar的同时生成sources包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 绑定source插件到Maven的生命周期,并在生命周期后执行绑定的source的goal --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 绑定source插件到Maven的生命周期 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br><span class="hljs-comment">&lt;!--在生命周期后执行绑定的source插件的goals --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar-no-fork<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另一种写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Source attach plugin --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-sources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Maven-跳过测试"><a href="#Maven-跳过测试" class="headerlink" title="Maven 跳过测试"></a>Maven 跳过测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install -Dmaven.test.skip=true<br></code></pre></td></tr></table></figure><h2 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h2><h3 id="Repository-和-Mirror"><a href="#Repository-和-Mirror" class="headerlink" title="Repository 和 Mirror"></a>Repository 和 Mirror</h3><p>Mirror可以作为Repositoty的加速镜像</p><p>可以通过 <code>mirrorOf</code> 指定需要加速的仓库</p><p>例：</p><p><code>settings.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>rep1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https:/test1.org/maven/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>rep2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://test2.com/releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Pom样例"><a href="#Pom样例" class="headerlink" title="Pom样例"></a>Pom样例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 打包时上传源码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-sources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar-no-fork<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置远程私有仓库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus Release Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>&#123;Your repository&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus Snapshot Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>&#123;Your repository&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/Ohters/Lua/"/>
    <url>/pumpkin/2021/09/02/Ohters/Lua/</url>
    
    <content type="html"><![CDATA[<h1 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h1><h2 id="Lua-程序设计"><a href="#Lua-程序设计" class="headerlink" title="Lua 程序设计"></a>Lua 程序设计</h2><p>Lua 是由巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于1993年开发的一种轻量、小巧的脚本语言，用标准 C 语言编写，其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p>官网：<a href="http://www.lua.org/">http://www.lua.org/</a></p><p>Redis 在 2.6 版本中推出了脚本功能，允许开发者将 Lua 语言编写的脚本传到 Redis 中执行。使用 Lua 脚本的优点有如下几点:</p><ul><li><p>减少网络开销：本来需要多次请求的操作，可以一次请求完成，从而节约网络开销；</p></li><li><p>原子操作：Redis 会将整个脚本作为一个整体执行，中间不会执行其它命令；</p></li><li><p>复用：客户端发送的脚本会存储在 Redis 中，从而实现脚本的复用。</p></li></ul><h2 id="Lua-基本语法"><a href="#Lua-基本语法" class="headerlink" title="Lua 基本语法"></a>Lua 基本语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 两个减号是行注释</span><br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 这是块注释</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> --]]</span><br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>Lua的数字只有double型，64bits</p><p>你可以以如下的方式表示数字</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua">num = <span class="hljs-number">1024</span><br><br>num = <span class="hljs-number">3.0</span><br><br>num = <span class="hljs-number">3.1416</span><br><br>num = <span class="hljs-number">314.16e-2</span><br><br>num = <span class="hljs-number">0.31416E1</span><br><br>num = <span class="hljs-number">0xff</span><br><br>num = <span class="hljs-number">0x56</span><br></code></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>可以用单引号，也可以用双引号</p><p>也可以使用转义字符‘\n’ （换行）， ‘\r’ （回车）， ‘\t’ （横向制表）， ‘\v’ （纵向制表）， ‘\’ （反斜杠）， ‘\”‘ （双引号）， 以及 ‘\” （单引号)等等</p><p>下面的四种方式定义了完全相同的字符串（其中的两个中括号可以用于定义有换行的字符串）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = <span class="hljs-string">&#x27;alo\n123&quot;&#x27;</span><br><br><span class="hljs-attr">a</span> = <span class="hljs-string">&quot;alo\n123\&quot;&quot;</span><br><br><span class="hljs-attr">a</span> = <span class="hljs-string">&#x27;\97lo\10\04923&quot;&#x27;</span><br><br><span class="hljs-attr">a</span> = [[alo<br><br><span class="hljs-number">123</span><span class="hljs-string">&quot;]]</span><br></code></pre></td></tr></table></figure><h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><p>C语言中的NULL在Lua中是nil，比如你访问一个没有声明过的变量，就是nil</p><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>只有nil和false是 false</p><p>数字0，‘’空字符串（’\0’）都是true</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>lua中的变量如果没有特殊说明，全是全局变量，那怕是语句块或是函数里。</p><p>变量前加local关键字的是局部变量。</p><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">while</span> <span class="hljs-number">0</span> &lt;= <span class="hljs-number">10</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(i)<br>i = i +<span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">local</span> age = <span class="hljs-number">140</span><br><span class="hljs-keyword">local</span> sex = <span class="hljs-string">&#x27;Male&#x27;</span><br>  <span class="hljs-keyword">if</span> age == <span class="hljs-number">40</span> <span class="hljs-keyword">and</span> sex ==<span class="hljs-string">&quot;Male&quot;</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; 男人四十一枝花 &quot;</span>)<br>  <span class="hljs-keyword">elseif</span> age &gt; <span class="hljs-number">60</span> <span class="hljs-keyword">and</span> sex ~=<span class="hljs-string">&quot;Female&quot;</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;old man without country!&quot;</span>)<br>  <span class="hljs-keyword">elseif</span> age &lt; <span class="hljs-number">20</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">io</span>.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;too young, too naive!\n&quot;</span>)<br>  <span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your age is &quot;</span>..age)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 调用</span><br>main()<br></code></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">sum = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-2</span> <span class="hljs-keyword">do</span><br>    sum = sum + i<br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">print</span>(sum)<br></code></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>普通函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myPower</span><span class="hljs-params">(x,y)</span></span><br>  <span class="hljs-keyword">return</span> y+x<br><span class="hljs-keyword">end</span><br>power2 = myPower(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(power2)<br></code></pre></td></tr></table></figure><p>匿名函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newCounter</span><span class="hljs-params">()</span></span><br>   <span class="hljs-keyword">local</span> i = <span class="hljs-number">0</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>     <span class="hljs-comment">-- anonymous function</span><br>        i = i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> i<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>c1 = newCounter()<br><br><span class="hljs-built_in">print</span>(c1())  <span class="hljs-comment">--&gt; 1</span><br><span class="hljs-built_in">print</span>(c1())  <span class="hljs-comment">--&gt; 2</span><br><span class="hljs-built_in">print</span>(c1())<br></code></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>多返回值</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">name, age, bGay = <span class="hljs-string">&quot;yiming&quot;</span>, <span class="hljs-number">37</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;yimingl@hotmail.com&quot;</span><br><span class="hljs-built_in">print</span>(name,age,bGay)<br></code></pre></td></tr></table></figure><p>函数返回值</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isMyGirl</span><span class="hljs-params">(name)</span></span><br>  <span class="hljs-keyword">return</span> name == <span class="hljs-string">&#x27;xiao6&#x27;</span> , name<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> bol,name = isMyGirl(<span class="hljs-string">&#x27;xiao6&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(name,bol)<br></code></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><p>key，value的键值对 类似 map</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">lucy = &#123;name=<span class="hljs-string">&#x27;xiao6&#x27;</span>,age=<span class="hljs-number">18</span>,height=<span class="hljs-number">165.5</span>&#125;<br>xiao6.age=<span class="hljs-number">35</span><br><br><span class="hljs-built_in">print</span>(xiao6.name,xiao6.age,xiao6.height)<br><span class="hljs-built_in">print</span>(xiao6)<br></code></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">arr = &#123;<span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;xiao6&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;memeda&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>&#125;<br><br><span class="hljs-built_in">print</span>(arr[<span class="hljs-number">4</span>]())<br></code></pre></td></tr></table></figure><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(arr) <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(k, v)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">person = &#123;name=<span class="hljs-string">&#x27;xiao6&#x27;</span>,age = <span class="hljs-number">18</span>&#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">person.eat</span><span class="hljs-params">(food)</span></span><br>    <span class="hljs-built_in">print</span>(person.name ..<span class="hljs-string">&quot; eating &quot;</span>..food)<br>  <span class="hljs-keyword">end</span><br>person.eat(<span class="hljs-string">&quot;xxoo&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="Lua-整合-redis"><a href="#Lua-整合-redis" class="headerlink" title="Lua 整合 redis"></a>Lua 整合 redis</h2><h3 id="在redis中执行简单脚本"><a href="#在redis中执行简单脚本" class="headerlink" title="在redis中执行简单脚本"></a>在redis中执行简单脚本</h3><p>登录到客户端后执行</p><h4 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#命令    脚本        参数个数</span><br><span class="hljs-attr">eval</span><span class="hljs-string">&quot;return 1+1&quot;    0</span><br></code></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">EVAL <span class="hljs-string">&quot;local msg=&#x27;hello world&#x27; return msg..KEYS[1]&quot;</span> <span class="hljs-number">1</span> AAA BBB<br></code></pre></td></tr></table></figure><p>表是基于1的，也就是说索引以数值1开始。所以在表中的第一个元素就是mytable[1]，第二个就是mytable[2]等等。 表中不能有nil值。如果一个操作表中有[1, nil, 3, 4]，那么结果将会是[1]——表将会在第一个nil截断。</p><h3 id="独立脚本"><a href="#独立脚本" class="headerlink" title="独立脚本"></a>独立脚本</h3><h4 id="获取key的value"><a href="#获取key的value" class="headerlink" title="获取key的value"></a>获取key的value</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> key=KEYS[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">local</span> list=redis.call(<span class="hljs-string">&quot;get&quot;</span>,key);  <br><br><span class="hljs-keyword">return</span> list;<br></code></pre></td></tr></table></figure><h4 id="读取redis集合中的数据"><a href="#读取redis集合中的数据" class="headerlink" title="读取redis集合中的数据"></a>读取redis集合中的数据</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> key=KEYS[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">local</span> list=redis.call(<span class="hljs-string">&quot;lrange&quot;</span>,key,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>);<br><br><span class="hljs-keyword">return</span> list;<br></code></pre></td></tr></table></figure><h4 id="统计点击次数"><a href="#统计点击次数" class="headerlink" title="统计点击次数"></a>统计点击次数</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> msg=<span class="hljs-string">&#x27;count:&#x27;</span><br><span class="hljs-keyword">local</span> count = redis.call(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;count&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> count <span class="hljs-keyword">then</span><br>        redis.call(<span class="hljs-string">&quot;set&quot;</span>,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">end</span><br><br>redis.call(<span class="hljs-string">&quot;incr&quot;</span>,<span class="hljs-string">&quot;count&quot;</span>)<br><br><span class="hljs-keyword">return</span> msg..count+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="执行lua脚本"><a href="#执行lua脚本" class="headerlink" title="执行lua脚本"></a>执行lua脚本</h4><h5 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h5><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">redis-<span class="hljs-keyword">cli</span> --eval <span class="hljs-keyword">test</span><span class="hljs-number">.</span>lua <span class="hljs-keyword">aaa</span>,bbb<br></code></pre></td></tr></table></figure><h5 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">redis-cli -h <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.161</span> -a密码 <span class="hljs-comment">--eval /usr/local/luascript/test.lua name age , xiao6</span><br></code></pre></td></tr></table></figure><h3 id="Lua-与-Redis-交互"><a href="#Lua-与-Redis-交互" class="headerlink" title="Lua 与 Redis 交互"></a>Lua 与 Redis 交互</h3><h4 id="Lua-脚本获取-EVAL-amp-EVALSHA-命令的参数"><a href="#Lua-脚本获取-EVAL-amp-EVALSHA-命令的参数" class="headerlink" title="Lua 脚本获取 EVAL &amp; EVALSHA 命令的参数"></a>Lua 脚本获取 EVAL &amp; EVALSHA 命令的参数</h4><p>通过 Lua 脚本的全局变量 KEYS 和 ARGV，能够访问 EVAL 和 EVALSHA 命令的 key [key …] 参数和 arg [arg …] 参数。</p><p>作为 Lua Table，能够将 KEYS 和 ARGV 作为一维数组使用，其下标从 1 开始。</p><h4 id="Lua-脚本内部执行-Redis-命令"><a href="#Lua-脚本内部执行-Redis-命令" class="headerlink" title="Lua 脚本内部执行 Redis 命令"></a>Lua 脚本内部执行 Redis 命令</h4><p>Lua 脚本内部允许通过内置函数执行 Redis 命令：</p><p>redis.call()</p><p>redis.pcall()</p><p>两者非常相似，区别在于：</p><p>若 Redis 命令执行错误，redis.call() 将错误抛出（即 EVAL &amp; EVALSHA 执行出错）；</p><p>redis.pcall() 将错误内容返回。</p><p>local msg&#x3D;’count:’  local count &#x3D; redis.call(“get”,”count”)  if not count then          redis.call(“set”,”count”,1)  end  redis.call(“incr”,”count”)  return msg..count+1</p><h3 id="redis-WATCH-x2F-MULTI-x2F-EXEC-与Lua"><a href="#redis-WATCH-x2F-MULTI-x2F-EXEC-与Lua" class="headerlink" title="redis WATCH&#x2F;MULTI&#x2F;EXEC 与Lua"></a>redis WATCH&#x2F;MULTI&#x2F;EXEC 与Lua</h3><p>redis 原生支持 监听、事务、批处理，那么还需要lua吗？</p><ul><li><p>两者不存在竞争关系，而是增强关系，lua可以完成redis自身没有的功能</p></li><li><p>在lua中可以使用上一步的结果，也就是可以开发<strong>后面操作依赖前面操作的执行结果的应用</strong>，MULT中的命令都是独立操作</p></li><li><p>redis可以编写模块增强功能，但是c语言写模块，太难了，lua简单的多</p></li><li><p>计算向数据移动</p></li><li><p>原子操作</p></li></ul><p>lua脚本尽量短小并且尽量保证同一事物写在一段脚本内，因为redis是单线程的，过长的执行会造成阻塞，影响服务器性能。</p><h3 id="Redis-Lua-脚本管理"><a href="#Redis-Lua-脚本管理" class="headerlink" title="Redis Lua 脚本管理"></a>Redis Lua 脚本管理</h3><p>1.script load  此命令用于将Lua脚本加载到Redis内存中  </p><p>2.script exists  scripts exists sha1 [sha1 …]  此命令用于判断sha1是否已经加载到Redis内存中  </p><p>3.script flush  此命令用于清除Redis内存已经加载的所有Lua脚本,在执行script flush后,sha1不复存在  </p><p>4.script kill  此命令用于杀掉正在执行的Lua脚本</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>下面代码会进入死循环，导致redis无法接受其他命令。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">eval <span class="hljs-string">&quot;while true do end&quot;</span> <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; keys *<br>(<span class="hljs-built_in">error</span>) BUSY Redis is busy <span class="hljs-built_in">running</span> a script. You can only call SCRIPT KILL <span class="hljs-keyword">or</span> SHUTDOWN NOSAVE.<br></code></pre></td></tr></table></figure><p>但是可以接受 SCRIPT KILL or SHUTDOWN NOSAVE. 两个命令</p><p>SHUTDOWN NOSAVE 不会进行持久化的操作</p><p>SCRIPT KILL 可以杀死正在执行的进程</p><h3 id="生产环境下部署"><a href="#生产环境下部署" class="headerlink" title="生产环境下部署"></a>生产环境下部署</h3><h4 id="加载到redis"><a href="#加载到redis" class="headerlink" title="加载到redis"></a>加载到redis</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">redis-cli script <span class="hljs-built_in">load</span> <span class="hljs-string">&quot;$(cat test.lua)&quot;</span><br></code></pre></td></tr></table></figure><p>得到sha1值</p><p>执行</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">redis-cli evalsha <span class="hljs-string">&quot;7a2054836e94e19da22c13f160bd987fbc9ef146&quot;</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/JMH/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/JMH/</url>
    
    <content type="html"><![CDATA[<h1 id="JMH-Java准测试工具套件"><a href="#JMH-Java准测试工具套件" class="headerlink" title="JMH Java准测试工具套件"></a>JMH Java准测试工具套件</h1><p><a href="http://openjdk.java.net/projects/code-tools/jmh/">http://openjdk.java.net/projects/code-tools/jmh/</a> </p><h2 id="创建JMH测试"><a href="#创建JMH测试" class="headerlink" title="创建JMH测试"></a>创建JMH测试</h2><ol><li><p>创建Maven项目，添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;properties&gt;<br>        &lt;project.build.sourceEncoding&gt;UTF-<span class="hljs-number">8</span>&lt;/project.build.sourceEncoding&gt;<br>        &lt;encoding&gt;UTF-<span class="hljs-number">8</span>&lt;/encoding&gt;<br>        &lt;java.version&gt;<span class="hljs-number">1.8</span>&lt;/java.version&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">1.8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">1.8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>    &lt;groupId&gt;mashibing.com&lt;/groupId&gt;<br>    &lt;artifactId&gt;HelloJMH2&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br><br><br>    &lt;dependencies&gt;<br>        &lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --&gt;</span><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;<br>            &lt;artifactId&gt;jmh-core&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.21</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --&gt;</span><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;<br>            &lt;artifactId&gt;jmh-generator-annprocess&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.21</span>&lt;/version&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure></li><li><p>idea安装JMH插件 JMH plugin v1.0.3</p></li><li><p>由于用到了注解，打开运行程序注解配置</p><blockquote><p>compiler -&gt; Annotation Processors -&gt; Enable Annotation Processing</p></blockquote></li><li><p>定义需要测试类PS (ParallelStream)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mashibing.jmh;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PS</span> &#123;<br><br><span class="hljs-keyword">static</span> List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) nums.add(<span class="hljs-number">1000000</span> + r.nextInt(<span class="hljs-number">1000000</span>));<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foreach</span><span class="hljs-params">()</span> &#123;<br>nums.forEach(v-&gt;isPrime(v));<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parallel</span><span class="hljs-params">()</span> &#123;<br>nums.parallelStream().forEach(PS::isPrime);<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=num/<span class="hljs-number">2</span>; i++) &#123;<br><span class="hljs-keyword">if</span>(num % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写单元测试</p><blockquote><p>这个测试类一定要在test package下面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mashibing.jmh;<br><br><span class="hljs-keyword">import</span> org.openjdk.jmh.annotations.Benchmark;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.jupiter.api.Assertions.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PSTest</span> &#123;<br>    <span class="hljs-meta">@Benchmark</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testForEach</span><span class="hljs-params">()</span> &#123;<br>        PS.foreach();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>运行测试类，如果遇到下面的错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ERROR: org.openjdk.jmh.runner.RunnerException: ERROR: Exception <span class="hljs-keyword">while</span> trying to acquire the JMH <span class="hljs-title function_">lock</span> <span class="hljs-params">(C:\WINDOWS\/jmh.lock)</span>: C:\WINDOWS\jmh.lock (拒绝访问。), exiting. Use -Djmh.ignoreLock=<span class="hljs-literal">true</span> to forcefully <span class="hljs-keyword">continue</span>.<br>at org.openjdk.jmh.runner.Runner.run(Runner.java:<span class="hljs-number">216</span>)<br>at org.openjdk.jmh.Main.main(Main.java:<span class="hljs-number">71</span>)<br></code></pre></td></tr></table></figure><p>这个错误是因为JMH运行需要访问系统的TMP目录，解决办法是：</p><p>打开RunConfiguration -&gt; Environment Variables -&gt; include system environment viables</p></li><li><p>阅读测试报告</p></li></ol><h2 id="JMH中的基本概念"><a href="#JMH中的基本概念" class="headerlink" title="JMH中的基本概念"></a>JMH中的基本概念</h2><ol><li><p>Warmup<br>预热，由于JVM中对于特定代码会存在优化（本地化），预热对于测试结果很重要</p></li><li><p>Mesurement<br>总共执行多少次测试</p></li><li><p>Timeout</p></li><li><p>Threads<br>线程数，由fork指定</p></li><li><p>Benchmark mode<br>基准测试的模式</p></li><li><p>Benchmark<br>测试哪一段代码</p></li></ol><h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>官方样例：<br><a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/">http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/99.%E9%99%84%E5%BD%95/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/99.%E9%99%84%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="保证接口的幂等性"><a href="#保证接口的幂等性" class="headerlink" title="保证接口的幂等性"></a>保证接口的幂等性</h2><p><strong>单机</strong>：打开页面时先将一个唯一编号保存在session域中，提交表单时判断session域中的数据是否一致。</p><p><strong>分布式</strong>：生成一个全局唯一ID，插入redis中，每次请求先进redis判断</p><h2 id="分布式Session"><a href="#分布式Session" class="headerlink" title="分布式Session"></a>分布式Session</h2><p>Tomcat + redis：在Tomcat配置文件中配置一下redis session</p><p>Spring Session + redis</p><h2 id="秒杀系统设计"><a href="#秒杀系统设计" class="headerlink" title="秒杀系统设计"></a>秒杀系统设计</h2><blockquote><p>越早拦截，成本越低，吞吐量越大</p></blockquote><h3 id="判断活动开始"><a href="#判断活动开始" class="headerlink" title="判断活动开始"></a>判断活动开始</h3><p>Redis中存储一个ttl为抢购开始时间的key，各个服务器通过校验key是否过期，来判别活动开始。</p><h3 id="开始抢购"><a href="#开始抢购" class="headerlink" title="开始抢购"></a>开始抢购</h3><p>客户端：按钮置灰，防止重复点击</p><p>网关：通过 Nginx-lua 直接查询 redis，发现超量过多时直接返回用户 “已售空”</p><p>服务端：</p><ol><li>基于 UserId 去重，防止刷单</li><li>缓存预热，将要查询的热点数据先放入redis中，防止大量请求直接打到DB</li><li>维护一个请求计数，只通过比实际库存量稍大的请求到MQ里，其余请求响应 “已售空”</li><li>数据库更新采用乐观锁，防止超卖</li></ol><p>服务端伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* MQ 生产者 */</span><br><span class="hljs-keyword">if</span> (!redis.exists(userId))&#123;<span class="hljs-comment">// 过滤重复用户</span><br>    redis.set(userId, <span class="hljs-string">&quot;1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(redis.decr(goodsId) &lt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;已售空&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    mq.convertAndSet(userId, goodsId);<span class="hljs-comment">// 将符合条件的用户放到 MQ 消费</span><br>&#125;<br><br><span class="hljs-comment">/* MQ 消费者 */</span><br>update my_goods <span class="hljs-type">set</span> <span class="hljs-variable">stock</span> <span class="hljs-operator">=</span> stock - <span class="hljs-number">1</span>, version = version + <span class="hljs-number">1</span> <span class="hljs-type">where</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-type">and</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/4.Dubbo/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/4.Dubbo/</url>
    
    <content type="html"><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><h2 id="Dubbo各层说明"><a href="#Dubbo各层说明" class="headerlink" title="Dubbo各层说明"></a>Dubbo各层说明</h2><p>第一层：service层，接口层，给服务提供者和消费者来实现的</p><p>第二层：config层，配置层，主要是对dubbo进行各种配置的</p><p>第三层：proxy层，服务代理层，透明生成客户端的stub和服务单的skeleton</p><p>第四层：registry层，服务注册层，负责服务的注册与发现</p><p>第五层：cluster层，集群层，封装多个服务提供者的路由以及负载均衡，将多个实例组合成一个服务</p><p>第六层：monitor层，监控层，对rpc接口的调用次数和调用时间进行监控</p><p>第七层：protocol层，远程调用层，封装rpc调用</p><p>第八层：exchange层，信息交换层，封装请求响应模式，同步转异步</p><p>第九层：transport层，网络传输层，抽象mina和netty为统一接口</p><p>第十层：serialize层，数据序列化层</p><h2 id="Dubbo-执行流程"><a href="#Dubbo-执行流程" class="headerlink" title="Dubbo 执行流程"></a>Dubbo 执行流程</h2><p>服务的提供方会向注册中心注册自己提供的服务，当消费者在启动时，就会向注册中心订阅自己所需要的服务，如果服务提供方有数据变更等，注册中心将基于长连接的形式推送变更数据给消费者。</p><h2 id="Dubbo-同步调用"><a href="#Dubbo-同步调用" class="headerlink" title="Dubbo 同步调用"></a>Dubbo 同步调用</h2><p><strong>同步调用流程</strong></p><ol><li>Consumer 业务线程调用远程接口，向 Provider 发送请求，同时当前线程处于<code>阻塞</code>状态；</li><li>Provider 接到 Consumer 的请求后，开始处理请求，将结果返回给 Consumer；</li><li>Consumer 收到结果后，当前线程继续往后执行。</li></ol><p><strong>Dubbo底层是如何阻塞的</strong></p><blockquote><p>Dubbo 的底层 IO 操作都是异步的</p></blockquote><p>Consumer 端发起调用后，得到一个 Future 对象。对于同步调用，业务线程通过<code>Future.get(timeout)</code>，阻塞等待 Provider 端将结果返回。<code>timeout</code>则是 Consumer 端定义的超时时间。当结果返回后，会设置到此 Future，并唤醒阻塞的业务线程；当超时时间到结果还未返回时，业务线程将会异常返回。</p><h2 id="Dubbo-负载均衡的实现"><a href="#Dubbo-负载均衡的实现" class="headerlink" title="Dubbo 负载均衡的实现"></a>Dubbo 负载均衡的实现</h2><p>FailoverCluster类的invoke调用，对invocation进行了拦截实现去实现负载均衡</p><h2 id="注册中心挂了可以继续通信吗"><a href="#注册中心挂了可以继续通信吗" class="headerlink" title="注册中心挂了可以继续通信吗"></a>注册中心挂了可以继续通信吗</h2><p>可以通信的，启动dubbo时，消费者会从zk拉取注册的生产者的地址接口等数据，缓存在本地。每次调用时，按照本地存储的地址进行调用。</p><h2 id="Dubbo-心跳机制"><a href="#Dubbo-心跳机制" class="headerlink" title="Dubbo 心跳机制"></a>Dubbo 心跳机制</h2><p>目的：维持provider和consumer之间的长连接</p><p>实现：dubbo心跳时间heartbeat默认是1s，超过heartbeat时间没有收到消息，就发送心跳消 息(provider，consumer一样),如果连着3次(heartbeatTimeout为heartbeat*3)没有收到心跳响应，provider会关闭channel，而consumer会进行重连;不论是provider还是consumer的心跳检测都是通过启动定时任务的方式实现；</p><p>Dubbo的zookeeper做注册中心，如果注册中心全部挂掉，发布者和订阅者还能通信吗？</p><p>注册中心对等集群，任意一台宕机后，将会切换到另一台；注册中心全部宕机后，服务的提供者和消费者仍能通过本地缓存通讯。服务提供者无状态，任一台 宕机后，不影响使用；服务提供者全部宕机，服务消费者会无法使用，并无限次重连等待服务者恢复；<br>挂掉是不要紧的，但前提是你没有增加新的服务，如果你要调用新的服务，则是不能办到的。</p><p><img src="https://img-blog.csdnimg.cn/20210128173522387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="RPC协议"><a href="#RPC协议" class="headerlink" title="RPC协议"></a>RPC协议</h2><p><img src="https://img-blog.csdnimg.cn/20210106221257207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><table><thead><tr><th>协议名称</th><th>实现描述</th><th>连接</th><th>使用场景</th></tr></thead><tbody><tr><td>dubbo</td><td>netty</td><td>单一长连接和NIO异步传输</td><td>小数据量大并发的服务调用，消费者比提供者多，不适合传送大数据量的服务，比如文件、传视频</td></tr><tr><td>rmi</td><td>采用JRM 作为通讯协议</td><td>多连接，短连接，TCP&#x2F;IP，BIO</td><td>可传文件，不支持防火墙穿透</td></tr><tr><td>hessian</td><td>hessian二进制序列化</td><td>多连接，短连接，传输协议：HTTP，同步传输</td><td>提供者比消费者多 ，可传文件，跨语言传输</td></tr><tr><td>http</td><td>表单序列化</td><td>多连接，短连接，HTTP，同步传输</td><td>提供者大于消费者，数据包混合</td></tr><tr><td>webservice</td><td>SOAP文件序列化</td><td>多连接，短连接，HTTP，同步传输</td><td>系统集成，跨语言调用</td></tr><tr><td>thrift</td><td>与thrift RPC实现集成，并在基础上修改了报文头</td><td>长连接、NIO异步传输</td><td></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/2.%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/2.%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h2 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h2><ol><li><p>事务管理器询问每一个服务是否可以提交，任何一个服务拒绝，事务管理器全部回滚。</p></li><li><p>每个服务都响应可以后执行。</p></li></ol><p><strong>实现方式</strong>：Spring + JTA（XA 协议的 Java 实现）</p><p>协调者有超时机制，如果在一定的时间内未收到客户端的消息默认失败</p><p>应用：数据库</p><p>缺点：同步阻塞，单点故障</p><p><img src="https://img-blog.csdnimg.cn/20210303100135119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h2><blockquote><p>在两阶段上增加了：客户端超时机制和预提交机制</p></blockquote><ol><li>CanCommit：询问</li><li>preCommit：预提交</li><li>doCommit：提交</li></ol><p>假如有任何一个 Conhort 向 Coordinator 发送了 No 响应，或者等待超时之后，Coordinator 都没有接收到 Cohort 的响应，那么就中断事务</p><p>发送中断请求：Coordinator 向所有 Cohort 发送 abort 请求</p><p>中断事务：Corhort 收到来自 Coordinator 的 abort 请求（或超时还未收到请求），执行事务中断</p><p><img src="https://img-blog.csdnimg.cn/20210124101902970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><ol><li><p>Try：预先占有资源</p></li><li><p>Confirm：确认提交实际操作资源</p></li><li><p>Cancel：取消占有，即把那些执行成功的回滚。</p></li></ol><p><strong>使用场景</strong>：对分布式事务一致性要求高，如跟钱相关的。</p><p><strong>缺点</strong>：重耦合，需要手写补偿逻辑。</p><p><img src="https://img-blog.csdnimg.cn/20210106221025144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><p><a href="http://seata.io/zh-cn/docs/overview/what-is-seata.html">http://seata.io/zh-cn/docs/overview/what-is-seata.html</a></p><blockquote><p>TC：Transaction Coordinator</p><p>TM：Transaction Manager</p><p>RM：Resorce Manager</p><p>TM is a kind of RM.</p><p>本地锁：锁一个分布式事务中的一个服务</p><p>全局锁：锁一个分布式事务中的所有服务</p><p>Seata 支持的事务模式：AT, TCC, SAGA, XA</p></blockquote><p><strong>流程</strong></p><p><strong>分布式事务1</strong></p><p>获取本地锁 &gt; 执行 SQL &gt; 获取全局锁 &gt; 提交本地事务 &gt; 释放本地锁 &gt; 全局提交 &gt; 释放全局锁</p><p><strong>分布式事务2</strong></p><p>获取本地锁 &gt; 执行 SQL &gt; 重复获取全局锁（有超时时间） &gt; 提交本地事务 &gt; 释放本地锁 &gt; 全局提交 &gt; 释放全局锁</p><p><img src="https://img-blog.csdnimg.cn/20210124195830118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h2><blockquote><p>本地事务 + 定时任务 + 消息队列 + 事件表</p></blockquote><ol><li><p>A系统先插入数据到业务表，再插入消息表，再插入到MQ。</p></li><li><p>B系统接收到消息，先插入数据到消息表，再插入业务表，如果消息已被处理就回滚，防止重复消费。</p></li><li><p>B系统执行成功后，更新本地消息表以及 A 系统消息表的状态。</p></li><li><p>B系统执行失败，就不会更新，A系统会定时扫描本地消息表，如果有未处理消息，会再次发送到MQ。</p></li></ol><p><strong>缺陷</strong>：能保证事务的一致性，但是时效性太差</p><p>事件表字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">event_type: 事件类型<br>event_process: 事件环节 (<span class="hljs-keyword">new</span> published processed)<br>event_content: 事件内容，保存事件发生时需要传递的数据<br></code></pre></td></tr></table></figure><p>流程图</p><p><img src="https://img-blog.csdnimg.cn/20210124102926916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="可靠消息服务-最大努力通知"><a href="#可靠消息服务-最大努力通知" class="headerlink" title="可靠消息服务 - 最大努力通知"></a>可靠消息服务 - 最大努力通知</h2><ol><li>A系统本地事务执行完之后，发送个消息到 MQ。</li><li>最大努力通知服务会消费 MQ 然后写入数据库中记录下来，再调用B系统的接口。</li><li>若系统 B 执行失败，最大努力通知服务会定时尝试重新调用B系统，反复N次，最后还是不行就放弃。</li></ol><p><img src="https://img-blog.csdnimg.cn/20210124172031233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/pumpkin/2021/09/02/DevOps/Addtional/1.%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/pumpkin/2021/09/02/DevOps/Addtional/1.%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><h2 id="redis实现"><a href="#redis实现" class="headerlink" title="redis实现"></a>redis实现</h2><p>利用setnx的返回值特性，有值返回失败，无值返回成功。</p><p>redisson：一种基于redis的封装好的分布式锁。</p><h2 id="数据库实现"><a href="#数据库实现" class="headerlink" title="数据库实现"></a>数据库实现</h2><p>使用一张锁表(id, lock_name)，其中lock_name唯一</p><p>每次执行业务前先查锁表中是否有这个lock_name，如有则失败，没有则插入锁表并执行业务，并删除锁。</p><h2 id="zookeeper实现"><a href="#zookeeper实现" class="headerlink" title="zookeeper实现"></a>zookeeper实现</h2><p>有序临时节点 + watch监听</p><p>为每一个执行的线程创建一个有序的临时节点，为了确保有序性，在创建完节点，会再获取全部节点，会再获取全部节点，再重新进行一次排序，排序过程中，每个线程要判断自己的节点的序号是否是最小的。</p><p>如果是最小的，将会获取到锁，执行相关操作，释放锁</p><p>如果不是最小的，会监听到它的前一个节点，当它前一个节点被删除时，它就会获取锁，一次类推</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
